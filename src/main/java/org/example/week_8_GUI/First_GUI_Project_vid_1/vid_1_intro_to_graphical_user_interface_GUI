Intro to Java Graphical User Interfaces (slide2)

So far…

-Our programs have carried out the tasks in the order you programmed it to
-There are if statements, loops, methods, but essentially you are in control
    of what happens when - you give the user choices

Graphical User Interface (GUI) Programming (slide 3)

-Event Driven
-Program presents user with GUI (pronounced gooey)
-User can interact with any enabled feature of the GUI
-Program should respond appropriately
-User clicking a button, or typing, or selecting an item from a list etc... are events
-So, event driven programming

Overview of GUI Programming (slide 4)

-Think about your GUI design - what components will it need?
-Create your GUI from GUI components – frames, buttons, lists, labels, layout managers (used to organized components)…
-Decide which component does what
-For example, you may want something to happen when user clicks a button,
-and something else to happen when selecting an item from a list,
-And something else when user checks a checkbox
-Write an Event Handler method for each event – so in this example you'll write
    3 event handler methods, one for each of the 3 events – clicking a button,
    selecting item from a list, checking a checkbox

The state of GUI programming in Java (slide 5)

-AWT(Advanced Window toolkit): Original Java GUI toolkit, in Java 1 and up. Basic components.
-Swing: extended, more sophisticated version of AWT, Java 2 and up.
-JavaFX: designed to replace Swing, only works with Java 8; separate
    library to the standard JDK; lots of features and customization although
    more complexity, never became as popular as Swing because…
-Web and Mobile: today, desktop apps are a relatively small market
-Java web apps are HUGE - eBay, Amazon, Netflix, Google, Twitter.…
-Android development

-We'll use Swing in this class: it's still being used, there's a lot more
    documentation and resources than JavaFX
-Web and Android apps are very interesting, but they have a lot of parts -
    we don't have time to cover all the concepts
-IntelliJ is built in Swing!

***Make my first GUI:

-Recommended: create a new package for this project
-Right-click on your package
-New > Swing UI Designer > GUIForm
-Base Layout Manager = GridLayoutManager(IntelliJ)
-Give your form a name: HelloGUI
-Makes sure Create bound class is checked; the Class name is HelloGUI

Try adding some components from palette to form:

-Drag some components from palette to your form
-Once you've added some components, you can move and resize them within the layout
-Swing has various layout managers used to control positions of components in a GUI
-Different LayoutManagers handle components differently
-For example, components can be contained in a grid, and/or have positions relative to each other

LayoutManager (slide 9)

-A layout manager contains GUI components
-It manages the position of components, and arranges them in the application window
-Helps keep your GUI looking nice if the application window is resized
-Saves you having to decide the absolute position of each element in the window
-Common LayoutManagers are GridBagLayout,  FormLayout, FlowLayout
-Pictures of GUIs laid out with different layout managers:
-http://docs.oracle.com/javase/tutorial/uiswing/layout/visual.html

-A LayoutManager can contain components and panels containing other LayoutManagers
    – useful for more complex GUIs


IntelliJ auto-generates code to create the GUI components

-And hides it from you
-Much like C# / Visual Studio does, if you've taken that class
-If you chose Create bound class when creating the GUI for, you should also have a new class called
    HelloGUI.a that has a reference to each of the components in the GUI
-You can add your GUI event handlers and logic here
-Or calls to other classes to implement the logic


Give your JPanel a name

-A JPanel component is added to your GUI form
-JPanel is a Swing class that is used to hold other GUI components
-Click on the JPanel and set the field name to mainPanel
-mainPanel is a variable name that you will use in your code

Add a JButton to your JPanel

-Drag a JButton from the Palette to your JPanel
-In properties, change the button text to Click Me!
-If this is the first property you change, you'll notice the field name changes too
-If not, set the fieldName to clickMeButton

Add a JLabel to your JPanel (slide 13)

-Drag a JLabel to your JPanel
-Place it anywhere.
-In properties, change the JLabel text to I'm a label!
-You'll also need to set the field name
-I called mine myFirstLabel

Code

-3 things to work with:
-HelloGUI.form – your GUI designer
-HelloGUI.java – event handlers go here
-Main.java – default Java class with your main method in; creates the GUI

HelloGUI.java

-Contains references to your GUI components
-IntelliJ has generated code to link these to your GUI
-You’ll configure your GUI and add event handlers in this class

Code to add to HelloGUI.java

-HelloGUI extends JFrame
-A JFrame is a GUI window
-Add a constructor

HelloGUI extends JFrame
A JFrame is a GUI window
Add a constructor

