/* notes from video 3
-stringInput-
String name = stringInput("What is your name?");

-intInput -
**asks question and also does some validation. Will ask follow-up questions without crashing:
int candyBars = intInput("How many candy bars?");

-positiveIntInput -
**checks if input is positive:
int people = positiveIntInput("How many people?");

-doubleInput -
**returns positive double values
double price = doubleInput("What is the price of the item?");

-positiveDoubleInput-
**returns positive double values
double length = positiveDoubleInput("How long is the string?");

-yesNoInput-
** y or n, or yes or no (including upper and lowercase):
boolean ok = yesNoInput("OK to continue?");

-Question is optional, so could just write:
String data = stringInput()
instead of:
System.out.println("What is your name?");

 */

/*notes from video 4:

comparison operators:
==  equal to
>   greater than
>=  greater than or equal to
<   less than
<=  less than or equal to
!=  not equal to

*/
notes from video 5:
string library methods: equal and ignore case:

**check to see if strings are the same (but not the exact thing):

        if (college.equals("MCTC")) {
            //see vid_5_compare_strings for example

        **ignore case: (can be upper or lower case)
      if (college.equalsIgnoreCase("MCTC"))

**other string library methods:
https://docs.oracle.com/en/java/javase/14/docs/api/java.base/java/lang/String.html#method.summary

/* notes from video 6

-&&- AND

//check to see if both conditions are true at the same time: USE &&
        if (temp > 70 && rain == 0) {
            System.out.println("Warm and no rain - a nice day! ");

-|| (pipe character)- OR

//check to see if one condition or another condition or both are true: USE ||
        if (temp < 20 || windchill < -30) {
            System.out.println("Brrr, stay inside today!");

-Boolean-

use in comparisons

boolean easyMode = true;

if (easyMode == true) {
	System.out.println("Here's a hint...");
}

//simpler:

if (easyMode) {
	System.out.println("Here's a hint... ");
}

**library function that returns a true or false value:**

Can use the values true and false in comparisons

String sentence = "I'm a sentence";

//see if this sentence ends with a period:

if (sentence.endsWith(".") == false) {
	System.out.println("A sentence should end with a . ");
}

// Alternatively, use !
// The ! reverses the truth of an expression

//if not sentence ends with a period: (not is the !)

if (! sentence.endsWith(".")) {
	System.out.println("A sentence should end with a . ");

//video 7 notes:---------------------


//convert to lowercase:
        email = email.toLowerCase();
        System.out.println(email);
        //output: secret.email@minneapolis.edu

//convert to uppercase
        //The department code is in uppercase
        String classIdentifier = "itec 2545";
        classIdentifier = classIdentifier.toUpperCase();
        System.out.println(classIdentifier);
        //output:ITEC 2545

//make a new variable that will make uppercase:
        String classID = "itec 2545";
        String upperClassIdentifier = classID.toUpperCase();
        System.out.println(classID);
        System.out.println(upperClassIdentifier);
        //output:
        // itec 2545
        //ITEC 2545

//ends with
        //is this email a .edu email?
        System.out.println(email.endsWith(".edu"));
        //output: true
        //**yes, it does end with .edu

//starts with
        //is this class an ITEC class?
        String classCode = "ITEC 1245";
        System.out.println(classCode.startsWith("ITEC"));
        //output: true

//contains (looks for text within a string)
        //example: look for support ticket requests that contain the text "server"
        String supportTicketDescription1 = "The server is down!";
        String supportTicketDescription2 = "The mouse mat is missing!";
        String supportTicketDescription3 = "The servers need to be rebooted.";
        String supportTicketDescription4 = "Server problem: The servers need to be rebooted.";
        String supportTicketDescription5 = "I dropped my drink into the server";
        String supportTicketDescription6 = "SERVER down!";

        System.out.println(supportTicketDescription1.contains("server"));
        //output: true

//how to get around case-sensitive searching:
        String serverProblem = "The SERVER is down!";
        String searchTerm = "server";

        if (serverProblem.toUpperCase().contains(searchTerm.toUpperCase())) {
            System.out.println("Found a server problem");
        } else {
            System.out.println("This is not a server problem");
        }
        //output: Found a server problem

 //to simplify the condition: you can make new variables:
        String uppercaseServerProblem = serverProblem.toUpperCase();
        String uppercaseSearchTerm = searchTerm.toUpperCase();
        if (uppercaseServerProblem.contains(uppercaseSearchTerm)) {
            System.out.println("Server problem");
        } else {
            System.out.println("Not a server problem");
            //output: Server problem
        }

 //split sentence into words:
         String sentence = "Intellij is a Java integrated development environment";

 //this will be an array use []
         String[] words = sentence.split(" ");
 //        System.out.println(words);
         //output: [Ljava.lang.String;@19469ea2
         System.out.println(Arrays.toString(words));
         //output: [Intellij, is, a, Java, integrated, development, environment]

 //print element zero (the first thing in the sentence)
        String firstWord = words[0];
        System.out.println(firstWord);
        //output: Intellij

 String javaiDEs = "Intellij,Eclipse,NetBeans,Notepad++,VSCode";
        String[] ides = javaiDEs.split(",");
        System.out.println(Arrays.toString(ides));
        //output:[Intellij, Eclipse, NetBeans, Notepad++, VSCode]


 //another way to work with an array is to loop over each element and process each:
         //create a loop counter variable:
         //x is going to count from 0 to 1 less than the length of the array, and
         //x++ to count every iteration:
         for (int x = 0 ; x < ides.length ; x++) {
             System.out.println(ides[x]);
         }
         //ides, one printed on each line:
         //output:
         // Intellij
         //Eclipse
         //NetBeans
         //Notepad++
         //VSCode

 //split class identifier into department and code
         String javaClass = "ITEC 2545";
         String[] javaClassIdentifierParts = javaClass.split (" ");
         //note the space ^^ in just above. Without it, the output is I and T
         String department = javaClassIdentifierParts[0];
         String code = javaClassIdentifierParts[1];
         System.out.println(department);
         System.out.println(code);
         //output:
         //ITEC
         //2545

 //trim - remove whitespace - spaces, tabs, newlines start and end of a string
         //common when a user types info into a form
         String userAddressInput = "  1503 Hennepin Ave  ";
         userAddressInput = userAddressInput.trim();
         System.out.println(userAddressInput + " is the address.");
         //output: 1503 Hennepin Ave is the address. **so the white space at the beginning and the end is gone.

 //format strings
         //printf - no newline - you need to add a /n
         String className = "Java Programming";
         double credits = 6.0;
         int studentsEnrolled = 24;
         String format = "Online";

 // How would you say: The Java Programming class is 6 credits, delivered Online, and there are 24 students enrolled.
         System.out.println("The " + className + " class is " + credits + " credits, delivered " + format + ", "
                 + "and there are " + studentsEnrolled + " students enrolled.");
         //output: The Java Programming is 6.0 credits, delivered Online, and there are 24 students enrolled.

 //shortcut souf + tab

 //using string notation where variables are listed at the end:
         // %s - string
         // %f - doubles (floating point numbers)
         // %s - string
         // %d - int values
         // add the variables in the order they are in the string at the end.
         //need to add \n to start a new line
         System.out.printf("The %s class is %f credits, delivered %s, there are %d students enrolled.\n",
                 className, credits, format, studentsEnrolled);
         //output: The Java Programming is 6.000000 credits, delivered Online, there are 24 students enrolled.

 //only show one decimal place:
         System.out.printf("The %s class is %.1f credits (with one decimal place), delivered %s, there are %d students enrolled.",
                 className, credits, format, studentsEnrolled);
         //to get a new line you can also sout println() empty:
         System.out.println();

         System.out.println("This is the end of the program.");

         //output:
         // The Java Programming class is 6.0 credits, delivered Online, and there are 24 students enrolled.
         //The Java Programming class is 6.000000 credits, delivered Online, there are 24 students enrolled.
         //The Java Programming class is 6.0 credits (with one decimal place), delivered Online, there are 24 students enrolled.
         //This is the end of the program.
     }
 }

 **TO DO: add notes from video 8
