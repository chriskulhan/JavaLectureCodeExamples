Methods

**a lot like python functions

vid_1_methods_arrays_and_loops_warmup:

/*warm up
An event has four corporate sponsors: IKEA, AT&T, CVS, and 3M.

Create an array with these names in lowercase,

String sponsors = { "Ikea", "at&t", "cvs", "3m" };

But, these company names should all written in uppercase letters.

Write a loop that converts each name to uppercase. Modify the strings in the original array.

Print the array, using Arrays.toString, to check the names are converted correctly.
 */

package org.example.week3_methods_program_design;

import java.util.Arrays;

public class vid_1_methods_arrays_and_loops_warmup {
    public static void main(String[] args) {

        //modify array, makes strings uppercase
        String[] sponsors = {"ikea", "at&t", "cvs", "3m"};

        for (int i = 0; i < sponsors.length; i++) {
            //System.out.println(sponsors[i]);
            //output:
            //ikea
            //at&t
            //cvs
            //3m

            //instead of ^^, make a new variable:
            String sponsor = sponsors[i];

            //convert sponsor to uppercase
            sponsor = sponsor.toUpperCase();

            //overwrite the previous array with the uppercase version in the same position:
            sponsors[i] = sponsor;
        }
        System.out.println(Arrays.toString(sponsors));
        //output:[IKEA, AT&T, CVS, 3M] //worked!!
    }
}

//shorter version:

package org.example.week3_methods_program_design;

import java.util.Arrays;

public class vid_1_methods_arrays_and_loops_warmup {
    public static void main(String[] args) {

        //modify array, makes strings uppercase
        String[] sponsors = {"ikea", "at&t", "cvs", "3m"};
        for (int i = 0; i < sponsors.length; i++) {
                        sponsors[i] = sponsors[i].toUpperCase();
                    }
                    System.out.println(Arrays.toString(sponsors));
                    //output:[IKEA, AT&T, CVS, 3M]
                }
            }

 *****vid_1_warm_up_2_running_schedule

/*warm up program 2- running schedule:
You have a friend who wants to run a marathon race, 26.2 miles. Currently, your friend can run 1 mile.
Your friend's plan is to try to run 10% further every week, until they can run the entire marathon distance*

So in the first week of training, they will run 1 mile; second week 1.1 miles, third week 1.21 miles…

Use a loop to calculate the distance they need to run every week until they can run the full 26.2 miles.
How many weeks until your friend can run an entire marathon?

What type of loop do you need? A for loop, or a while loop?
(Optional: Can you use string formatting to display the weekly distances to 2 decimal places?)

 */
 package org.example.week3_methods_program_design;

 public class vid_1_warm_up_2_running_schedule {
     public static void main(String[] args) {

 //        my attempt: (wrong)
 //        String[] distancePerWeek = {};
 //        for (double runningDistance = 1.0, runningDistance <=26.2, runningDistance = runningDistance * (1.10));
 //        {
 //            System.out.println(distancePerWeek[runningDistance]);

             //Clara's work:
 //        //variables:
 //        double currentDistance = 1; //starting point before loop
 //        double targetDistance = 26.2; //max miles they want to run
 //        double percentIncrease = 1.10; //(increase by 10%)
 //        int week = 1;
 //
 //        //loop will count the number of weeks.
 //        while (currentDistance < targetDistance) {
 //            System.out.println(week + " " + currentDistance);
 //            currentDistance = currentDistance * percentIncrease;
 //            week++; //count number of weeks
 //        }
 //         //need to print outside the method to get the final currentDistance to show
 //        System.out.println(week + " " + currentDistance);
         }
     }
 //output: 1 1.0
 //2 1.1
 //3 1.2100000000000002
 //4 1.3310000000000004
 //5 1.4641000000000006
 //6 1.6105100000000008
 //7 1.771561000000001
 //8 1.9487171000000014
 //9 2.1435888100000016
 //10 2.357947691000002
 //11 2.5937424601000023
 //12 2.853116706110003
 //13 3.1384283767210035
 //14 3.4522712143931042
 //15 3.797498335832415
 //16 4.177248169415656
 //17 4.594972986357222
 //18 5.054470284992944
 //19 5.559917313492239
 //20 6.115909044841463
 //21 6.72749994932561
 //22 7.400249944258172
 //23 8.140274938683989
 //24 8.954302432552389
 //25 9.849732675807628
 //26 10.834705943388391
 //27 11.91817653772723
 //28 13.109994191499954
 //29 14.420993610649951
 //30 15.863092971714948
 //31 17.449402268886445
 //32 19.19434249577509
 //33 21.1137767453526
 //34 23.22515441988786
 //35 25.54766986187665
 //36 28.102436848064315

********vid_2_java_methods

/*Java methods;

Very much like functions in Python
You may have written code like this
Remember function definitions, arguments and parameters, return values
Code in a function doesn't run until it is called

 */

/*Java methods;

Very much like functions in Python
You may have written code like this
Remember function definitions, arguments and parameters, return values
Code in a function doesn't run until it is called

 */

package org.example.week3_methods_program_design;

import static input.InputUtils.stringInput;

public class vid_2_java_methods {
    //Clara's code she called it HelloMethods in the examples (2545) on github:
    // main method: (runs first)

        //This is the main method - the first code to run
        public static void main(String[] args) {

            String name = stringInput("Please enter your name");
            String greeting = makeGreeting(name);
            // name is the argument ^^there, it's what will become "(String n)" below in the
            //other place where makeGreeting is.
            System.out.println(greeting);

        }    // This is the end of the main method.


        // A new method that we've created.
        // This method takes one argument, a String.
        // It will create a new String made from the word "Hello"
        // plus the String argument, plus an exclamation point !
        // It will then return that new greeting String.
        public static String makeGreeting(String n) {
            // first String is output type, (String n) is the input
            //when makeGreeting has a () down here it's called a parameter ^^^
            String greeting = "Hello " + n + "!";
            //this type (String) must match the type above
            return greeting;

        }    // The end of the makeGreeting method

    }   // End of the vid_2_java_methods class

//input/output:
//Please enter your name
//chris
//Hello chris!

****vid_3_more_methods_arguments_and_parameters****


/* ***Designing with methods:*** (slide 11)
Use methods to…
-Eliminate repetitive code (example: .toUpperCase())
-Organize program into sub-tasks (helps to organize info and when debugging)
-A method should have one specific task it does, at a certain level of detail
-You should be able to describe the purpose of your method in 1 or 2 sentences
-A method may call other methods

***Coding with methods*** (slide 12)
-Is easier to test
-Your lab code is in methods, so a test can check the method(s) you work on
-This principle applies to other projects too
-Is easier to understand
-Several small methods are easier to understand individually; than one giant block of code
-Is easier to maintain and debug
-Can focus on one, or just a few, methods - instead of the entire program

 */

//this program will convert miles to km
//Clara's code from https://github.com/claraj/Java2545Examples/blob/main/src/main/java/week3_methods/MilesToKm.java
//named in Clara's code: MilesToKM

package org.example.week3_methods_program_design;

import static input.InputUtils.doubleInput;

public class vid_3_more_methods_arguments_and_parameters {
    //This is the main method - the first code to run
    public static void main(String[] args) {

        double miles = doubleInput("Please enter number of miles:");
        double km = milesToKM(miles);
        //when you first type a method, it doesn't exist, so the type will be red, you can have
        //Intellij create the method for you, buy right-clicking and selecting that option (or shift-alt-enter <on a mac>)
        //then push "tab" and Intellij will suggest the type of parameter including the type
        System.out.println(miles + " miles is equal to " + km + " kilometers.");

    }    // This is the end of the main method.

    // This method takes one argument, a number of miles
    // It calculates the equivalent in kilometers, and returns that value
    public static double milesToKM(double miles) {
        //because the public static "double" part of this method doesn't say "void" it needs to return something

        double km = miles * 1.6;   // One mile is 1.6 kilometers
        //km warning
        return km;
        //input:output:
        //Please enter number of miles:
        //12
        //12.0 miles is equal to 19.200000000000003 kilometers.

        //alternate (replace double km = miles * 1.6;
        //        return km;)


        //return miles * 1.6;
        //will still work

        //make sure the types (int, double, etc.) match up

    }    // The end of the milesToKM method

}

**vid_3_count_program****



