Methods

**a lot like python functions

vid_1_methods_arrays_and_loops_warmup:

/*warm up
An event has four corporate sponsors: IKEA, AT&T, CVS, and 3M.

Create an array with these names in lowercase,

String sponsors = { "Ikea", "at&t", "cvs", "3m" };

But, these company names should all written in uppercase letters.

Write a loop that converts each name to uppercase. Modify the strings in the original array.

Print the array, using Arrays.toString, to check the names are converted correctly.
 */

package org.example.week3_methods_program_design;

import java.util.Arrays;

public class vid_1_methods_arrays_and_loops_warmup {
    public static void main(String[] args) {

        //modify array, makes strings uppercase
        String[] sponsors = {"ikea", "at&t", "cvs", "3m"};

        for (int i = 0; i < sponsors.length; i++) {
            //System.out.println(sponsors[i]);
            //output:
            //ikea
            //at&t
            //cvs
            //3m

            //instead of ^^, make a new variable:
            String sponsor = sponsors[i];

            //convert sponsor to uppercase
            sponsor = sponsor.toUpperCase();

            //overwrite the previous array with the uppercase version in the same position:
            sponsors[i] = sponsor;
        }
        System.out.println(Arrays.toString(sponsors));
        //output:[IKEA, AT&T, CVS, 3M] //worked!!
    }
}

//shorter version:

package org.example.week3_methods_program_design;

import java.util.Arrays;

public class vid_1_methods_arrays_and_loops_warmup {
    public static void main(String[] args) {

        //modify array, makes strings uppercase
        String[] sponsors = {"ikea", "at&t", "cvs", "3m"};
        for (int i = 0; i < sponsors.length; i++) {
                        sponsors[i] = sponsors[i].toUpperCase();
                    }
                    System.out.println(Arrays.toString(sponsors));
                    //output:[IKEA, AT&T, CVS, 3M]
                }
            }

 *****vid_1_warm_up_2_running_schedule

/*warm up program 2- running schedule:
You have a friend who wants to run a marathon race, 26.2 miles. Currently, your friend can run 1 mile.
Your friend's plan is to try to run 10% further every week, until they can run the entire marathon distance*

So in the first week of training, they will run 1 mile; second week 1.1 miles, third week 1.21 miles…

Use a loop to calculate the distance they need to run every week until they can run the full 26.2 miles.
How many weeks until your friend can run an entire marathon?

What type of loop do you need? A for loop, or a while loop?
(Optional: Can you use string formatting to display the weekly distances to 2 decimal places?)

 */
 package org.example.week3_methods_program_design;

 public class vid_1_warm_up_2_running_schedule {
     public static void main(String[] args) {

 //        my attempt: (wrong)
 //        String[] distancePerWeek = {};
 //        for (double runningDistance = 1.0, runningDistance <=26.2, runningDistance = runningDistance * (1.10));
 //        {
 //            System.out.println(distancePerWeek[runningDistance]);

             //Clara's work:
 //        //variables:
 //        double currentDistance = 1; //starting point before loop
 //        double targetDistance = 26.2; //max miles they want to run
 //        double percentIncrease = 1.10; //(increase by 10%)
 //        int week = 1;
 //
 //        //loop will count the number of weeks.
 //        while (currentDistance < targetDistance) {
 //            System.out.println(week + " " + currentDistance);
 //            currentDistance = currentDistance * percentIncrease;
 //            week++; //count number of weeks
 //        }
 //         //need to print outside the method to get the final currentDistance to show
 //        System.out.println(week + " " + currentDistance);
         }
     }
 //output: 1 1.0
 //2 1.1
 //3 1.2100000000000002
 //4 1.3310000000000004
 //5 1.4641000000000006
 //6 1.6105100000000008
 //7 1.771561000000001
 //8 1.9487171000000014
 //9 2.1435888100000016
 //10 2.357947691000002
 //11 2.5937424601000023
 //12 2.853116706110003
 //13 3.1384283767210035
 //14 3.4522712143931042
 //15 3.797498335832415
 //16 4.177248169415656
 //17 4.594972986357222
 //18 5.054470284992944
 //19 5.559917313492239
 //20 6.115909044841463
 //21 6.72749994932561
 //22 7.400249944258172
 //23 8.140274938683989
 //24 8.954302432552389
 //25 9.849732675807628
 //26 10.834705943388391
 //27 11.91817653772723
 //28 13.109994191499954
 //29 14.420993610649951
 //30 15.863092971714948
 //31 17.449402268886445
 //32 19.19434249577509
 //33 21.1137767453526
 //34 23.22515441988786
 //35 25.54766986187665
 //36 28.102436848064315

********vid_2_java_methods

/*Java methods;

Very much like functions in Python
You may have written code like this
Remember function definitions, arguments and parameters, return values
Code in a function doesn't run until it is called

 */

/*Java methods;

Very much like functions in Python
You may have written code like this
Remember function definitions, arguments and parameters, return values
Code in a function doesn't run until it is called

 */

package org.example.week3_methods_program_design;

import static input.InputUtils.stringInput;

public class vid_2_java_methods {
    //Clara's code she called it HelloMethods in the examples (2545) on github:
    // main method: (runs first)

        //This is the main method - the first code to run
        public static void main(String[] args) {

            String name = stringInput("Please enter your name");
            String greeting = makeGreeting(name);
            // name is the argument ^^there, it's what will become "(String n)" below in the
            //other place where makeGreeting is.
            System.out.println(greeting);

        }    // This is the end of the main method.


        // A new method that we've created.
        // This method takes one argument, a String.
        // It will create a new String made from the word "Hello"
        // plus the String argument, plus an exclamation point !
        // It will then return that new greeting String.
        public static String makeGreeting(String n) {
            // first String is output type, (String n) is the input
            //when makeGreeting has a () down here it's called a parameter ^^^
            String greeting = "Hello " + n + "!";
            //this type (String) must match the type above
            return greeting;

        }    // The end of the makeGreeting method

    }   // End of the vid_2_java_methods class

//input/output:
//Please enter your name
//chris
//Hello chris!

****vid_3_more_methods_arguments_and_parameters****


/* ***Designing with methods:*** (slide 11)
Use methods to…
-Eliminate repetitive code (example: .toUpperCase())
-Organize program into sub-tasks (helps to organize info and when debugging)
-A method should have one specific task it does, at a certain level of detail
-You should be able to describe the purpose of your method in 1 or 2 sentences
-A method may call other methods

***Coding with methods*** (slide 12)
-Is easier to test
-Your lab code is in methods, so a test can check the method(s) you work on
-This principle applies to other projects too
-Is easier to understand
-Several small methods are easier to understand individually; than one giant block of code
-Is easier to maintain and debug
-Can focus on one, or just a few, methods - instead of the entire program

 */

//this program will convert miles to km
//Clara's code from https://github.com/claraj/Java2545Examples/blob/main/src/main/java/week3_methods/MilesToKm.java
//named in Clara's code: MilesToKM

package org.example.week3_methods_program_design;

import static input.InputUtils.doubleInput;

public class vid_3_more_methods_arguments_and_parameters {
    //This is the main method - the first code to run
    public static void main(String[] args) {

        double miles = doubleInput("Please enter number of miles:");
        double km = milesToKM(miles);
        //when you first type a method, it doesn't exist, so the type will be red, you can have
        //Intellij create the method for you, buy right-clicking and selecting that option (or shift-alt-enter <on a mac>)
        //then push "tab" and Intellij will suggest the type of parameter including the type
        System.out.println(miles + " miles is equal to " + km + " kilometers.");

    }    // This is the end of the main method.

    // This method takes one argument, a number of miles
    // It calculates the equivalent in kilometers, and returns that value
    public static double milesToKM(double miles) {
        //because the public static "double" part of this method doesn't say "void" it needs to return something

        double km = miles * 1.6;   // One mile is 1.6 kilometers
        //km warning
        return km;
        //input:output:
        //Please enter number of miles:
        //12
        //12.0 miles is equal to 19.200000000000003 kilometers.

        //alternate (replace double km = miles * 1.6;
        //        return km;)


        //return miles * 1.6;
        //will still work

        //make sure the types (int, double, etc.) match up

    }    // The end of the milesToKM method

}

**vid_3_count_program****
package org.example.week3_methods_program_design;

import static input.InputUtils.intInput;

//from Clara's code: https://github.com/claraj/Java2545Examples/blob/main/src/main/java/week3_methods/Counting.java
public class vid_3_count_program {
    //This is the main method - the first code to run
    public static void main(String[] args) {

        //print a list of numbers in order
        int smallNumber = intInput("Please enter a small integer number");
        int largeNumber = intInput("Please enter a large integer number");

        System.out.println("I will now count from " + smallNumber + " to " + largeNumber);

        //call the count function:
        count(smallNumber, largeNumber);

    }    // This is the end of the main method.


    // A new method that we've created called vid_3_count_program
    // This method takes two arguments, both integers,
    // representing a number to start counting from and a number to stop counting at
    // It will count from min to max, printing out each number.

    //use "void" as the return type when the method isn't going to return anything:
    public static void count(int min, int max) {

        for (int i = min ; i <= max ; i++) {
            System.out.println(i);
        }
        //input: output:
        //Please enter a small integer number
        //3
        //Please enter a large integer number
        //5
        //I will now count from 3 to 5
        //3
        //4
        //5

    }  // The end of the count method

}   // The end of the Counting class

***vid_4_methods_reusing_methods***
/*From Clara's code: https://github.com/claraj/Java2545Examples/blob/main/src/main/java/week3_methods/Squares.java

*/

package org.example.week3_methods_program_design;

import static input.InputUtils.doubleInput;

public class vid_4_methods_reusing_methods {
    public static void main(String[] args) {

        double number = doubleInput("Please enter a number and I'll square it");
        square(number);

    }    // This is the end of the main method.

    // This method takes one argument, a number
    // It calculates the square of that number (by multiplying it by itself)
    // and prints the number and its square value
    public static void square(double n) {

        double sq = n * n;   // The square of a number is that number multiplied by itself
        System.out.println("The square of " + n + " is " + sq);
        //input:output:
        // Please enter a number and I'll square it
        //2
        //The square of 2.0 is 4.0
    }    // The end of the squares method

} // End of the Squares class

***vid_4_square_another_way****
/*
Clara's code:https://github.com/claraj/Java2545Examples/blob/main/src/main/java/week3_methods/Squares2.java
 -this is the way the labs expect you to code: (no printing within methods, and only one task per method)
 */

package org.example.week3_methods_program_design;

import static input.InputUtils.doubleInput;

public class vid_4_square_another_way {
    public static void main(String[] args) {

        double number = doubleInput("Please enter a number and I'll square it");
        double squaredNumber = square(number);
        System.out.println("The square of " + number + " is " + squaredNumber);


    }    // This is the end of the main method.


    // This method takes one argument, a number
    // It calculates the square of that number (by multiplying it by itself)
    // and then returns the square value.
    public static double square(double n) {

        double sq = n * n;   // The square of a number is that number multiplied by itself
        return sq;
        //input:output:
        //Please enter a number and I'll square it
        //4
        //The square of 4.0 is 16.0

    }    // The end of the squares method
}

/*notes: printing things from methods isn't advised because the methods should only do one thing at a time.
-makes the method more reusable.
 */

 ***vid_4_squares_with_loop****

 /* From Clara's code: https://github.com/claraj/Java2545Examples/blob/main/src/main/java/week3_methods/Squares3.java
 */

 package org.example.week3_methods_program_design;

 public class vid_4_squares_with_loop {
     //This is the main method - the first code to run
     public static void main(String[] args) {

         System.out.println("Here are the squares of the numbers 1 to 10");

         for (int x = 1 ; x <= 10 ; x++ ) {
             double xSquared = square(x);
             System.out.println("The square of " + x + " is " + xSquared);
         }

     }    // This is the end of the main method.


     // This method takes one argument, a number
     // It calculates the square of that number (by multiplying it by itself)
     // and then returns the square value.
     public static double square(double n) {

         double sq = n * n;   // The square of a number is that number multiplied by itself
         return sq;

     }    // The end of the squares method
 }

*****vid_4_your_turn_MPG_calculator*****
/*Write a program to calculate the MPG for a car journey.
(MPG = Miles per gallon, calculate by dividing number of miles by number of gallons of gas used)
Write a method that has two parameters:
a number of miles driven, and
a number of gallons of gas used on a car journey
Your method should calculate and return the MPG for the car journey
Your main method should
Ask the user for the miles and gas used
Call your method
Use the returned data to display the MPG
 */

package org.example.week3_methods_program_design;

import static input.InputUtils.doubleInput;

public class vid_4_your_turn_MPG_calculator {
    public static void main(String[] args) {
        //the main method is used to interact with the user

        double milesDriven = doubleInput("How many miles have you driven on your trip?");
        double gallonsGasConsumed = doubleInput("How many gallons of gas has your car used so far?");
        double MPG =  milesPerGallon(milesDriven, gallonsGasConsumed);
        //milesDriven will correspond to miles below, gallonsGasConsumed will correspond to gallons below:
        System.out.println("Your car's MPG rating for your trip so far is " + MPG + " miles per gallon.");

    }

    public static double milesPerGallon(double miles, double gallons) {
        //this part does the "work" of the method using the user input data
        //miles per gallon can be found by dividing miles by gallons:
        double MPG =  miles / gallons;
        return MPG;
    }
    //input:output:
    //How many miles have you driven on your trip?
    //34
    //How many gallons of gas has your car used so far?
    //2
    //Your car's MPG rating for your trip so far is 17.0 miles per gallon.
}

*****vid_5_scope_and_your_turn_credits_to_graduate

/*Scope of a variable:
-Where does the variable exist??
-It only exists within each part.
--anything you declare in main only exists there
--anything you declare in the other methods only exist there, but you can send them to main using parameters
 */

/*Your Turn: (slide 19)
Re-write the Python program at the start of class in Java
In the main method, ask the user how many credits they have earned
Ask the user how many credits their program needs
Write a method called howManyCreditsToGraduate that takes two parameters - credits earned and credits needed
howManyCreditsToGraduate should calculate the number of credits needed and return it
The main method should print a message with the number of credits needed to graduate

 */

package org.example.week3_methods_program_design;

import static input.InputUtils.intInput;

public class vid_5_scope_and_your_turn_credits_to_graduate {
    public static void main(String[] args) {

    int selfReportedCreditsEarned = intInput ("How many credits have you earned");
    int selfReportedCreditsNeeded = intInput("How many credits do you need to graduate from your program?");
    int creditsYetToTake = howManyCreditsToGraduate(selfReportedCreditsEarned, selfReportedCreditsNeeded);
        System.out.println("You still need " + creditsYetToTake + " credits to finish your program.");
    }
public static int howManyCreditsToGraduate (int studentCreditsEarned, int studentCreditsNeeded){
    int creditsNeededToGraduate = studentCreditsNeeded - studentCreditsEarned;
    return creditsNeededToGraduate;
    //input:output:
    //How many credits have you earned
    //45
    //How many credits do you need to graduate from your program?
    //60
    //You still need 15 credits to finish your program.

}
}

***vid_6_methods_reducing_repetition_with_methods
/*Reducing repetition with methods (slide 26)
-It's common to do the same task (or a very similar task) more than once
-To save re-writing code over and over, we can put this code in a method
-If it's a task that's the same process, but uses different values of variables, then these variables can be
arguments to the method

 */
//example code below from Clara's code: https://github.com/claraj/Java2545Examples/blob/main/src/main/java/week3_methods/Lemonade.java
//can methods be used to improve the program? Hint: what if the lemonade stand sells another product?


//initial Lemonade program: (works, but complex)
//***What if the lemonade stand sells things besides lemonade? How to make this scalable?
//package org.example.week3_methods_program_design;
//
//import static input.InputUtils.doubleInput;
//import static input.InputUtils.intInput;
//
//public class vid_6_methods_reducing_repetition_with_methods {
//    public static void main(String[] args) {
//
//        // Calculate operating cost and profit for a lemonade stand.
//        // The lemonade stand sells lemonade, and cookies too.
//
//        // To calculate profit, need to know how much was spent on lemonade supplies, what one cup of
//        // lemonade sold for, and the number of cups sold.
//        System.out.println("How much did you spend on lemonade supplies?");
//        double lemonadeSuppliesCost = doubleInput();
//        System.out.println("What did you sell one cup of lemonade for?");
//        double lemonadeSalePrice = doubleInput();
//        System.out.println("How many cups of lemonade did you sell");
//        int lemonadeCupsSold = intInput();
//
//        // Calculate profit
//
//        double lemonadeProfit = ( lemonadeCupsSold * lemonadeSalePrice ) - lemonadeSuppliesCost;
//
//        System.out.println("Lemonade profit = $" + lemonadeProfit);
//
//        // Do same calculation for cookies
//
//        // To calculate profit, need to know how much was spent on cookie supplies, what one cookie
//        // sold for, and the number of cookies sold.
//        System.out.println("How much did you spend on cookie supplies?");
//        double cookieSuppliesCost = doubleInput();
//        System.out.println("What did you sell one cookie for?");
//        double cookieSalePrice = doubleInput();
//        System.out.println("How many cookies did you sell?");
//        int cookiesSold = intInput();
//
//        // Calculate profit
//        double cookieProfit = ( cookiesSold * cookieSalePrice ) - cookieSuppliesCost;
//
//        System.out.println("Cookie profit = $" + cookieProfit);
//
//    }
//}

//rework the above method to use another method to return computations from any item, not specific items:

package org.example.week3_methods_program_design;

import static input.InputUtils.doubleInput;
import static input.InputUtils.intInput;

public class vid_6_methods_reducing_repetition_with_methods {
    public static void main(String[] args) {

        // Calculate operating cost and profit for a lemonade stand.
        // The lemonade stand sells lemonade, and cookies too.

        // To calculate profit, need to know how much was spent on lemonade supplies, what one cup of
        // lemonade sold for, and the number of cups sold.

        // Calculate profit

        double lemonadeProfit = calculateProfitForProduct("lemonade");
        System.out.println("Lemonade profit = $" + lemonadeProfit);

        // Do same calculation for cookies

        // To calculate profit, need to know how much was spent on cookie supplies, what one cookie
        // sold for, and the number of cookies sold.
        double cookieProfit = calculateProfitForProduct("cookie");
        System.out.println("Cookie profit = $" + cookieProfit);

    }
    //what input does a new method (that could utilize any product kind) need?
    public static double calculateProfitForProduct (String productName) {
        //copied from above to attempt to simplify it:
        System.out.println("How much did you spend on " + productName + " supplies?");
        double suppliesCost = doubleInput();
        System.out.println("What did you sell one " + productName + " for?");
        double salePrice = doubleInput();
        System.out.println("How many " + productName + "s did you sell?");
        int numberSold = intInput();

        // Calculate profit
        double profit = ( numberSold * salePrice ) - suppliesCost;
        return profit;
        //input:output:
        //How much did you spend on lemonade supplies?
        //23
        //What did you sell one lemonade for?
        //3
        //How many lemonades did you sell?
        //45
        //Lemonade profit = $112.0
        //How much did you spend on cookie supplies?
        //23
        //What did you sell one cookie for?
        //2
        //How many cookies did you sell?
        //34
        //Cookie profit = $45.0

    }
}

*****vid_6_profit_calc_even_simpler

package org.example.week3_methods_program_design;

import static input.InputUtils.doubleInput;
import static input.InputUtils.intInput;

public class vid_6_profit_calc_even_simpler {
    public static void main(String[] args) {

        // Calculate operating cost and profit for a lemonade stand.
        // The lemonade stand sells lemonade, and cookies too.

        // To calculate profit, need to know how much was spent on lemonade supplies, what one cup of
        // lemonade sold for, and the number of cups sold.

        // Calculate profit

        double lemonadeProfit = calculateProfitForProductEvenSimpler("lemonade");
        System.out.println("Lemonade profit = $" + lemonadeProfit);

        // Do same calculation for cookies

        // To calculate profit, need to know how much was spent on cookie supplies, what one cookie
        // sold for, and the number of cookies sold.
        double cookieProfit = calculateProfitForProductEvenSimpler("cookie");
        System.out.println("Cookie profit = $" + cookieProfit);

        //calculate the same for coffee:
        double coffeeProfit = calculateProfitForProductEvenSimpler("coffee");
        System.out.println("Coffee profit = $" + coffeeProfit);

    }

    //another way to write the computation part of the method in shorter form:
    public static double calculateProfitForProductEvenSimpler(String productName) {
        //copied from above to attempt to simplify it:
        double suppliesCost = doubleInput("How much did you spend on " + productName + " supplies?");
        double salePrice = doubleInput("What did you sell one " + productName + " for?");
        int numberSold = intInput("How many " + productName + "s did you sell?");

        // Calculate profit
        double profit = (numberSold * salePrice) - suppliesCost;
        return profit;
        //input:output:
        // How much did you spend on lemonade supplies?
        //23
        //What did you sell one lemonade for?
        //4
        //How many lemonades did you sell?
        //45
        //Lemonade profit = $157.0
        //How much did you spend on cookie supplies?
        //12
        //What did you sell one cookie for?
        //3
        //How many cookies did you sell?
        //23
        //Cookie profit = $57.0
        // How much did you spend on coffee supplies?
        //9
        //What did you sell one coffee for?
        //2
        //How many coffees did you sell?
        //34
        //Coffee profit = $59.0

    }
}

**** vid_6_methods_running_schedule_revisit

/*Your Turn:
Start with the running schedule program you wrote at the start of the class
What if your friend wants to increase their distance by 5% every week? or 10% every week?
How does that affect the number of weeks needed?
Can you extract the weekly schedule part of the code into a method?
Use your method to calculate and display the schedules and total weeks for 1% , 5% and 10%

 //also this is NOT finished, but will be a question on the labs:
 */

package org.example.week3_methods_program_design;

public class vid_6_methods_running_schedule_revisit {
    public static void main(String[] args) {

//        my attempt: (wrong)
//        String[] distancePerWeek = {};
//        for (double runningDistance = 1.0, runningDistance <=26.2, runningDistance = runningDistance * (1.10));
//        {
//            System.out.println(distancePerWeek[runningDistance]);

        //Clara's work:
        //store data in variables, so we don't forget what the numbers are:
        double currentDistance = 1; //starting point before loop
        double targetDistance = 26.2; //max miles they want to run
        double percentIncrease = 1.10; //(increase by 10%)

        runningSchedule(currentDistance, targetDistance, percentIncrease);
    }
        public static void runningSchedule(double currentDistance, double targetDistance, double percentIncrease){

        int week = 1; //start weeks at the first week

        //loop will count the number of weeks and will do math until the marathon distance is met:
        //when talking about the problem, while or until words mean a while loop:
        while (currentDistance < targetDistance) {
            System.out.println(week + " " + currentDistance);
            currentDistance = currentDistance * percentIncrease;
            week++; //count number of weeks (alternate: week = week + 1)
        }
        System.out.println(week + " " + currentDistance);
    }
}

****vid_7_methods_format_strings

package org.example.week3_methods_program_design;

public class vid_7_methods_format_strings {
    public static void main(String[] args) {

        String college = "MCTC";
        String className = "Java Programming";
        int classCode = 2545;
        int credits = 6;
        double averageGrade = 84.545345;
        boolean isOnline = true;

        System.out.println("This class is " + classCode + " " + className + ". It is " +
                "taught at " + college + ". It is " + credits + " credits, the average " +
                "grade is " + averageGrade + "%. Is it online? " + isOnline + ".");
    //output:
        // This class is 2545 Java Programming. It is taught at MCTC. It is 6 credits,
        // the average grade is 84.545345%. Is it online? true.

        //use string formatting
        //souf = shortcut for System.out.printf();
        //%d = int
        //%s = String
        //%f = double

        System.out.printf("This class is %d %s. It is taught at %s. It is %d credits, " +
                " the average grade is %f%%. Is it online? %s \n", classCode, className, college, credits,
                averageGrade, isOnline);
        //output: This class is 2545 Java Programming. It is taught at MCTC. It is 6 credits,
        // the average grade is 84.545345. Is it online? true

        //need to use "\n" to put this on a new line (Above)
        System.out.printf("The average grade is %f%%\n", averageGrade);
        //output:The average grade is 84.545345%

        //to round to a certain number of decimal places (here 3), add ".3" after the % symbol before the f:
        System.out.printf("The average grade is %.3f%%\n", averageGrade);
        //output:The average grade is 84.545%
    }
}

*****vid_7_string_formatting_display_data_in_a_table*****

package org.example.week3_methods_program_design;
//code in Clara's examples can be found here: https://github.com/claraj/Java2545Examples/blob/main/src/main/java/week2_loops_arrays/Table.java
//not the exact code (I wrote the below from the videos:

public class vid_7_string_formatting_display_data_in_a_table {
//    public static void main(String[] args) {
//        int[] classCodes = {2545, 2505, 2560};
//        String[] classNames = {"Java", "C#", "Web"};

        //display an array with spaces filled in between:

//        for (int c = 0; c < classCodes.length; c++) {
//            int code = classCodes[c];
//            String name = classNames[c];
//            System.out.println(code + name);
            //output:
            //2545Java
            //2505C#
            //2560Web

        //how to put them in a table (with a column for the classCodes and a column for the classNames
//        public static void main(String[] args) {
//            int[] classCodes = {2545, 2505, 2560};
//            String[] classNames = {"Java", "C#", "Web"};
//            for (int c = 0; c < classCodes.length; c++) {
//                int code = classCodes[c];
//                String name = classNames[c];
//            System.out.printf("%d%s", code, name);
            //output:2545Java2505C#2560Web

//    public static void main(String[] args) {
//        int[] classCodes = {2545, 2505, 2560};
//        String[] classNames = {"Java", "C#", "Web"};
//        for (int c = 0; c < classCodes.length; c++) {
//            int code = classCodes[c];
//            String name = classNames[c];
//            System.out.printf("%d%s", code, name);
//            System.out.println();
            //output:
            // 2545Java
            //2505C#
            //2560Web

            //Make columns, aligned to the right
            //  ****by adding a positive number between the percent and variable signifier
            //in order to get spaces between the columns, add a number between the % sign and the variable signifier
            // **here number is 10, variable signifiers are d and s:
            //the 10 signifies a total of 10 characters including the characters found in the variable printed
            // (6 spaces, 4 characters with numbers, for example):

//    public static void main(String[] args) {
//        int[] classCodes = {2545, 2505, 2560};
//        String[] classNames = {"Java", "C#", "Web"};
//        for (int c = 0; c < classCodes.length; c++) {
//            int code = classCodes[c];
//            String name = classNames[c];
//            System.out.printf("%10d%10s", code, name);
//            System.out.println();
            //output :
            //      2545      Java
            //      2505        C#
            //      2560       Web

            //Make columns, aligned to the left:
            //  ****by adding a negative number between the percent and variable signifier

//    public static void main(String[] args) {
//        int[] classCodes = {2545, 2505, 2560};
//        String[] classNames = {"Java", "C#", "Web"};
//        for (int c = 0; c < classCodes.length; c++) {
//            int code = classCodes[c];
//            String name = classNames[c];
//            System.out.printf("%-10d%-10s", code, name);
//            System.out.println();
            //output:
            //2545      Java
            //2505      C#
            //2560      Web

            //add a heading to a table: place this: before the for loop:
//        System.out.printf("%-10s%-10s\n", "Code", "Name");
//
//            public static void main(String[] args) {
//                int[] classCodes = {2545, 2505, 2560};
//                String[] classNames = {"Java", "C#", "Web"};
//        for (int c = 0; c < classCodes.length; c++) {
//            int code = classCodes[c];
//            String name = classNames[c];
//
//            System.out.printf("%-10d%-10s", code, name);
//            System.out.println();
            //output:
            //Code      Name
            //2545      Java
            //2505      C#
            //2560      Web

            //to make the above table cleaner, use a variable for the header and the table contents spacing:

//    public static void main(String[] args) {
//        int[] classCodes = {2545, 2505, 2560};
//        String[] classNames = {"Java", "C#", "Web"};
//
//            String templateString = "%-10s%-10s\n";
//            System.out.printf(templateString, "Code", "Name");
//
//            for (int c = 0; c < classCodes.length; c++) {
//                int code = classCodes[c];
//                String name = classNames[c];
//
//                System.out.printf(templateString, code, name);
            //output:
                //Code      Name
                //2545      Java
                //2505      C#
                //2560      Web

            //to add an array to the table:
            public static void main(String[] args) {
                int[] classCodes = {2545, 2505, 2560};
                String[] classNames = {"Java", "C#", "Web"};
                //added array:

                double[] averageClassSizes = { 22.34233, 17.42323, 14.234234};

                String templateString = "%-10s%-10s%-10s\n";
                System.out.printf(templateString, "Code", "Name", "Ave Class Size");

                //make a new template string variable to allow for addition of new array data:
//                String tableTemplateString = "%-10d%-10s%-10.2f\n";
//
//                for (int c = 0; c < classCodes.length; c++) {
//                    int code = classCodes[c];
//                    String name = classNames[c];
//
//                    //add in the new array into the table:
//                    double averageClassSize = averageClassSizes[c];
//
//                    System.out.printf(tableTemplateString, code, name, averageClassSize);
                    //output:
                    //Code      Name      Ave Class Size
                    //2545      Java      22.342330
                    //2505      C#        17.423230
                    //2560      Web       14.234234

                    //change the String tableStringFormat to address the decimals shown:
                String tableTemplateString = "%-10d%-10s%-10.2f\n";

                for (int c = 0; c < classCodes.length; c++) {
                    int code = classCodes[c];
                    String name = classNames[c];

                    //add in the new array into the table:
                    double averageClassSize = averageClassSizes[c];

                    System.out.printf(tableTemplateString, code, name, averageClassSize);
                    //output:
                    //Code      Name      Ave Class Size
                    //2545      Java      22.34
                    //2505      C#        17.42
                    //2560      Web       14.23
        }
    }
}

//Clara's code about tables from:  https://github.com/claraj/Java2545Examples/blob/main/src/main/java/week2_loops_arrays/Table.java
//package week2_loops_arrays;
//
///*
// * Using string formatting to display data in a table */
//
//public class Table {
//    public static void main(String[] args) {
//
//        String[] classCodes = {"ITEC 2545", "ITEC 2560", "ITEC 2505", "ITEC 2905"};
//        String[] names = {"Java", "Web", "C#", "Capstone"};
//        int[] credits = {6, 6, 6, 4};
//
//        String headerFormatTemplate = "%-20s %-20s %-20s\n";
//
//        System.out.printf(headerFormatTemplate, "Class Code", "Class Name", "Credits");
//
//        for (int x = 0; x < classCodes.length; x++) {
//            String classCode = classCodes[x];
//            String name = names[x];
//            int credit = credits[x];
//
//            // %-20s means replace with a String, left-aligned within 20 spaces
//            // %20d means replace with an integer, right-aligned within 20 spaces
//            // if you omit the - for example %20s then the data will be right-aligned
//
//            String formatTemplate = "%-20s %-20s %-20d\n";
//            System.out.printf(formatTemplate, classCode, name, credit);
//        }
//
//    }
//}

***vid_8_methods_program_design_tire_warranty.java***
/*
****Waterfall method****** (doing these steps in order) (week3, slide31 from Clara's powerpoint)

Creating a program: Major steps
-Requirements (instructions)
    -Gather, Analyze
-Design (how to structure and engineer a solution)
-Code
-Integration (do different parts of a program, and see if they connect with what already exists)
-Testing
-Delivery

**for real world app:
-Maintenance
-Retirement

****Waterfall method problems: *** (slide 32)

-What do you do if a problem arises in a stage ---> you realize you need to revisit an earlier stage?
    -For example, you are in the implementation stage ---> you need to revisit the requirements?
    -If you encounter problems in integration; parts don't work together?
    -Or your customer decides they need an extra feature?
    -Or technology changes ---> now you need to do things differently?
    -This happens a lot – ****expect your requirements to change!****
-In the classic waterfall, you can't do this – the deadline has passed and there's no time or resources
      to go back to the earlier stage
-Early software development used this model, and it was responsible for many major failed pieces of software
-http://www.codinghorror.com/blog/2006/05/the-long-dismal-history-of-software-project-failure.html


*******An Agile (prototyping) development model works well for small projects*** (slide 33)

-Read and understand the requirements
-Identify a high-level design
-Build a basic, working prototype with minimal feature set
--Regular communication:
    -Review requirements and refine the prototype – add features, improve quality, test with respect to the requirements
    -Have regular quick, informal meetings – often daily - so everyone knows what is going on
-Repeat until the project is done

******Advantages of Agile******* (slide 34)

-Response to change in requirements is fast
-Issues encountered in one stages can be addressed in other stages (e.g. design problem found in coding can be fixed)
-New ideas can be added
-There's always a working program (even if it isn't complete yet) – helpful to show to the customer
    to get their feedback and input
-Components are integrated earlier, and integrations issues can be dealt with
    -Continuous integration/continuous deployment - adding new code as it's written; even adding it to
    the live version of the product checking everything still works
-Programmers tend to like Agile (not rigid and structured)

*****Agile Development Methodology***

-Trying to do everything perfectly, in order, is almost impossible
-Building a minimal version and adding features until the app is done, is usually more successful
-In the right environment, for the right project with the right team, Agile can work very well
-An Agile/prototyping methodology also works well with class projects

 */

/*Build: Car tire shopper program  (using Agile) --slide 36--

**should find price per mile warranty

-Requirement: create a price comparison program for a customer buying car tires
-Car tires are sold with specific warranties, in miles driven, which roughly corresponds
    to how long the tire is expected to last
-Cheaper tires (usually) have shorter warranties
-There are many different tires with different prices and warranties
-The program should help the user decide which tire is best value for money, by calculating
    and comparing price-per-miles for two or more tires
 */

package org.example.week3_methods_program_design;

import org.example.week1_If_Statements.StringInputs;

import static input.InputUtils.doubleInput;
import static input.InputUtils.stringInput;

public class vid_8_methods_program_design {
    public static void main(String[] args) {

        //for Agile method, start here by writing the meat of the code, and then put it in its own method:

        //get input from the user on the type of tire:
        String tireName = stringInput("Enter the name of the tire:");

        //price of the tire:
        double price = doubleInput("Enter the price for a " + tireName + " tire:");

        //how many miles is the warranty? (example; 65000)
        double miles = doubleInput("Enter the warranty miles for " + tireName);

        //figure out the price per mile:
        double pricePerMile = price / miles;
        System.out.println("The " + tireName + " tire costs $" + pricePerMile + " dollars per mile. ");

        //output:
        //Enter the name of the tire:
        //goodyear
        //Enter the price for a goodyear tire:
        //56
        //Enter the warranty miles for goodyear
        //35000
        //The goodyear tire costs $0.0016 dollars per mile.

    }
}
****vid_8_tires1_claras_code***
//https://github.com/claraj/Java2545Examples/blob/main/src/main/java/week3_methods/tires/Tires1.java

package org.example.week3_methods_program_design;

import static input.InputUtils.doubleInput;
import static input.InputUtils.stringInput;

public class vid_8_tires1_claras_code {
    public static void main(String[] args) {
        String tireName = stringInput("Enter name of tire");
        double price = doubleInput("Enter price for " + tireName);
        double miles = doubleInput("Enter warranty miles for " + tireName);
        double pricePerMile = price / miles;
        System.out.println("The " + tireName + " tire costs " + pricePerMile + " dollars per miles.");
    }
}

***vid_8_tires2_claras_code***
//https://github.com/claraj/Java2545Examples/blob/main/src/main/java/week3_methods/tires/Tires2.java
package org.example.week3_methods_program_design;

import static input.InputUtils.doubleInput;
import static input.InputUtils.stringInput;

public class vid_8_tires2_claras_code {

    public static void main(String[] args) {
        String report = getTireInfo();
        System.out.println(report);
    }

    public static String getTireInfo() {
        String tireName = stringInput("Enter name of tire");
        double price = doubleInput("Enter price for " + tireName);
        double miles = doubleInput("Enter warranty miles for " + tireName);
        double pricePerMile = price / miles;
        return "The " + tireName + " tire costs " + pricePerMile + " dollars per miles.";
    }
}

****vid_8_tires3_claras_code***

//https://github.com/claraj/Java2545Examples/blob/main/src/main/java/week3_methods/tires/Tires3.java

package org.example.week3_methods_program_design;
import static input.InputUtils.*;

public class vid_8_tires3_claras_code {
    public static void main(String[] args) {

        int numberOfTiresToCompare = positiveIntInput("Please enter the number of tires to compare");

        for (int t = 0; t < numberOfTiresToCompare; t++ ) {
            String report = getTireInfo();
            System.out.println(report);
        }
    }

    public static String getTireInfo() {
        String tireName = stringInput("Enter name of tire");
        double price = doubleInput("Enter price for " + tireName);
        double miles = doubleInput("Enter warranty miles for " + tireName);
        double pricePerMile = price / miles;
        return "The " + tireName + " tire costs " + pricePerMile + " dollars per miles.";
    }
}

****vid_8_tires4_claras_code***
package org.example.week3_methods_program_design;

import static input.InputUtils.*;

public class vid_8_tires4_claras_code {
    public static void main(String[] args) {

        int numberOfTiresToCompare = positiveIntInput("Please enter the number of tires to compare");
        String[] tireReports = new String[numberOfTiresToCompare];

        for (int t = 0; t < numberOfTiresToCompare; t++) {
            String report = getTireInfo();
            tireReports[t] = report;
        }

        printReportTable(tireReports);
    }

    private static String getTireInfo() {
        String name = stringInput("What is the name of the tire?");
        double price = positiveDoubleInput("Enter the price of " + name);
        int mileWarranty = positiveIntInput("Enter the number of miles warranty");

        double dollarsPerMile = price / mileWarranty;

        return String.format("%s costs %f, has a %d mile warranty, costs $%.3f per mile",
                name, price, mileWarranty, dollarsPerMile);
    }

    private static void printReportTable(String[] tireReports) {
        for (int t = 0; t < tireReports.length; t++) {
            System.out.println(tireReports[t]);
        }
    }
}

***vid_8_tires_final_claras_code***
//https://github.com/claraj/Java2545Examples/blob/main/src/main/java/week3_methods/tires/TiresFinal.java
package org.example.week3_methods_program_design;

import static input.InputUtils.*;

public class vid_8_tires_final_claras_code {
    public static void main(String[] args) {

        System.out.println("Welcome to the Tire Price Comparison Calculator");

        int numberOfTiresToCompare = positiveIntInput("Please enter the number of tires to compare");
        String[] tireReports = new String[numberOfTiresToCompare];

        for (int t = 0; t < numberOfTiresToCompare; t++) {
            String report = getTireInfo();
            tireReports[t] = report;
        }

        printReportTable(tireReports);

    }

    private static String getTireInfo() {
        String name = stringInput("What is the name of the tire?");
        double price = positiveDoubleInput("Enter the price of " + name);
        int mileWarranty = positiveIntInput("Enter the number of miles warranty");

        double dollarsPerMile = price / mileWarranty;
        double dollarsPer1000Miles = dollarsPerMile * 1000;

        return String.format("%s costs $%.2f, has a %d mile warranty, costs $%.3f per 1000 miles",
                name, price, mileWarranty, dollarsPer1000Miles);
    }

    private static void printReportTable(String[] tireReports) {
        for (int t = 0; t < tireReports.length; t++) {
            System.out.println(tireReports[t]);
        }
    }
}

//output:Welcome to the Tire Price Comparison Calculator
//Please enter the number of tires to compare
//2
//What is the name of the tire?
//goody
//Enter the price of goody
//23
//Enter the number of miles warranty
//34000
//What is the name of the tire?
//bingo
//Enter the price of bingo
//34
//Enter the number of miles warranty
//45000
//goody costs $23.00, has a 34000 mile warranty, costs $0.676 per 1000 miles
//bingo costs $34.00, has a 45000 mile warranty, costs $0.756 per 1000 miles

***vid_9_pass_by_value_modifying_objects_inside_methods**

/*

Strings are actually objects so they are also stored on the heap, and when a string is sent to a method then the
    reference to that string is sent to the method. So it's also pass reference by value.

    When you write code like this:


String name = "Java";
name = "C#";

The original String is replaced with an entirely new String in memory with a new reference.
So in a method call like this:

public static void main(String[] args) {
  String name = "Java";   // one string is created
  method(name);
}
public static void method(String n) { // string object reference is sent here
  n = "Not Java";   // a new String is created, it will have a new reference, the name n will now point to the new object
}


So in this example, name is one String variable, one piece of string data. When n is modified inside method,
    a new String variable with the data "Not Java" is created and assigned to the variable n, instead of the
    name variable being modified.

Some background: https://www.baeldung.com/java-string-immutable

*/


/*what happens when you modify the data in a parameter?
        -with integers and strings, the variable stays the same in the main method,
        even if it changes in the method the main calls from.
//what happens to the data in the method that method is called from?
    -the variable can change in a method it's being called from, but will stay the same in the main method.


 */
package org.example.week3_methods_program_design;

import java.util.Arrays;

public class vid_9_pass_by_value_modifying_objects_inside_methods {
    public static void main(String[] args) {

        int miles = 6;
        //miles is sent to "changeToKM"
        //(miles) is a parameter vvv
        changeToKM(miles);
        System.out.println(miles); //output: 6

        String units = "miles";
        changeToMetricUnits(units);
        System.out.println(units); //output: miles

        double [] speeds = {4,5,10,12}; //this is in miles per hour
        convertToKilometers(speeds);
        System.out.println(Arrays.toString(speeds));
        //when you call a method with an array as the argument, if that array's modified in the method, it's modified in main.
        //output: [6.4, 8.0, 16.0, 19.200000000000003]
    }

    //changing a primitive type parameter has no effect on the data in the caller
    public static void changeToKM(int distance) {
        distance = 10;
    }

    //changing a primitive type parameter has no effect on the data in the caller
    public static void changeToMetricUnits(String units) {
        units = "kilometers";

    }
// the variable acts differently when using an array:

    /*the method "convertToKilometers" has one parameter "double[] speeds"
        //the "double[] speeds" parameter that is an array that will capture double numbers (numbers with decimal points)
        //the method "convertToKilometers" will loop over the array and takes every distance in the array
            and assumes it's a number of miles multiplies it by 1.6 and then modifies the original array
            so it's modifying the "(double[] speeds)" parameter

     */
    public static void convertToKilometers(double[] speeds) {

        for (int s = 0; s < speeds.length ; s++) {
            double speed = speeds[s];
            double speedKm = speed * 1.6;
            speeds[s] = speedKm;
    }
    }

}

//if a method modifies an object type method, then the method is also modified in the main place where the object was created.
/*powerpoint slide week 3-50)

What does it mean?

-Two different mechanisms of sending data to methods
    -Pass by value – how primitive types and Strings are sent (int, double, boolean, char)
        **a copy of the primitive type is made (example: getStarsOutOfTen)
    -Passing object references by value – how arrays and most everything else is sent (everything else)


 */
 ******vid_9_passing_objects_to_methods***
 package org.example.week3_methods_program_design;

 import java.util.Arrays;

 import static input.InputUtils.stringInput;

 public class vid_9_passing_objects_to_methods {
     /**
      * Created by clara on 2019-08-23.
      * https://github.com/claraj/Java2545Examples/blob/main/src/main/java/week3_methods/ModifyingArrayInMethod.java
      */

         /* Compare this to NotModifyingPrimitiveTypes and NotModifyingPrimitiveTypesBUG.
          *
          * Unlike these programs, an array is NOT copied when it is sent to a method.
          *
          * Instead, the location of the array in memory is copied, and that's sent to the method.
          * A location in memory is called a reference. Both main and getThreeFavoriteMovies have
          * a reference to the same array.
          *
          * So when the method works with the array, it looks at the memory address, and works with
          * the array it finds there.
          *
          * There is only one array. Both main and getThreeFavoriteMovies have a reference to this array.
          * So when getThreeFavoriteMovies modifies the array, then main can see these changes.
          *
          * */

         public static void main(String[] args) {
             String[] topThreeMovies = new String[3]; // Create an empty array
             getThreeFavoriteMovies(topThreeMovies);  // pass the empty array to getThreeFavoriteMovies method
             // main never modifies the topThreeMovies array.
             // But, because getThreeFavoriteMovies modifies the array, this prints the names the user entered
             System.out.println("Your top three favorite movies are " + Arrays.toString(topThreeMovies)); //
         }

         private static void getThreeFavoriteMovies(String[] movies) {
         /* Notice that this method doesn't return anything. The array movies is the same
         array as topThreeMovies in main. So when this method modifies movies, then because
         topThreeMovies the same array, the main method can access the movie data in it.

         In this program, the array movies is effectively the same array as topThreeMovies in the main method. */

             for (int x = 0 ; x < 3; x++) {
                 String favoriteMovie = stringInput("Please enter one of your favorite movies");
                 movies[x] = favoriteMovie;
             }
         }
     }

 /* powerpoint slide 52:

 Pass by value:
 // Primitive values (int, double, boolean…) and Strings, and objects which wrap primitive types, are sent to methods using pass by value
 //A copy of the value is made
 //This copy is given to the method
 //The copy may be modified
 //The original value does not change if the copy is modified
 //All primitive variables in scope are stored in a part of memory called the stack

 slide 53: References:

 -An array is an object
     -There are many other types of objects in Java that we'll meet later, and you'll also create your own types
 -Objects are more complex than primitive types
 -How big is an object?
 -Could be any size, and its size could change
 -So it's hard to organize them in memory
 -So to organize objects, they are saved in a part of the memory called the heap, which has lots of room
 -And so the code can find an object, a reference to that object is saved on the stack
 -The reference tells the stack where to find the object in the heap
 -Object references are values
 -An object reference is a memory address - basically, a number


 Stack vs. heap:
 https://dzone.com/articles/java-memory-management

 Passing references by value: (powerpoint 56)

 -How are objects (like arrays) sent to methods?
 -Making a copy of an object could be very slow
 -Instead, the object's reference is sent
     -The object is not copied
     -The reference to the object is copied, and that is sent to the method (remember a reference is basically a number)
     -A reference to an object is the location of the actual object in the heap
     -So when the method accesses or modifies the object, it looks at its copy of the reference, and uses that to find the original object in the heap
     -So if the method modifies the object, the original object is modified
     -There is only one object (although there are two copies of its reference)

 -This is why, in the previous programs, the array changes when it is modified in the method, and the int does not

 An array is an object (slide 58)

 -Coming up in the next classes: more objects
 -File, Exception, LinkedList, ArrayList, HashMap, GUI components, objects you design and make….
 -So you'll see more examples of passing reference by value being useful in your code
 -Can make your code simpler when you need a method that modifies an object
 -Tip: a method which modifies one of its arguments should reflect that in the method name, so it is clear what is happening
 -doubleNumbersInArray(myArray)
 -makeListUppercase(myListOfStrings)



  */

****vid_9_what_does_it_mean_get_stars
/*What does it mean?

-Two different mechanisms of sending data to methods
    -Pass by value – how primitive types and Strings are sent (int, double, boolean, char)
        **a copy of the primitive type is made (example: getStarsOutOfTen)
    -Passing object references by value – how arrays and most everything else is sent (everything else)


 */

//from Clara's code: https://github.com/claraj/Java2545Examples/blob/main/src/main/java/week3_methods/NotModifyingPrimitiveTypes.java

package org.example.week3_methods_program_design;

import static input.InputUtils.positiveIntInput;

public class vid_9_what_does_it_mean_get_stars {


    /* Compare this program NotModifyingPrimitiveTypesBUG.
    This one does work.
    -When starsOutOfTen is passed to the getStarsOutOfTen method, a copy is
     made of the variables. So there are two separate, independent variables.
    -If getStarsOutOfTen modifies stars, then main will never know. starsOutOfTen won't change.

    So though the variable stars is modified in getStarsOutOfTen,
    the main method does not see the changes.

    And getStarsOutOfTen has to RETURN stars to main, so main can use the new data.

     */

    public static void main(String[] args) {

        int starsOutOfTen = 8;  // I rated a movie 8/10
        // Let's see what the user rates it
        starsOutOfTen = getStarsOutOfTen(starsOutOfTen);
        System.out.printf("You rated the movie %d/10. \n", starsOutOfTen);
    }

    public static int getStarsOutOfTen(int stars) {
        System.out.printf("The movie has been rated %d/10. What do you think?\n", stars);
        stars = positiveIntInput("Please rate the movie. How many stars out of ten?");
        return stars;
    }

}

***vid_9_what_does_it_mean_get_stars_bug


package org.example.week3_methods_program_design;

import static input.InputUtils.positiveIntInput;

public class vid_9_what_does_it_mean_get_stars_bug {
    /**
     * Created by clara on 2019-08-26.
     * https://github.com/claraj/Java2545Examples/blob/main/src/main/java/week3_methods/NotModifyingPrimitiveTypesBUG.java
     */

    /* Compare this program to ModifyingArrayInMethod
    Unlike that program, this one does not work. The variable
    s is a primitive type, it is passed by value
    A COPY of the number in starsOutOfTen is sent to getStarsOutOfTen method

    Now there are two, separate variables. If one changes, the other one is not changed.

    So even if starsOutOfTen changes stars, the main method's starsOutOfTen is not changed

    So this program doesn't work - it always prints 8/10
    */

        public static void main(String[] args) {
            int starsOutOfTen = 8;  // I rated a movie 8/10
            getStarsOutOfTen(starsOutOfTen); // Let's see what the user rates it
            System.out.printf("You rated the movie %d/10. \n", starsOutOfTen);  // BUG! Always prints 8/10
        }

        public static void getStarsOutOfTen(int stars) {
            System.out.printf("The movie has been rated %d/10. What do you think?\n", stars);
            stars = positiveIntInput("Please rate the movie. How many stars out of ten?");

            //output:(wrong)
            //The movie has been rated 8/10. What do you think?
            //Please rate the movie. How many stars out of ten?
            //input: 7
            //You rated the movie 8/10. **this is the wrong part
        }

    }

***vid_9_your_turn_makeArrayUpperCase***
/*Your turn
Write method called makeArrayUppercase
It should take a String array as an argument
It will convert all the elements in the array to uppercase characters
It should NOT return anything – the return type should be void
Test your method by writing a main method to create an example String array,
    and passing it to your method, and then displaying all the elements in the
    array to verify they are now uppercase

 */

package org.example.week3_methods_program_design;

import java.util.Arrays;

public class vid_9_your_turn_makeArrayUpperCase {
    public static void main(String[] args) {
    String[] fruits = {"banana", "apple", "mango"};
    makeArrayUpperCase(fruits);
        System.out.println(Arrays.toString(fruits));
        //output: [BANANA, APPLE, MANGO] *uses the below method to get this.
    }
public static void makeArrayUpperCase(String[] array) {
        for (int x = 0; x < array.length; x++) {
            array[x] = array[x].toUpperCase();
        }
}
}

***vid_10_null_value_pointer_exceptions.java


