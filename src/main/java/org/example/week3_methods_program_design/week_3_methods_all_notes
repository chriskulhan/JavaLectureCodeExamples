Methods

**a lot like python functions

vid_1_methods_arrays_and_loops_warmup:

/*warm up
An event has four corporate sponsors: IKEA, AT&T, CVS, and 3M.

Create an array with these names in lowercase,

String sponsors = { "Ikea", "at&t", "cvs", "3m" };

But, these company names should all written in uppercase letters.

Write a loop that converts each name to uppercase. Modify the strings in the original array.

Print the array, using Arrays.toString, to check the names are converted correctly.
 */

package org.example.week3_methods_program_design;

import java.util.Arrays;

public class vid_1_methods_arrays_and_loops_warmup {
    public static void main(String[] args) {

        //modify array, makes strings uppercase
        String[] sponsors = {"ikea", "at&t", "cvs", "3m"};

        for (int i = 0; i < sponsors.length; i++) {
            //System.out.println(sponsors[i]);
            //output:
            //ikea
            //at&t
            //cvs
            //3m

            //instead of ^^, make a new variable:
            String sponsor = sponsors[i];

            //convert sponsor to uppercase
            sponsor = sponsor.toUpperCase();

            //overwrite the previous array with the uppercase version in the same position:
            sponsors[i] = sponsor;
        }
        System.out.println(Arrays.toString(sponsors));
        //output:[IKEA, AT&T, CVS, 3M] //worked!!
    }
}

//shorter version:

package org.example.week3_methods_program_design;

import java.util.Arrays;

public class vid_1_methods_arrays_and_loops_warmup {
    public static void main(String[] args) {

        //modify array, makes strings uppercase
        String[] sponsors = {"ikea", "at&t", "cvs", "3m"};
        for (int i = 0; i < sponsors.length; i++) {
                        sponsors[i] = sponsors[i].toUpperCase();
                    }
                    System.out.println(Arrays.toString(sponsors));
                    //output:[IKEA, AT&T, CVS, 3M]
                }
            }

 *****vid_1_warm_up_2_running_schedule

/*warm up program 2- running schedule:
You have a friend who wants to run a marathon race, 26.2 miles. Currently, your friend can run 1 mile.
Your friend's plan is to try to run 10% further every week, until they can run the entire marathon distance*

So in the first week of training, they will run 1 mile; second week 1.1 miles, third week 1.21 miles…

Use a loop to calculate the distance they need to run every week until they can run the full 26.2 miles.
How many weeks until your friend can run an entire marathon?

What type of loop do you need? A for loop, or a while loop?
(Optional: Can you use string formatting to display the weekly distances to 2 decimal places?)

 */
 package org.example.week3_methods_program_design;

 public class vid_1_warm_up_2_running_schedule {
     public static void main(String[] args) {

 //        my attempt: (wrong)
 //        String[] distancePerWeek = {};
 //        for (double runningDistance = 1.0, runningDistance <=26.2, runningDistance = runningDistance * (1.10));
 //        {
 //            System.out.println(distancePerWeek[runningDistance]);

             //Clara's work:
 //        //variables:
 //        double currentDistance = 1; //starting point before loop
 //        double targetDistance = 26.2; //max miles they want to run
 //        double percentIncrease = 1.10; //(increase by 10%)
 //        int week = 1;
 //
 //        //loop will count the number of weeks.
 //        while (currentDistance < targetDistance) {
 //            System.out.println(week + " " + currentDistance);
 //            currentDistance = currentDistance * percentIncrease;
 //            week++; //count number of weeks
 //        }
 //         //need to print outside the method to get the final currentDistance to show
 //        System.out.println(week + " " + currentDistance);
         }
     }
 //output: 1 1.0
 //2 1.1
 //3 1.2100000000000002
 //4 1.3310000000000004
 //5 1.4641000000000006
 //6 1.6105100000000008
 //7 1.771561000000001
 //8 1.9487171000000014
 //9 2.1435888100000016
 //10 2.357947691000002
 //11 2.5937424601000023
 //12 2.853116706110003
 //13 3.1384283767210035
 //14 3.4522712143931042
 //15 3.797498335832415
 //16 4.177248169415656
 //17 4.594972986357222
 //18 5.054470284992944
 //19 5.559917313492239
 //20 6.115909044841463
 //21 6.72749994932561
 //22 7.400249944258172
 //23 8.140274938683989
 //24 8.954302432552389
 //25 9.849732675807628
 //26 10.834705943388391
 //27 11.91817653772723
 //28 13.109994191499954
 //29 14.420993610649951
 //30 15.863092971714948
 //31 17.449402268886445
 //32 19.19434249577509
 //33 21.1137767453526
 //34 23.22515441988786
 //35 25.54766986187665
 //36 28.102436848064315

********vid_2_java_methods

/*Java methods;

Very much like functions in Python
You may have written code like this
Remember function definitions, arguments and parameters, return values
Code in a function doesn't run until it is called

 */

/*Java methods;

Very much like functions in Python
You may have written code like this
Remember function definitions, arguments and parameters, return values
Code in a function doesn't run until it is called

 */

package org.example.week3_methods_program_design;

import static input.InputUtils.stringInput;

public class vid_2_java_methods {
    //Clara's code she called it HelloMethods in the examples (2545) on github:
    // main method: (runs first)

        //This is the main method - the first code to run
        public static void main(String[] args) {

            String name = stringInput("Please enter your name");
            String greeting = makeGreeting(name);
            // name is the argument ^^there, it's what will become "(String n)" below in the
            //other place where makeGreeting is.
            System.out.println(greeting);

        }    // This is the end of the main method.


        // A new method that we've created.
        // This method takes one argument, a String.
        // It will create a new String made from the word "Hello"
        // plus the String argument, plus an exclamation point !
        // It will then return that new greeting String.
        public static String makeGreeting(String n) {
            // first String is output type, (String n) is the input
            //when makeGreeting has a () down here it's called a parameter ^^^
            String greeting = "Hello " + n + "!";
            //this type (String) must match the type above
            return greeting;

        }    // The end of the makeGreeting method

    }   // End of the vid_2_java_methods class

//input/output:
//Please enter your name
//chris
//Hello chris!

****vid_3_more_methods_arguments_and_parameters****


/* ***Designing with methods:*** (slide 11)
Use methods to…
-Eliminate repetitive code (example: .toUpperCase())
-Organize program into sub-tasks (helps to organize info and when debugging)
-A method should have one specific task it does, at a certain level of detail
-You should be able to describe the purpose of your method in 1 or 2 sentences
-A method may call other methods

***Coding with methods*** (slide 12)
-Is easier to test
-Your lab code is in methods, so a test can check the method(s) you work on
-This principle applies to other projects too
-Is easier to understand
-Several small methods are easier to understand individually; than one giant block of code
-Is easier to maintain and debug
-Can focus on one, or just a few, methods - instead of the entire program

 */

//this program will convert miles to km
//Clara's code from https://github.com/claraj/Java2545Examples/blob/main/src/main/java/week3_methods/MilesToKm.java
//named in Clara's code: MilesToKM

package org.example.week3_methods_program_design;

import static input.InputUtils.doubleInput;

public class vid_3_more_methods_arguments_and_parameters {
    //This is the main method - the first code to run
    public static void main(String[] args) {

        double miles = doubleInput("Please enter number of miles:");
        double km = milesToKM(miles);
        //when you first type a method, it doesn't exist, so the type will be red, you can have
        //Intellij create the method for you, buy right-clicking and selecting that option (or shift-alt-enter <on a mac>)
        //then push "tab" and Intellij will suggest the type of parameter including the type
        System.out.println(miles + " miles is equal to " + km + " kilometers.");

    }    // This is the end of the main method.

    // This method takes one argument, a number of miles
    // It calculates the equivalent in kilometers, and returns that value
    public static double milesToKM(double miles) {
        //because the public static "double" part of this method doesn't say "void" it needs to return something

        double km = miles * 1.6;   // One mile is 1.6 kilometers
        //km warning
        return km;
        //input:output:
        //Please enter number of miles:
        //12
        //12.0 miles is equal to 19.200000000000003 kilometers.

        //alternate (replace double km = miles * 1.6;
        //        return km;)


        //return miles * 1.6;
        //will still work

        //make sure the types (int, double, etc.) match up

    }    // The end of the milesToKM method

}

**vid_3_count_program****
package org.example.week3_methods_program_design;

import static input.InputUtils.intInput;

//from Clara's code: https://github.com/claraj/Java2545Examples/blob/main/src/main/java/week3_methods/Counting.java
public class vid_3_count_program {
    //This is the main method - the first code to run
    public static void main(String[] args) {

        //print a list of numbers in order
        int smallNumber = intInput("Please enter a small integer number");
        int largeNumber = intInput("Please enter a large integer number");

        System.out.println("I will now count from " + smallNumber + " to " + largeNumber);

        //call the count function:
        count(smallNumber, largeNumber);

    }    // This is the end of the main method.


    // A new method that we've created called vid_3_count_program
    // This method takes two arguments, both integers,
    // representing a number to start counting from and a number to stop counting at
    // It will count from min to max, printing out each number.

    //use "void" as the return type when the method isn't going to return anything:
    public static void count(int min, int max) {

        for (int i = min ; i <= max ; i++) {
            System.out.println(i);
        }
        //input: output:
        //Please enter a small integer number
        //3
        //Please enter a large integer number
        //5
        //I will now count from 3 to 5
        //3
        //4
        //5

    }  // The end of the count method

}   // The end of the Counting class

***vid_4_methods_reusing_methods***
/*From Clara's code: https://github.com/claraj/Java2545Examples/blob/main/src/main/java/week3_methods/Squares.java

*/

package org.example.week3_methods_program_design;

import static input.InputUtils.doubleInput;

public class vid_4_methods_reusing_methods {
    public static void main(String[] args) {

        double number = doubleInput("Please enter a number and I'll square it");
        square(number);

    }    // This is the end of the main method.

    // This method takes one argument, a number
    // It calculates the square of that number (by multiplying it by itself)
    // and prints the number and its square value
    public static void square(double n) {

        double sq = n * n;   // The square of a number is that number multiplied by itself
        System.out.println("The square of " + n + " is " + sq);
        //input:output:
        // Please enter a number and I'll square it
        //2
        //The square of 2.0 is 4.0
    }    // The end of the squares method

} // End of the Squares class

***vid_4_square_another_way****
/*
Clara's code:https://github.com/claraj/Java2545Examples/blob/main/src/main/java/week3_methods/Squares2.java
 -this is the way the labs expect you to code: (no printing within methods, and only one task per method)
 */

package org.example.week3_methods_program_design;

import static input.InputUtils.doubleInput;

public class vid_4_square_another_way {
    public static void main(String[] args) {

        double number = doubleInput("Please enter a number and I'll square it");
        double squaredNumber = square(number);
        System.out.println("The square of " + number + " is " + squaredNumber);


    }    // This is the end of the main method.


    // This method takes one argument, a number
    // It calculates the square of that number (by multiplying it by itself)
    // and then returns the square value.
    public static double square(double n) {

        double sq = n * n;   // The square of a number is that number multiplied by itself
        return sq;
        //input:output:
        //Please enter a number and I'll square it
        //4
        //The square of 4.0 is 16.0

    }    // The end of the squares method
}

/*notes: printing things from methods isn't advised because the methods should only do one thing at a time.
-makes the method more reusable.
 */

 ***vid_4_squares_with_loop****

 /* From Clara's code: https://github.com/claraj/Java2545Examples/blob/main/src/main/java/week3_methods/Squares3.java
 */

 package org.example.week3_methods_program_design;

 public class vid_4_squares_with_loop {
     //This is the main method - the first code to run
     public static void main(String[] args) {

         System.out.println("Here are the squares of the numbers 1 to 10");

         for (int x = 1 ; x <= 10 ; x++ ) {
             double xSquared = square(x);
             System.out.println("The square of " + x + " is " + xSquared);
         }

     }    // This is the end of the main method.


     // This method takes one argument, a number
     // It calculates the square of that number (by multiplying it by itself)
     // and then returns the square value.
     public static double square(double n) {

         double sq = n * n;   // The square of a number is that number multiplied by itself
         return sq;

     }    // The end of the squares method
 }

*****vid_4_your_turn_MPG_calculator*****
/*Write a program to calculate the MPG for a car journey.
(MPG = Miles per gallon, calculate by dividing number of miles by number of gallons of gas used)
Write a method that has two parameters:
a number of miles driven, and
a number of gallons of gas used on a car journey
Your method should calculate and return the MPG for the car journey
Your main method should
Ask the user for the miles and gas used
Call your method
Use the returned data to display the MPG
 */

package org.example.week3_methods_program_design;

import static input.InputUtils.doubleInput;

public class vid_4_your_turn_MPG_calculator {
    public static void main(String[] args) {
        //the main method is used to interact with the user

        double milesDriven = doubleInput("How many miles have you driven on your trip?");
        double gallonsGasConsumed = doubleInput("How many gallons of gas has your car used so far?");
        double MPG =  milesPerGallon(milesDriven, gallonsGasConsumed);
        //milesDriven will correspond to miles below, gallonsGasConsumed will correspond to gallons below:
        System.out.println("Your car's MPG rating for your trip so far is " + MPG + " miles per gallon.");

    }

    public static double milesPerGallon(double miles, double gallons) {
        //this part does the "work" of the method using the user input data
        //miles per gallon can be found by dividing miles by gallons:
        double MPG =  miles / gallons;
        return MPG;
    }
    //input:output:
    //How many miles have you driven on your trip?
    //34
    //How many gallons of gas has your car used so far?
    //2
    //Your car's MPG rating for your trip so far is 17.0 miles per gallon.
}

*****vid_5_scope_and_your_turn_credits_to_graduate

/*Scope of a variable:
-Where does the variable exist??
-It only exists within each part.
--anything you declare in main only exists there
--anything you declare in the other methods only exist there, but you can send them to main using parameters
 */

/*Your Turn: (slide 19)
Re-write the Python program at the start of class in Java
In the main method, ask the user how many credits they have earned
Ask the user how many credits their program needs
Write a method called howManyCreditsToGraduate that takes two parameters - credits earned and credits needed
howManyCreditsToGraduate should calculate the number of credits needed and return it
The main method should print a message with the number of credits needed to graduate

 */

package org.example.week3_methods_program_design;

import static input.InputUtils.intInput;

public class vid_5_scope_and_your_turn_credits_to_graduate {
    public static void main(String[] args) {

    int selfReportedCreditsEarned = intInput ("How many credits have you earned");
    int selfReportedCreditsNeeded = intInput("How many credits do you need to graduate from your program?");
    int creditsYetToTake = howManyCreditsToGraduate(selfReportedCreditsEarned, selfReportedCreditsNeeded);
        System.out.println("You still need " + creditsYetToTake + " credits to finish your program.");
    }
public static int howManyCreditsToGraduate (int studentCreditsEarned, int studentCreditsNeeded){
    int creditsNeededToGraduate = studentCreditsNeeded - studentCreditsEarned;
    return creditsNeededToGraduate;
    //input:output:
    //How many credits have you earned
    //45
    //How many credits do you need to graduate from your program?
    //60
    //You still need 15 credits to finish your program.

}
}

***vid_6_methods_reducing_repetition_with_methods
/*Reducing repetition with methods (slide 26)
-It's common to do the same task (or a very similar task) more than once
-To save re-writing code over and over, we can put this code in a method
-If it's a task that's the same process, but uses different values of variables, then these variables can be arguments to the method

 */
//example code below from Clara's code: https://github.com/claraj/Java2545Examples/blob/main/src/main/java/week3_methods/Lemonade.java
//can methods be used to improve the program? Hint: what if the lemonade stand sells another product?


//initial Lemonade program: (works, but complex)
//***What if the lemonade stand sells things besides lemonade? How to make this scalable?
//package org.example.week3_methods_program_design;
//
//import static input.InputUtils.doubleInput;
//import static input.InputUtils.intInput;
//
//public class vid_6_methods_reducing_repetition_with_methods {
//    public static void main(String[] args) {
//
//        // Calculate operating cost and profit for a lemonade stand.
//        // The lemonade stand sells lemonade, and cookies too.
//
//        // To calculate profit, need to know how much was spent on lemonade supplies, what one cup of
//        // lemonade sold for, and the number of cups sold.
//        System.out.println("How much did you spend on lemonade supplies?");
//        double lemonadeSuppliesCost = doubleInput();
//        System.out.println("What did you sell one cup of lemonade for?");
//        double lemonadeSalePrice = doubleInput();
//        System.out.println("How many cups of lemonade did you sell");
//        int lemonadeCupsSold = intInput();
//
//        // Calculate profit
//
//        double lemonadeProfit = ( lemonadeCupsSold * lemonadeSalePrice ) - lemonadeSuppliesCost;
//
//        System.out.println("Lemonade profit = $" + lemonadeProfit);
//
//        // Do same calculation for cookies
//
//        // To calculate profit, need to know how much was spent on cookie supplies, what one cookie
//        // sold for, and the number of cookies sold.
//        System.out.println("How much did you spend on cookie supplies?");
//        double cookieSuppliesCost = doubleInput();
//        System.out.println("What did you sell one cookie for?");
//        double cookieSalePrice = doubleInput();
//        System.out.println("How many cookies did you sell?");
//        int cookiesSold = intInput();
//
//        // Calculate profit
//        double cookieProfit = ( cookiesSold * cookieSalePrice ) - cookieSuppliesCost;
//
//        System.out.println("Cookie profit = $" + cookieProfit);
//
//    }
//}

//rework the above method to use another method to return computations from any item, not specific items:

package org.example.week3_methods_program_design;

import static input.InputUtils.doubleInput;
import static input.InputUtils.intInput;

public class vid_6_methods_reducing_repetition_with_methods {
    public static void main(String[] args) {

        // Calculate operating cost and profit for a lemonade stand.
        // The lemonade stand sells lemonade, and cookies too.

        // To calculate profit, need to know how much was spent on lemonade supplies, what one cup of
        // lemonade sold for, and the number of cups sold.

        // Calculate profit

        double lemonadeProfit = calculateProfitForProduct("lemonade");
        System.out.println("Lemonade profit = $" + lemonadeProfit);

        // Do same calculation for cookies

        // To calculate profit, need to know how much was spent on cookie supplies, what one cookie
        // sold for, and the number of cookies sold.
        double cookieProfit = calculateProfitForProduct("cookie");
        System.out.println("Cookie profit = $" + cookieProfit);

    }
    //what input does a new method (that could utilize any product kind) need?
    public static double calculateProfitForProduct (String productName) {
        //copied from above to attempt to simplify it:
        System.out.println("How much did you spend on " + productName + " supplies?");
        double suppliesCost = doubleInput();
        System.out.println("What did you sell one " + productName + " for?");
        double salePrice = doubleInput();
        System.out.println("How many " + productName + "s did you sell?");
        int numberSold = intInput();

        // Calculate profit
        double profit = ( numberSold * salePrice ) - suppliesCost;
        return profit;
        //input:output:
        //How much did you spend on lemonade supplies?
        //23
        //What did you sell one lemonade for?
        //3
        //How many lemonades did you sell?
        //45
        //Lemonade profit = $112.0
        //How much did you spend on cookie supplies?
        //23
        //What did you sell one cookie for?
        //2
        //How many cookies did you sell?
        //34
        //Cookie profit = $45.0

    }
}

*****vid_6_profit_calc_even_simpler

package org.example.week3_methods_program_design;

import static input.InputUtils.doubleInput;
import static input.InputUtils.intInput;

public class vid_6_profit_calc_even_simpler {
    public static void main(String[] args) {

        // Calculate operating cost and profit for a lemonade stand.
        // The lemonade stand sells lemonade, and cookies too.

        // To calculate profit, need to know how much was spent on lemonade supplies, what one cup of
        // lemonade sold for, and the number of cups sold.

        // Calculate profit

        double lemonadeProfit = calculateProfitForProductEvenSimpler("lemonade");
        System.out.println("Lemonade profit = $" + lemonadeProfit);

        // Do same calculation for cookies

        // To calculate profit, need to know how much was spent on cookie supplies, what one cookie
        // sold for, and the number of cookies sold.
        double cookieProfit = calculateProfitForProductEvenSimpler("cookie");
        System.out.println("Cookie profit = $" + cookieProfit);

        //calculate the same for coffee:
        double coffeeProfit = calculateProfitForProductEvenSimpler("coffee");
        System.out.println("Coffee profit = $" + coffeeProfit);

    }

    //another way to write the computation part of the method in shorter form:
    public static double calculateProfitForProductEvenSimpler(String productName) {
        //copied from above to attempt to simplify it:
        double suppliesCost = doubleInput("How much did you spend on " + productName + " supplies?");
        double salePrice = doubleInput("What did you sell one " + productName + " for?");
        int numberSold = intInput("How many " + productName + "s did you sell?");

        // Calculate profit
        double profit = (numberSold * salePrice) - suppliesCost;
        return profit;
        //input:output:
        // How much did you spend on lemonade supplies?
        //23
        //What did you sell one lemonade for?
        //4
        //How many lemonades did you sell?
        //45
        //Lemonade profit = $157.0
        //How much did you spend on cookie supplies?
        //12
        //What did you sell one cookie for?
        //3
        //How many cookies did you sell?
        //23
        //Cookie profit = $57.0
        // How much did you spend on coffee supplies?
        //9
        //What did you sell one coffee for?
        //2
        //How many coffees did you sell?
        //34
        //Coffee profit = $59.0

    }
}

**** vid_6_methods_running_schedule_revisit

/*Your Turn:
Start with the running schedule program you wrote at the start of the class
What if your friend wants to increase their distance by 5% every week? or 10% every week?
How does that affect the number of weeks needed?
Can you extract the weekly schedule part of the code into a method?
Use your method to calculate and display the schedules and total weeks for 1% , 5% and 10%

 //also this is NOT finished, but will be a question on the labs:
 */

package org.example.week3_methods_program_design;

public class vid_6_methods_running_schedule_revisit {
    public static void main(String[] args) {

//        my attempt: (wrong)
//        String[] distancePerWeek = {};
//        for (double runningDistance = 1.0, runningDistance <=26.2, runningDistance = runningDistance * (1.10));
//        {
//            System.out.println(distancePerWeek[runningDistance]);

        //Clara's work:
        //store data in variables, so we don't forget what the numbers are:
        double currentDistance = 1; //starting point before loop
        double targetDistance = 26.2; //max miles they want to run
        double percentIncrease = 1.10; //(increase by 10%)

        runningSchedule(currentDistance, targetDistance, percentIncrease);
    }
        public static void runningSchedule(double currentDistance, double targetDistance, double percentIncrease){

        int week = 1; //start weeks at the first week

        //loop will count the number of weeks and will do math until the marathon distance is met:
        //when talking about the problem, while or until words mean a while loop:
        while (currentDistance < targetDistance) {
            System.out.println(week + " " + currentDistance);
            currentDistance = currentDistance * percentIncrease;
            week++; //count number of weeks (alternate: week = week + 1)
        }
        System.out.println(week + " " + currentDistance);
    }
}

****
