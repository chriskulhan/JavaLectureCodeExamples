****vid_1_data_structures_hashmaps

/*
HashMap - a map type: (slide 2)

-Like Python's dictionary, C#'s Hashtable, or JavaScript's object
-Stores key-value pairs. A key is mapped to its value
-Keys are unique in a HashMap
-Can add a key-value pair
-Can look up a value for a key  (and it's fast)
-Can replace the value for a key
-Can delete a key-value pair
-Can loop over all the keys (or over the values, or both)

 */

package org.example.week_5_hashmaps;

import java.util.HashMap;

public class vid_1_data_structures_hashmaps {
    public static void main(String[] args) {
        //create a hashmap that will store State names with 2 letter abbreviations for the states (key-value pair)
        HashMap<String, String > stateAbreviations = new HashMap<>();
        //first 'String' is the key, second 'String' is the value

        //add things using the (.put method:)
        stateAbreviations.put("Minnesota", "MN");
        stateAbreviations.put("Wisconsin", "WI");
        stateAbreviations.put("Michigan", "MI");
        stateAbreviations.put("Iowa", "IA");

        System.out.println(stateAbreviations);
        //output: {Minnesota=MN, Wisconsin=WI, Michigan=MI}
        //output after adding IOWA:IA {Iowa=IA, Minnesota=MN, Wisconsin=WI, Michigan=MI}

        //read data: (.get method)
        System.out.println(stateAbreviations.get("Minnesota"));
        //output MN

        //if you try to grab a state (Iowa) that's not in the hashmap:
        //can be used to determine if a key is in your hashmap:
        System.out.println(stateAbreviations.get("Iowa"));
        //output: null (before I added that data)
        //output: IA (after stateAbreviations.put("Iowa", "IA"); was added above)

        //retrieve information from a hashmap and put it into a variable:
        String wisconsinAbbreviation = stateAbreviations.get("Wisconsin");
        System.out.println(wisconsinAbbreviation);
        //output: WI

        //be careful to use the exact key as it's typed (so here lower case wisconsin will return null:
        String wisconsinAbbreviationAgain = stateAbreviations.get("wisconsin");
        System.out.println(wisconsinAbbreviationAgain);
        //output:null

//hashmaps don't rely on the order the things are added.
        //if you need the order you can use TreeMap (https://docs.oracle.com/javase/8/docs/api/java/util/TreeMap.html)
            //--for TreeMaps: strings will be sorted in "natural order" or alphabetical order and numbers will be sorted
        //      from smallest to largest
    }
}

***vid_2_snowfall_from_slides***
package org.example.week_5_hashmaps;

import java.util.HashMap;
import java.util.Map;

import static input.InputUtils.*;

public class vid_2_snowfall_from_slides {
    public static void main(String[] args) {

        Map<String, Double> snowfall = new HashMap<>();

        //add things to hashmaps with: '.put'
        snowfall.put("January", 3.1);   // Add key = January with value = 31.
        snowfall.put("February", 10.8);   // Add key = February with value = 10.8
        snowfall.put("December", 3.1); //add key = December with value = 3.1
        snowfall.put("March", 4.1);
        snowfall.put("April", 0.0);

        System.out.println(snowfall);

        snowfall.put("January", 4.6);  // Update January snow

        System.out.println(snowfall);

        double janSnowfall = snowfall.get("January");   // Get value for the key "January"

        System.out.println("In January, " + janSnowfall + " inches of snow fell");

        for(String month: snowfall.keySet()) {
            double snow = snowfall.get(month);
            System.out.println("The snow in " + month + " was " + snow);
        }

        double total = 0;

        for (Double snow: snowfall.values()) {
            total += snow;
        }

        System.out.println("Total snowfall is " + total + " inches.");
        String newMonth = stringInput ("Enter Month:");
        double newSnow = positiveDoubleInput ("Enter snow for " + newMonth);

        boolean overwrite = true;

        if (snowfall.containsKey(newMonth)) {
            double snow = snowfall.get(newMonth);
            System.out.println( newMonth + " is already in the Hashmap");
            System.out.println("Snowfall for " + newMonth + "was " + snow + " inches.");
            overwrite = yesNoInput("Do you want to overwrite the old data?");
        }
        if (overwrite) {
            snowfall.put(newMonth, newSnow);
        } else {
            System.out.println("Hashmap was not modified");
        }

    } //end of psvm

} //end of main

****vid_2_hashmap_example_snowfall****

//from Clara's code: https://github.com/claraj/Java2545Examples/blob/main/src/main/java/week5_map_data_structure/HashMapSnow.java

/* your turn:

Add this data to the snowfall HashMap
March, 4.1 inches
April, 0 inches
Print out all the data - months and amounts, one entry per line
Is it in order? Is that OK?
Challenge: add up all the snowfall amounts and display the total
Challenge 2: Ask user for a month, and snowfall amount, and add this data to HashMap
Challenge 3: Check if month is already in HashMap before adding data warn user that they
will overwrite data and ask if they want to procced
 */

package org.example.week_5_hashmaps;

import java.util.HashMap;
import java.util.Map;

import static input.InputUtils.*;

public class vid_2_hashmap_example_snowfall {


    public static void main(String[] args) {

        //Use generic types in HashMaps too
        //You need to specify the type of the Keys, and the type of the Values
        //Specify in pointy brackets: < TypeOfKey, TypeOfValues>
        //In this example, all the keys must be Strings and all the values must be Doubles (or doubles)

        // Create HashMap for String keys, and Double values
        Map<String, Double> snowfall = new HashMap<>();

        //add things to hashmaps with: '.put'
        snowfall.put("January", 3.1);   // Add key = January with value = 31.
        snowfall.put("February", 10.8);   // Add key = February with value = 10.8
        snowfall.put("December", 3.1); //add key = December with value = 3.1

//Add this data to the snowfall HashMap:
//March, 4.1 inches
//April, 0 inches
        snowfall.put("March", 4.1);
        snowfall.put("April", 0.0);

        System.out.println(snowfall);
        // output: {December=3.1, March=4.1, January=3.1, February=10.8, April=0.0}

        snowfall.put("January", 4.6);  // Update January snow

        System.out.println(snowfall);
        // output: {December=3.1, March=4.1, January=4.6, February=10.8, April=0.0}   Old value was overwritten

        double janSnowfall = snowfall.get("January");   // Get value for the key "January"

        System.out.println("In January, " + janSnowfall + " inches of snow fell");
        //output: In January, 4.6 inches of snow fell

//Print out all the data - months and amounts, one entry per line
//Is it in order? Is that OK?

        //wrong:
//        for (int x = 1 ; x <= 10 ; x++ ) {
//            System.out.println(snowfall(x));
//        }
        for(String month: snowfall.keySet()) {
            double snow = snowfall.get(month);
            System.out.println("The snow in " + month + " was " + snow);
        }
        //output:
        // The snow in December was 3.1
        //The snow in March was 4.1
        //The snow in January was 4.6
        //The snow in February was 10.8
        //The snow in April was 0.0

//Challenge: add up all the snowfall amounts and display the total
        // Calculate total snow by adding all the values
        double total = 0;

        // Loop over all the values in the HashMap
        for (Double snow: snowfall.values()) {
            total += snow;
        }

        System.out.println("Total snowfall is " + total + " inches.");
        //output: Total snowfall is 22.6 inches.

//Challenge 2: Ask user for a month, and snowfall amount, and add this data to HashMap
        //Clara's solution:

        String newMonth = stringInput("Enter month: ");
        double newSnow = positiveDoubleInput("Enter new snowfall data to be added for " + newMonth);
        System.out.println(snowfall);

        //here is where the "overwrite" variable begins and starts out as true so everything runs smoothly
        boolean overwrite = true;

        if (snowfall.containsKey(newMonth)) {
            //ask if should overwrite (will happen way below), first this:

            double snow = snowfall.get(newMonth);
            System.out.println( newMonth + " is already in the HashMap");
            System.out.println("The snowfall for " + newMonth + " was " + snow + " inches.");
            //output: The snowfall for January was 4.6 inches.

            //format string:
            System.out.printf("The snowfall for %s was %.1f inches\n", newMonth, snow);
            //output: The snowfall for January was 4.6 inches.

            //ask if you want to overwrite the old data, using the boolean variable created above "overwrite"
            overwrite = yesNoInput("Do you want to overwrite the old data?");
        }

        //take the yesNoInput response from just above "overwrite" and make decisions based on the response:
        if (overwrite) {
            //if you do want overwrite, add the data:
            snowfall.put(newMonth, newSnow);
            System.out.println(snowfall);
        } else {
            System.out.println("HashMap was not modified.");
        }
        //{December=3.1, March=4.1, January=3.1, February=10.8, April=0.0}
        //{December=3.1, March=4.1, January=4.6, February=10.8, April=0.0}
        //In January, 4.6 inches of snow fell
        //The snow in December was 3.1
        //The snow in March was 4.1
        //The snow in January was 4.6
        //The snow in February was 10.8
        //The snow in April was 0.0
        //Total snowfall is 22.6 inches.
        //Enter month:
        //March
        //Enter new snowfall data to be added for March
        //100
        //{December=3.1, March=4.1, January=4.6, February=10.8, April=0.0}
        //March is already in the HashMap
        //The snowfall for March was 4.1 inches.
        //The snowfall for March was 4.1 inches
        //Do you want to overwrite the old data? Y/N?
        //y
        //{December=3.1, March=100.0, January=4.6, February=10.8, April=0.0}
//
    } //end of psvm

}//end of main method

***vid_2_snowfall_hashmap_third_way_to_solve***
package org.example.week_5_hashmaps;

import java.util.HashMap;
import java.util.Map;

import static input.InputUtils.*;

public class vid_2_snowfall_hashmap_third_way_to_solve {
    public static void main(String[] args) {

        Map<String, Double> snowfall = new HashMap<>();

        //add things to hashmaps with: '.put'
        snowfall.put("January", 3.1);   // Add key = January with value = 31.
        snowfall.put("February", 10.8);   // Add key = February with value = 10.8
        snowfall.put("December", 3.1); //add key = December with value = 3.1
        snowfall.put("March", 4.1);
        snowfall.put("April", 0.0);

        System.out.println(snowfall);

        snowfall.put("January", 4.6);  // Update January snow

        System.out.println(snowfall);

        double janSnowfall = snowfall.get("January");   // Get value for the key "January"

        System.out.println("In January, " + janSnowfall + " inches of snow fell");

        for (String month : snowfall.keySet()) {
            double snow = snowfall.get(month);
            System.out.println("The snow in " + month + " was " + snow);
        }

        //*****************
        //set this double to loop the total onto
        double total = 0;

        //for double snow in snowfall values
        for (Double snow : snowfall.values()) {
            //add each snowfall amount in turn to the above variable 'total'^^
            total += snow;
        }

        System.out.println("Total snowfall is " + total + " inches.");

        //*****************

        String newMonth = stringInput("Enter Month:");
        double newSnow = positiveDoubleInput("Enter snow for " + newMonth);

        if (snowfall.containsKey("July")) {
            System.out.println("There was snow in July!");
        } else {
            System.out.println("There was no snow in July.");
        }

//        boolean overwrite = true;

        //double (lowercase) is a primitive type and *has* to be a number and MUST have a number
        //primitive types aren't allowed to be null.

        //Double (uppercase) is the *object* type:
        Double snow = snowfall.get(newMonth);

        //if the data is not in the hashmap
        if (snow != null) {
            //ask if should overwrite?

            System.out.println("Snowfall for " + newMonth + "was " + snow + " inches.");
            boolean overwrite = yesNoInput("Do you want to overwrite the old data?");

            if (overwrite) {
                snowfall.put(newMonth, newSnow);
            } else {
                System.out.println("Hashmap was not modified");
            }
        } else {
            snowfall.put(newMonth, newSnow);
        }
    }//end of psvm

//alternative block of code: (rearranged from just above where you ask if the snow is not there, then add it first)
        //is snow NOT there?
//        if (snow == null) {
//            snowfall.put(newMonth, newSnow);
//        } else {
//            System.out.println("Snowfall for " + newMonth + "was " + snow + " inches.");
//            boolean overwrite = yesNoInput("Do you want to overwrite the old data?");
//
//            if (overwrite) {
//                snowfall.put(newMonth, newSnow);
//            } else {
//                System.out.println("Hashmap was not modified");
//            }
//        }

} //end of main


***vid_3_looping_over_hashmaps_snowfall_should_be_before_vid_2

/*
Hashmap syntax (slide 3)

Create a Map
Specify the types of the keys and values in <> angle brackets
new HashMap<>()

Map<String, Integer> quantitiesOfProducts = new Hashmap<>();

Like Lists, there are other types of Maps, including HashTable (synchronized) and TreeMap (keeps keys in sorted order)
https://docs.oracle.com/en/java/javase/12/docs/api/java.base/java/util/Map.html

 */

package org.example.week_5_hashmaps;

import java.util.HashMap;
import java.util.Map;

public class vid_3_looping_over_hashmaps_snowfall_should_be_before_vid_2 {
    public static void main(String[] args) {
        Map<String, Double> snowfall = new HashMap<>();
        snowfall.put("January", 3.1);
        snowfall.put("February", 10.8);

        System.out.println(snowfall);
        //output: {January=3.1, February=10.8}
        //coincidence that they are in order, the order is not guaranteed with Hashmaps

//add another February snowfall amount:
        //what will happen?
        snowfall.put("February", 12.4);
        System.out.println(snowfall);
        //output: {January=3.1, February=12.4}
        // overwritten ^^!!

//use the get method to fetch data:
        System.out.println("The snowfall in January is " + snowfall.get("January") + " inches.");
        //output: The snowfall in January is 3.1 inches.

//Try to get data from the hashmap that doesn't exist:
        System.out.println("The snowfall in July is " + snowfall.get("July") + " inches.");
        //output: The snowfall in July is null inches.

//Check to see if data is in a hashmap:
        if (snowfall.containsKey("July")) {
            System.out.println("There was snow in July!");
        } else {
            System.out.println("There was no snow listed in July.");
            //output: There was no snow listed in July.
        }

//there can be more than one value that is the same, but the keys MUST be unique.

    }
}

***vid_3_loops_and_switch_key_and_value_state_abbreviations

package org.example.week_5_hashmaps;

import java.util.HashMap;
import java.util.Map;

public class vid_3_loops_and_switch_key_and_value_state_abbreviations {
    public static void main(String[] args) {
//create a hashmap that will store State names with 2 letter abbreviations for the states (key-value pair)
//could use 'Map' instead of 'Hashmap' just below vv Both are okay
        HashMap<String, String > stateAbbreviations = new HashMap<>();
        //first 'String' is the key, second 'String' is the value

//add things using the (.put method:)
        stateAbbreviations.put("Minnesota", "MN");
        stateAbbreviations.put("Wisconsin", "WI");
        stateAbbreviations.put("Michigan", "MI");
        stateAbbreviations.put("Iowa", "IA");

        System.out.println(stateAbbreviations);
        //output: {Minnesota=MN, Wisconsin=WI, Michigan=MI}
        //output after adding IOWA:IA {Iowa=IA, Minnesota=MN, Wisconsin=WI, Michigan=MI}

//read data: (.get method)
        System.out.println(stateAbbreviations.get("Minnesota"));
        //output MN

//checking for values in a hashmap: **in this example, want to look up the abbreviations for states:
        //One way: write a loop and look at every value to see if the value is present

        for (String stateName: stateAbbreviations.keySet()) {
            System.out.println(stateName);

            //look up the value:
            System.out.println(stateAbbreviations.get(stateName));

            //output:
            //Iowa
            //IA
            //Minnesota
            //MN
            //Wisconsin
            //WI
            //Michigan
            //MI
        }

//loop over the values:
        for (String abbreviation: stateAbbreviations.values()) {
            System.out.println(abbreviation);

            //output:
            //MI
            //IA
            //MN
            //WI
            //MI
        }

//loop over the key-value pairs until a value is found:

        String searchAbbreviation = "MI";

        for (String stateName: stateAbbreviations.keySet()) { //same loop as a few above^^^
            System.out.println(stateName);
            //output:
            //Iowa
            //Minnesota
            //Wisconsin
            //Michigan

                //look up the value:
                String anotherAbbreviation = stateAbbreviations.get(stateName);
                if (anotherAbbreviation.equals(searchAbbreviation)) {
                    System.out.println("Found it! The state for " + searchAbbreviation + " is " + stateName);
                    //output: Found it! The state for MI is Michigan

            }

//Another way: make a new hashmap where the keys and values are switched. (every key is the value,
//  every value is the key. So: MN would be the key, and Minnesota would be the value. Currently,
// Minnesota is the key, MN is the value

    //Make a new hashmap that loops over the keys AND values:

            Map<String, String> abbreviationsStateNames = new HashMap<>();

            //want to use the above new Hashmap (abbreviationsStateNames) and put the data in it from
            // stateAbbreviations listed above:

    //how to loop over the key-value pairs (called 'entry' in hashmap terms:)
            for (Map.Entry<String, String> entry: stateAbbreviations.entrySet()) {
                //
                String state = entry.getKey();
                String abbreviation = entry.getValue();

                //add the 'state' and 'abbreviation' just above ^^ to abbreviationStateNames Hashmap:
                //key is abbreviation, value is state.
                abbreviationsStateNames.put(abbreviation, state);
            }
            System.out.println(stateAbbreviations);
            //output: {Iowa=IA, Minnesota=MN, Wisconsin=WI, Michigan=MI}

            System.out.println(abbreviationsStateNames);
            //output: {MN=Minnesota, WI=Wisconsin, IA=Iowa, MI=Michigan}
        }

    } //end of psvm
} //end of main


***vid_4_your_turn_more_loops_test_if_data_is_in_hashmap
/*
your turn:

-Create a new Hashmap of class codes, and class names that you are taking this semester
-examples: 2545 and Java
1425 and Data Communications
2560 and Web Client Server

-What types of data will the keys and values be?

Write a loop that prints all the class codes and names in the form: "ITEC 2545 Java"

Print the number of classes you are taking (size of the hashmap)

Add this variable:
int searchCode = 2417; //Android Programming

-Can you write an if statement to check if this code is in the Hashmap and print the class name if so?

Add this variable:
int searchCode2 = 2545;

 */

package org.example.week_5_hashmaps;

import java.util.HashMap;
import java.util.Map;

public class vid_4_your_turn_more_loops_test_if_data_is_in_hashmap {
    public static void main(String[] args) {

        Map<Integer, String > classCodesNames = new HashMap<>();

        classCodesNames.put(2545, "Java Programming");
        classCodesNames.put(1425, "Data Communications");
        classCodesNames.put(2560, "Web Client Server");
//        classCodesNames.put(2417, "Android");

        System.out.println(classCodesNames);
        //output :{2560=Web Client Server, 2545=Java Programming, 1425=Data Communications}


//Write a loop that prints all the class codes and names in the form: "ITEC 2545 Java"
     //from my notes: vid_2_hashmap_example_snowfall
        //Map<String, Double> snowfall = new HashMap<>();
        //snowfall.put("March", 4.1); // plus more data, etc.
        // for(String month: snowfall.keySet()) {
        //            double snow = snowfall.get(month);
        //            System.out.println("The snow in " + month + " was " + snow);
        //        }

        for(Integer classCode: classCodesNames.keySet()) {
            String className = classCodesNames.get(classCode);
            System.out.println("ITEC " + classCode + " " + className);
            //output: (not in order, but not a big deal)
            //ITEC 2560 Web Client Server
            //ITEC 2545 Java Programming
            //ITEC 1425 Data Communications

        }

//Print the number of classes you are taking (size of the hashmap)
        System.out.println("There are " + classCodesNames.size() + " classes listed in this hashmap.");
        //output: There are 3 classes listed in this hashmap.
        int numberOfClasses = classCodesNames.size();

        System.out.println("******"); //to see where in the code I am
        System.out.println(numberOfClasses);
        //output: 3

//Add this variable:
        int searchCode = 2417;

//Can you write an if statement to check if this code is in the Hashmap and print the class name if so?
        //from my notes:  (vid_2_hashmap_example_snowfall)
        //        if (snowfall.containsKey(newMonth)) {
        //            //ask if should overwrite (will happen way below), first this:
        //
        //            double snow = snowfall.get(newMonth);
        //            System.out.println( newMonth + " is already in the HashMap");
        //            System.out.println("The snowfall for " + newMonth + " was " + snow + " inches.");
        //            //output: The snowfall for January was 4.6 inches.
        //
        //            //format string:
        //            System.out.printf("The snowfall for %s was %.1f inches\n", newMonth, snow);
        if (classCodesNames.containsKey(searchCode)) {
            String nameOfSearchedForClass = classCodesNames.get(searchCode);
            System.out.println("The class name for the code you searched for is: " + nameOfSearchedForClass);
        } else {
            System.out.println("The class code you searched for isn't listed.");
            //output: The class code you searched for isn't listed.
        }

        System.out.println( " * * * * ");

        //alternative solution for above: (from this video (4))
        if (classCodesNames.containsKey(searchCode)) {
            System.out.println("This class is found in the HashMap. The class name is " +
                    classCodesNames.get(searchCode));
        } else {
            System.out.println(searchCode + " not found. ");
        }
        //output: 2417 not found.

        //added: classCodesNames.put(2417, "Android"); at the top to test, works.
        //output: This class is found in the HashMap. The class name is Android

        //Add this variable:
        int searchCode2 = 2545;

        if (classCodesNames.containsKey(searchCode2)) {
            String nameOfSearchedForClass = classCodesNames.get(searchCode2);
            System.out.println("The class name for the code you searched for is " + nameOfSearchedForClass);
        } else {
            System.out.println("The class code you searched for isn't listed.");
            //output: The class name for the code you searched for is Java Programming
        }

        System.out.println("*#*#*#*");
        //alternative to above code: //if not present, will return null:
        String exampleClassName = classCodesNames.get(searchCode2);
        if (exampleClassName == null) {
            System.out.println(searchCode2 + " not found ");
        } else {
            System.out.println("This class is found in the Hashmap. The class name is " + exampleClassName);
        }
        //output: This class is found in the Hashmap. The class name is Java Programming

        //test by commenting out Java WAY above at the top, then output is:
        //output: 2545 not found

    }
}


****vid_5_your_turn_road_trip_part_1_planner
/* (PowerPoint slides 13-14, week 5)
-Create a HashMap of distances from Minneapolis to other cities in Minnesota
    The HashMap will have
    String keys (for names of cities)
    Integer values (driving miles to that city from Minneapolis)

-Add this example data
    Distance to Duluth = 154 miles
    Distance to Brainerd = 127 miles
    Distance to Stillwater = 26 miles
    Distance to Ely = 245 miles
    Distance to Red Wing = 54 miles

-Ask the user for the maximum distance they want to drive
    Use a loop to search your HashMap and print all the cities that are within the user's driving range
    Example: user will drive a maximum of 60 miles, print Stillwater and Red Wing
    Example: user will drive a maximum of 200 miles, print Duluth, Brainerd, Stillwater, Red Wing

 */
package org.example.week_5_hashmaps;

import java.util.HashMap;
import java.util.Map;

import static input.InputUtils.positiveIntInput;

public class vid_5_your_turn_road_trip_part_1_planner {
    public static void main(String[] args) {
        Map< String, Integer > citiesAndDistancesFromMpls = new HashMap<>();

        citiesAndDistancesFromMpls.put("Duluth", 154);
        citiesAndDistancesFromMpls.put("Brainerd", 127);
        citiesAndDistancesFromMpls.put("Stillwater", 26);
        citiesAndDistancesFromMpls.put("Ely", 245);
        citiesAndDistancesFromMpls.put("Red Wing", 54);

        System.out.println(citiesAndDistancesFromMpls);
        //output: {Duluth=154, Ely=245, Brainerd=127, Stillwater=26, Red Wing=54}

        int maximumDistanceYouWantToDrive = positiveIntInput("Enter the maximum distance you want to " +
                "drive on your road trip:");

//        System.out.println(maximumDistanceYouWantToDrive); //check

        //from video 5 Clara's solution:
        for (String city : citiesAndDistancesFromMpls.keySet()){
            int distance = citiesAndDistancesFromMpls.get(city);
            if (distance <= maximumDistanceYouWantToDrive) {
                System.out.println(city + " is " + distance + " miles away.");
                //output:
                //Enter the maximum distance you want to drive on your road trip:
                //67
                //Stillwater is 26 miles away.
                //Red Wing is 54 miles away.

                //another output:
                //Enter the maximum distance you want to drive on your road trip:
                //300
                //Duluth is 154 miles away.
                //Ely is 245 miles away.
                //Brainerd is 127 miles away.
                //Stillwater is 26 miles away.
                //Red Wing is 54 miles away.

            }
        }

    } //end of psvm

}//end of main method

***vid_5_your_turn_road_trip_part_2_with_list

package org.example.week_5_hashmaps;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import static input.InputUtils.positiveIntInput;

public class vid_5_your_turn_road_trip_part_2_with_list {
    public static void main(String[] args) {
        Map< String, Integer > citiesAndDistancesFromMpls = new HashMap<>();

        citiesAndDistancesFromMpls.put("Duluth", 154);
        citiesAndDistancesFromMpls.put("Brainerd", 127);
        citiesAndDistancesFromMpls.put("Stillwater", 26);
        citiesAndDistancesFromMpls.put("Ely", 245);
        citiesAndDistancesFromMpls.put("Red Wing", 54);

        System.out.println(citiesAndDistancesFromMpls);
        //output: {Duluth=154, Ely=245, Brainerd=127, Stillwater=26, Red Wing=54}

        int maximumDistanceYouWantToDrive = positiveIntInput("Enter the maximum distance you want to " +
                "drive on your road trip:");

//        System.out.println(maximumDistanceYouWantToDrive); //check

        //from video 5 Clara's solution:
        //to have a response if the distance the user wants to drive is less than the distance
        //the cities are from Minneapolis:
        List<String> citiesInRange = new ArrayList<>();


        for (String city : citiesAndDistancesFromMpls.keySet()){
            int distance = citiesAndDistancesFromMpls.get(city);
            if (distance <= maximumDistanceYouWantToDrive) {
                System.out.println(city + " is " + distance + " miles away.");
                // add citiesInRange from just above ^^ to add all the cities in range to a list:
                //(collect all the cities as the loop runs here: )
                citiesInRange.add(city);
            }
        }
        //at the end of the above loop, do another loop:
        //were there any cities within range?
        if (citiesInRange.isEmpty()) {
            System.out.println("There were no Minnesota cities listed in your given distance range");
        } else {
//            System.out.println(citiesInRange);
//        }
            //input/output:
            //Enter the maximum distance you want to drive on your road trip:
            //500
            //Duluth is 154 miles away.
            //Ely is 245 miles away.
            //Brainerd is 127 miles away.
            //Stillwater is 26 miles away.
            //Red Wing is 54 miles away.
            //[Duluth, Ely, Brainerd, Stillwater, Red Wing]

            // input/output:
            //10
            //There were no Minnesota cities listed in your given distance range

            //input/output:
            //Enter the maximum distance you want to drive on your road trip:
            //45
            //Stillwater is 26 miles away.
            //[Stillwater]

            //prefer one city per row: (continuation of the else above ^^^)
            System.out.println("There are " + citiesInRange.size() + " cities you can drive to in your listed range. " +
                    "In no particular order: " );
            for (String city : citiesInRange) {
                System.out.println(city);

                //input/output:
                //Enter the maximum distance you want to drive on your road trip:
                //500
                //Duluth is 154 miles away.
                //Ely is 245 miles away.
                //Brainerd is 127 miles away.
                //Stillwater is 26 miles away.
                //Red Wing is 54 miles away.
                //There are 5 cities you can drive to in your listed range. In no particular order:
                //Duluth
                //Ely
                //Brainerd
                //Stillwater
                //Red Wing

                //input/output:
                //Enter the maximum distance you want to drive on your road trip:
                //10
                //There were no Minnesota cities listed in your given distance range
            }
        }

    } //end of psvm

}//end of main method

