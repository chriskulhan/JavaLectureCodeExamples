***vid_1_files_and_exceptions_intro_writing

//Files and exceptions
//  **how to read and write text files?

//from PowerPoint slide 2:
//Java has lots of ways of reading and writing files:

/*
-There are several Java library classes for file input and output or I/O
-To enable you to read and write to many different types of files, and handle different circumstances
    *Do you want to read in the file byte by byte,  character by character, or line by line?
    *Are you reading, writing, appending data?
    *Are you reading/writing sequentially, or do you need random access – the ability to read from/write
        to any point in the file?
    *What type of data are you writing? Text or binary?

Today: Reading and writing text files sequentially; line-by-line (slide 3)

-Opening a text file, and starting to read at the beginning (sequentially)
-Creating a file and writing lines to the file (in order lines should appear in the file)
-Opening a file and appending data to the end of that file
-In all cases, writing text data line-by-line or reading line-by-line

Writing to a file (slide 4)

Steps for writing to a file:

1. EITHER create and open file for writing, OR open an existing file to add data
2. Write data (typically text)
3. Close the file (important!) **tell java to tell the operating system is properly saved.

Code follows… ignore Exception-related code for now

 */

package org.example.week_6_files_and_exceptions;

import java.io.BufferedWriter;
import java.io.FileWriter;
import java.io.IOException;

public class vid_1_files_and_exceptions_intro_writing {
    //File writing application. Create a class called Writing with this code.
    // Run your program and you should see a new file called hello.txt in the root directory
    // of your project. Double-click on it to view it in Intellij:

    public static void main(String[] args) throws IOException {
        //added "throws IOException" above

        //if file doesn't exist, will be created
        //if file DOES exist, it will be overwritten and any data in the last file will be completely lost.
        FileWriter writer = new FileWriter("hello.txt");
        BufferedWriter bufWriter =  new BufferedWriter(writer);

        bufWriter.write("Hello\n"); //need to add a new line character after each
        bufWriter.write("More data here\n");
        bufWriter.write("Goodbye\n");
        bufWriter.write("Second running will this overwrite?\n"); //added after running once.
        //output:
        //Hello
        //More data here
        //Goodbye
        //Second running will this overwrite?

        //another way to write the above code:
        bufWriter.write("Hello space newLine() added below"); //need to add a new line character after each
        bufWriter.newLine();
        bufWriter.write("More data here");
        bufWriter.newLine();
        bufWriter.write("Goodbye");
        bufWriter.newLine();
        bufWriter.write("Second running will this overwrite?"); //added after running once.
        bufWriter.newLine();
        //output: Hello space newLine() added below
        //More data here
        //Goodbye
        //Second running will this overwrite?

        bufWriter.close(); //don't forget to close!

        //when run, won't show any output below, but there will be a file added in the root(base) directory
        // "JavaLectureCodeExamples" called hello.txt **same as listed here ^^^
        // (FileWriter writer = new FileWriter("hello.txt");)

        //in the hello.txt file:
        //Hello
        //More data here
        //Goodbye

        //what happens if you run this again? the file is overwritten
        //verify by changing

        //now in the hello.txt file:
        //Hello
        //More data here
        //Goodbye
        //Second running will this overwrite? //yes! It did!

    }
}


***vid_2_a_writing_strings_to_file

//use FileWriter and BufferWriter together

//from PowerPoint (slide 7)
//
// The FileWriter object can open, create, close, and write to a file
//FileWriter can write out Strings or chars to a file
//https://docs.oracle.com/en/java/javase/14/docs/api/java.base/java/io/FileWriter.html
//If the file doesn't exist, then FileWriter will create it
//If the file does exist, it will be overwritten
//If you don't want to overwrite your data, then use the append flag (example in a few slides time)

//slide 8:
//
// File I/O (input/output) is slow - about 1000 times slower than reading/writing to memory
//If your program does a lot of I/O it can slow down considerably
//BufferedWriter class wraps FileWriter and handles I/O in the background of your program; so memory-based
// operations can continue while the file is being used

//BufferedWriter benefits:
// 1. wraps with a filewriter,
// 2. is writing to disc in the background
// 3. will make code faster

package org.example.week_6_files_and_exceptions;

import java.io.BufferedWriter;
import java.io.FileWriter;
import java.io.IOException;

public class vid_2_a_writing_strings_to_file {
    public static void main(String[] args) throws IOException {
    //added "throws IOException" above

    //if file doesn't exist, will be created
    //if file DOES exist, it will be overwritten and any data in the last file will be completely lost.
    FileWriter writer = new FileWriter("helloAgainVid2.txt");
    BufferedWriter bufWriter =  new BufferedWriter(writer);


    bufWriter.write("Hello space newLine() added below"); //need to add a new line character after each
    bufWriter.newLine();
    bufWriter.write("More data here");
    bufWriter.newLine();
    bufWriter.write("Goodbye");
    bufWriter.newLine();
    bufWriter.write("Second running will this overwrite?"); //added after running once.
    bufWriter.newLine();

    bufWriter.close(); //don't forget to close!
    //output:
    //Hello space newLine() added below
    //More data here
    //Goodbye
    //Second running will this overwrite?

    //this FileWriter (just below vvv) erased what was written above ^^ because used the same file name
    FileWriter writer2 = new FileWriter("helloAgainVid2Again.txt");
        //used the same file as above, overwritten everything.
    BufferedWriter bufWriter2 =  new BufferedWriter(writer2);


    bufWriter2.write("new data"); //need to add a new line character after each
    bufWriter2.newLine();
    bufWriter2.write("testing");
    bufWriter2.newLine();
    bufWriter2.write("is this thing on? ");
    bufWriter2.newLine();
    bufWriter2.write("ending file"); //added after running once.
    bufWriter2.newLine();

    bufWriter2.close(); //don't forget!
    //output: **the first batch of data is overwritten because I used the same file name, so only this is shown:
    // new data
    //testing
    //is this thing on?
    //ending file



}
}

***vid_2_b_writing_strings_filewriter_name_change
package org.example.week_6_files_and_exceptions;

import java.io.BufferedWriter;
import java.io.FileWriter;
import java.io.IOException;

public class vid_2_b_writing_strings_filewriter_name_change {
    public static void main(String[] args) throws IOException {
        //added "throws IOException" above

        //if file doesn't exist, will be created
        //if file DOES exist, it will be overwritten and any data in the last file will be completely lost.
        FileWriter writer = new FileWriter("helloAgainVid2.txt");
        BufferedWriter bufWriter =  new BufferedWriter(writer);


        bufWriter.write("Hello space newLine() added below"); //need to add a new line character after each
        bufWriter.newLine();
        bufWriter.write("More data here");
        bufWriter.newLine();
        bufWriter.write("Goodbye");
        bufWriter.newLine();
        bufWriter.write("Second running will this overwrite?"); //added after running once.
        bufWriter.newLine();

        bufWriter.close(); //don't forget to close!

        //this FileWriter (just below vvv) erased what was written above ^^ because used the same file name
        FileWriter writer2 = new FileWriter("helloAgainVid2Again.txt");
        //used the same file as above, overwritten everything.
        BufferedWriter bufWriter2 =  new BufferedWriter(writer2);


        bufWriter2.write("new data"); //need to add a new line character after each
        bufWriter2.newLine();
        bufWriter2.write("testing");
        bufWriter2.newLine();
        bufWriter2.write("is this thing on? ");
        bufWriter2.newLine();
        bufWriter2.write("ending file"); //added after running once.
        bufWriter2.newLine();

        bufWriter2.close(); //don't forget!

        //outputs: BOth work because they are named differently:

        //output in: helloAgainVid2.txt
        // Hello space newLine() added below
        //More data here
        //Goodbye
        //Second running will this overwrite?

        //output in: helloAgainVid2Again.txt
        // new data
        //testing
        //is this thing on?
        //ending file

    }
}

***vid_2_c_append_data_add_more_to_file

package org.example.week_6_files_and_exceptions;

import java.io.BufferedWriter;
import java.io.FileWriter;
import java.io.IOException;

public class vid_2_c_append_data_add_more_to_file {
    public static void main(String[] args) throws IOException {
        //added "throws IOException" above

        //if file doesn't exist, will be created
        //if file DOES exist, it will be overwritten and any data in the last file will be completely lost.

        //add a second argument just below ('true') after the name of the file to append (called append flag):
        //append flag will add data to the end.
        FileWriter writer = new FileWriter("helloAgainVid2Append.txt", true);
        BufferedWriter bufWriter =  new BufferedWriter(writer);


        bufWriter.write("Hello vid2c append space newLine() added below"); //need to add a new line character after each
        bufWriter.newLine();
        bufWriter.write("More data here");
        bufWriter.newLine();
        bufWriter.write("Goodbye");
        bufWriter.newLine();
        bufWriter.write("Second running will this overwrite?"); //added after running once.
        bufWriter.newLine();

        bufWriter.close(); //don't forget to close!

        //this FileWriter (just below vvv) erased what was written above ^^ because used the same file name
        FileWriter writer2 = new FileWriter("helloAgainVid2Append.txt", true );
        //used the same file as above, overwritten everything.
        BufferedWriter bufWriter2 =  new BufferedWriter(writer2);


        bufWriter2.write("new vid2c append data"); //need to add a new line character after each
        bufWriter2.newLine();
        bufWriter2.write("testing");
        bufWriter2.newLine();
        bufWriter2.write("is this thing on? ");
        bufWriter2.newLine();
        bufWriter2.write("ending file"); //added after running once.
        bufWriter2.newLine();

        bufWriter2.close(); //don't forget!

        //ran first group with true after append,
        //
        //output in helloAgainVid2Append.txt:
        // new vid2c append data
        //testing
        //is this thing on?
        //ending file

        // then changed the second group to have a true after it,
        //cumulative output in helloAgainVid2Append.txt:

        // new vid2c append data
        //testing
        //is this thing on?
        //ending file
        //Hello vid2c append space newLine() added below
        //More data here
        //Goodbye
        //Second running will this overwrite?
        //new vid2c append data
        //testing
        //is this thing on?
        //ending file


        //then ran the whole thing again new vid2c append data
        //cumulative output in helloAgainVid2Append.txt:

        //testing
        //is this thing on?
        //ending file
        //Hello vid2c append space newLine() added below
        //More data here
        //Goodbye
        //Second running will this overwrite?
        //new vid2c append data
        //testing
        //is this thing on?
        //ending file
        //Hello vid2c append space newLine() added below
        //More data here
        //Goodbye
        //Second running will this overwrite?
        //new vid2c append data
        //testing
        //is this thing on?
        //ending file

        //**appending to the end after each running



    }
}

***vid_2_d_writing_variables_to_a_file

package org.example.week_6_files_and_exceptions;

import java.io.BufferedWriter;
import java.io.FileWriter;

public class vid_2_d_writing_variables_to_a_file {
    public static void main(String[] args) throws Exception{
        int classCode = 2545;
        double averageEnrollment = 22.16; //average number of students in a semester
        String className = "Java";

        //write the above to a file:
        FileWriter writer = new FileWriter("java.txt");
        BufferedWriter bufferedWriter = new BufferedWriter(writer);

//        bufferedWriter.write(classCode + "\n");
//        bufferedWriter.write("The class code is" + classCode + "\n");
//        bufferedWriter.newLine();

//        bufferedWriter.write(averageEnrollment + "\n");
        //format strings can be used:
//        bufferedWriter.write("The average enrollment is " + averageEnrollment + "students.\n");

//        bufferedWriter.newLine();
//        bufferedWriter.write(className + "\n");
//        bufferedWriter.write("The classname is " + className + ". \n");

        //variables don't have to be written in the order you create them:
        bufferedWriter.write("The classname is " + className + ". \n");
        bufferedWriter.write("The average enrollment is " + averageEnrollment + " students.\n");
        bufferedWriter.write("The class code is " + classCode + "\n");

//        writer.close(); //can also use this to close the file
        bufferedWriter.close(); //can call this and will close writer as well.

        //output: written to java.txt
        //2545
        //22.16
        //Java

        //output written to java.txt with additions:
        //2545
        //22.16
        //Java
        //The classname is Java.
        //The average enrollment is 22.16students.
        //The class code is2545

        //output overwritten to java.txt with changes:
        //
        // The classname is Java.
        //The average enrollment is 22.16 students.
        //The class code is 2545
    }
}

***vid_2_e_writing_numbers

package org.example.week_6_files_and_exceptions;

import java.io.BufferedWriter;
import java.io.FileWriter;
import java.io.IOException;

public class vid_2_e_writing_numbers {
    public static void main(String[] args) throws IOException{

        int data1 = 67;
        int data2 = 65;
        int data3 = 84;

        double number = 12.34;

        FileWriter writer = new FileWriter("number.txt");
        BufferedWriter bufferedWriter = new BufferedWriter(writer);

        bufferedWriter.write(data1);
        bufferedWriter.write(data2);
        bufferedWriter.write(data3);

        //written to number.txt:
        //CAT
        //because unicode

        //so you don't get unicode you have to append a new line after the data:
        bufferedWriter.newLine();
        bufferedWriter.write(data1 +"\n");
        bufferedWriter.write(data2 +"\n");
        bufferedWriter.write(data3 +"\n");
        //written to number.txt:
        //67
        //65
        //84

//        bufferedWriter.write(number); // there is no write method that calls a double, this won't work

        bufferedWriter.write(number + "\n");
        //written to number.txt:
        //12.34

        bufferedWriter.write("testing out different ways to input integers with Integer.toString:");
        bufferedWriter.newLine();
        //also could use Integer.toString(data1);
        bufferedWriter.write(Integer.toString(data1) + "\n");
        bufferedWriter.write(Integer.toString(data1));
        bufferedWriter.newLine();
        bufferedWriter.write(data1 + "");
        bufferedWriter.newLine();

        //written to number.txt:
        //testing out different ways to input integers with Integer.toString:
        //67
        //67
        //67

        bufferedWriter.write("test"); //write a string
        //written to number.txt:
        //test

        //there are two different forms of the write method
        //when you type an integer, bufferedWriter.write interprets it as a unicode value,
        //  so 67 in unicode is 'C', 65 is 'A', 84 is 'T'.

        //unicode reference: https://en.wikipedia.org/wiki/List_of_Unicode_characters

        bufferedWriter.close();

        //written to number.txt:
        //CAT
        //67
        //65
        //84
        //12.34
        //test

    }
}

***vid_3_a_I_O_reading_a_file_should_be_before_vid_2

//-Various ways to read a file (//from PowerPoint slide 16)
//  By lines, characters, bytes?
//  Sequential or random access?
//-Simplest to read line-by-line from the beginning to the end

//-Use a BufferedReader to "wrap" a FileReader
//-FileReader handles opening and closing the file, and can reading a file character-by-character
//-BufferedReader provides a 'readLine' method to collect all the characters from one line, put them together
// into a String, and then return the String to your program

//Questions for reading a file (PowerPoint slide 17)
// - how many lines does the file have? How do you know you have reached the end of the file?
//Answer: you don't know how many lines you have. There's no simple way to count - you must read the whole file to find out

//BufferedReader's readLine() method reads one line and returns it as a String.
// And, it prepares to read the next line of the file.
//But, when BufferedReader gets to the end of the file, there are no more lines to read
// - so readLine will return null
//So to read an entire file, use a while loop that repeats while readLine() != null

//Remember null = special value that means 'no data'. Same as None in Python

package org.example.week_6_files_and_exceptions;

import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;

public class vid_3_a_I_O_reading_a_file_should_be_before_vid_2 {
    //create a new file to read the hello.txt file we created earlier:
    public static void main(String[] args) throws IOException {
        //need to add "throws IOException to PSVM above ^^
        FileReader reader = new FileReader("hello.txt");
        //this file was written earlier ^^^
        BufferedReader bufferedReader = new BufferedReader(reader);
        //BufferedReader is going to work with the file reader to gather together a line of characters,
        //collect that line into a string, and then provide that string to our program

        //begin by reading lines one at a time:
        System.out.println(bufferedReader.readLine());
        System.out.println(bufferedReader.readLine());
        System.out.println(bufferedReader.readLine());
        System.out.println(bufferedReader.readLine());
        System.out.println(bufferedReader.readLine());
        System.out.println(bufferedReader.readLine());
        System.out.println(bufferedReader.readLine());
        System.out.println(bufferedReader.readLine());
        System.out.println(bufferedReader.readLine());

        bufferedReader.close();
        //output: (this is what is in hello.txt)
        //Hello
        //More data here
        //Goodbye
        //Second running will this overwrite?
        //Hello space newLine() added below
        //More data here
        //Goodbye
        //Second running will this overwrite?
        //null //this is null because there are only 8 lines of data in hello.txt
        //and I asked this to read 9 lines ^^ (System.out.println(bufferedReader.readLine());)
    }
}

**** vid_3_b_I_O_reading_a_file_should_be_before_vid_2

package org.example.week_6_files_and_exceptions;

import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;

public class vid_3_b_I_O_reading_a_file_should_be_before_vid_2 {
    public static void main(String[] args) throws IOException {
        //need to add "throws IOException to PSVM above ^^
        FileReader reader = new FileReader("hello.txt");
        //this file was written earlier ^^^
        BufferedReader bufferedReader = new BufferedReader(reader);
        //BufferedReader is going to work with the file reader to gather together a line of characters,
        //collect that line into a string, and then provide that string to our program

//        //begin by reading lines one at a time:
//        System.out.println(bufferedReader.readLine());
//        System.out.println(bufferedReader.readLine());
//        System.out.println(bufferedReader.readLine());
//        System.out.println(bufferedReader.readLine());
//        System.out.println(bufferedReader.readLine());
//        System.out.println(bufferedReader.readLine());
//        System.out.println(bufferedReader.readLine());
//        System.out.println(bufferedReader.readLine());
//        System.out.println(bufferedReader.readLine());

        //write a loop to do the above (reading of all the lines) without knowing how many lines there are:
        //first process the first line:
        String line = bufferedReader.readLine();
        //to process each line, print it out:

        while (line != null) {
            System.out.println(line);
            line = bufferedReader.readLine();

        }
        bufferedReader.close();
        //output:  (this is everything in hello.txt)
        //Hello
        //More data here
        //Goodbye
        //Second running will this overwrite?
        //Hello space newLine() added below
        //More data here
        //Goodbye
        //Second running will this overwrite?

        //add extra data to hello.txt and rerun: (yes, last line worked)
        //output:
        //Hello
        //More data here
        //Goodbye
        //Second running will this overwrite?
        //Hello space newLine() added below
        //More data here
        //Goodbye
        //Second running will this overwrite?
        //adding extra data to file so I can see if vid_3_b_I_O_reading_a_file_should_be_before_vid_2 is reading it

        //delete lines from hello.txt file to see if it changes the output: (yes! it changed)
        //output:
        // Hello
        //deleted a bunch of data for vid_3_b_I_O_reading_a_file_should_be_before_vid_2 example
    }
}

***vid_3_c_make_while_loop_more_concise

package org.example.week_6_files_and_exceptions;

import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;

public class vid_3_c_make_while_loop_more_concise {
    public static void main(String[] args) throws IOException {

//        FileReader reader = new FileReader("hello.txt");
//        BufferedReader bufferedReader = new BufferedReader(reader);

        //change the above 2 lines ^^^ to this single line:
        BufferedReader bufferedReader = new BufferedReader(new FileReader("hello.txt"));

        //Another way to shorten take this:
//        String line = bufferedReader.readLine();
//
//        while (line != null) {
//            System.out.println(line);
//            line = bufferedReader.readLine();

        //change it to vv:

        String line;

        while ((line = bufferedReader.readLine()) != null) {
            //this ^^ is saying "update line to bufferedReader.readLine(),
                //then compare the result of the line variable to null"
            System.out.println(line);

        }

        bufferedReader.close();
        //output: (works the same as the longer version)
        // Hello
        //deleted a bunch of data for vid_3_b_I_O_reading_a_file_should_be_before_vid_2 example
    }
}

***vid_3_d_shortened_buffered_writer_code

package org.example.week_6_files_and_exceptions;

import java.io.BufferedWriter;
import java.io.FileWriter;

public class vid_3_d_shortened_buffered_writer_code {
    public static void main(String[] args) throws Exception {

        //change from this:
//        FileWriter writer = new FileWriter("shorterCodeVid3.txt");
//        BufferedWriter bufWriter = new BufferedWriter(writer);

        //to this:
        BufferedWriter bufWriter = new BufferedWriter(new FileWriter("shorterCodeVid3.txt"));

        bufWriter.write("This is a test with shortened code vid_3");
        bufWriter.close();

        //written to file shorterCodeVid3.txt:
        //This is a test with shortened code vid_3
    }
}


*** vid_3_e_your_turn_buffered_writer_program

//Your turn:
// Start a new program
//Write a program which uses the buffered classes to write out your name,
//  your favorite color, and this class's code (2545) to a new file
//Write one item per line.
//And, the same program should read all this data in and display it.


package org.example.week_6_files_and_exceptions;

import java.io.*;

import static java.nio.file.Files.write;

public class vid_3_e_your_turn_buffered_writer_program {
    public static void main(String[] args) throws IOException {

        String filename = "yourTurnClassInfo.txt";
        String name = "chris";
        String favoriteColor = "indigo";
        Integer classCode = 2545;

        FileWriter writer = new FileWriter(filename);
        BufferedWriter bufWriter =  new BufferedWriter(writer);

        bufWriter.write(name);
        bufWriter.newLine();
        bufWriter.write(favoriteColor);
        bufWriter.newLine();
        bufWriter.write(classCode + "\n"); //needs \n to convert to a string

        bufWriter.close();

//        FileReader reader = new FileReader("yourTurnClassInfo.txt");
        //can use variable, added String filename = "yourTurnClassInfo.txt" with variables above, so:
        FileReader reader = new FileReader(filename);

        BufferedReader bufferedReader = new BufferedReader(reader);

        String line = bufferedReader.readLine();
        //to process each line, print it out:

        while (line != null) {
            System.out.println(line); //have to read the first line before the loop starts
            line = bufferedReader.readLine();

        }
        bufferedReader.close();

        //what's in the file: yourTurnClassInfo.txt found in main (JavaLectureCodeExamples):
        //chris
        //indigo
        //2545

        //output read from file yourTurnClassInfo.txt found in main (JavaLectureCodeExamples):
        //chris
        //indigo
        //2545

    }
}


***vid_4_a_reading_and_writing_arrays_and_arraylists

package org.example.week_6_files_and_exceptions;

import java.io.BufferedWriter;
import java.io.FileWriter;
import java.io.IOException;
import java.util.List;

public class vid_4_a_reading_and_writing_arrays_and_arraylists {
    public static void main(String[] args) throws IOException {

        //Write lines to the file "ITEC 2545 Java" and "ITEC 2560 Web" etc.

        List<String> classNames = List.of("Java", "Web", "C#");
        //this ^^ is the same as, only shorter:
//        List<String> classes = new ArrayList<>();
//        classes.add("Java");
//        classes.add("Web");
//        classes.add("C#");

        List<Integer> classCodes = List.of(2545, 2560, 2505);
        //this ^^ is the same as, only shorter:
//        List<Integer> codes = new ArrayList<>();
//        codes.add(2545);
//        codes.add(2560);
//        codes.add(2505);

        //Try to write classNames to a file:
        BufferedWriter bufferedWriter = new BufferedWriter(new FileWriter("ITEC_Classes.txt"));

        //write each class name on an individual line:
        for(String name: classNames) {
            bufferedWriter.write(name + "\n") ;
        }

        bufferedWriter.close();
        //appeared in file ITEC_Classes.txt in JavaLectureCodeExamples:
        //Java
        //Web
        //C#
    }
}

***vid_4_b_reading_and_writing_arrays

package org.example.week_6_files_and_exceptions;

import java.io.BufferedWriter;
import java.io.FileWriter;
import java.io.IOException;
import java.util.List;

public class vid_4_b_reading_and_writing_arrays {
    public static void main(String[] args) throws IOException {

        //Write lines to the file "ITEC 2545 Java" and "ITEC 2560 Web" etc.

        List<String> classNames = List.of("Java", "Web", "C#");
        //this ^^ is the same as, only shorter:
//        List<String> classes = new ArrayList<>();
//        classes.add("Java");
//        classes.add("Web");
//        classes.add("C#");

        List<Integer> classCodes = List.of(2545, 2560, 2505);
        //this ^^ is the same as, only shorter:
//        List<Integer> codes = new ArrayList<>();
//        codes.add(2545);
//        codes.add(2560);
//        codes.add(2505);

        //Try to write classNames to a file:
        BufferedWriter bufferedWriter = new BufferedWriter(new FileWriter("ITEC_Classes.txt"));


        for(int i = 0; i < classNames.size(); i++) {
            String name = classNames.get(i);
            int code = classCodes.get(i);
            bufferedWriter.write("ITEC " + code + " " + name + "\n") ;

            //same thing ^^ in a format string vv:
            bufferedWriter.write(String.format("ITEC %d %s \n", code, name));

            //to write the string output separately and then write in buffered writer:
            String outputLine = String.format("ITEC %d %s \n", code, name);
            bufferedWriter.write(outputLine);
        }

        bufferedWriter.close();
        //overwrites file ITEC_Classes.txt in JavaLectureCodeExamples:
        //ITEC 2545 Java
        //ITEC 2560 Web
        //ITEC 2505 C#

        //when added the format string the overwriting in ITEC_Classes.txt in JavaLectureCodeExamples:
        //because a loop:
        //ITEC 2545 Java
        //ITEC 2545 Java
        //ITEC 2560 Web
        //ITEC 2560 Web
        //ITEC 2505 C#
        //ITEC 2505 C#

        //when added String outputLine:
        //ITEC 2545 Java
        //ITEC 2545 Java
        //ITEC 2545 Java
        //ITEC 2560 Web
        //ITEC 2560 Web
        //ITEC 2560 Web
        //ITEC 2505 C#
        //ITEC 2505 C#
        //ITEC 2505 C#


    }
}

***vid_4_c_read_data_from_an_array

package org.example.week_6_files_and_exceptions;

import java.io.*;
import java.util.ArrayList;
import java.util.List;

public class vid_4_c_read_data_from_an_array {
    public static void main(String[] args) throws IOException {

//        String fileName = "ITEC_Classes.txt"; //make this <<< a constant by using "final" vv:
        //this won't impact the program, but will stop me from accidentally changing it:
        final String filename = "ITEC_Classes.txt";

        //Write lines to the file "ITEC 2545 Java" and "ITEC 2560 Web" etc.

        List<String> classNames = List.of("Java", "Web", "C#");
        //this ^^ is the same as, only shorter:
//        List<String> classes = new ArrayList<>();
//        classes.add("Java");
//        classes.add("Web");
//        classes.add("C#");

        List<Integer> classCodes = List.of(2545, 2560, 2505);
        //this ^^ is the same as, only shorter:
//        List<Integer> codes = new ArrayList<>();
//        codes.add(2545);
//        codes.add(2560);
//        codes.add(2505);

        //Try to write classNames to a file:
        //convert "ITEC_Classes.txt" to a variable from:
//        BufferedWriter bufferedWriter = new BufferedWriter(new FileWriter("ITEC_Classes.txt"));
        //to:
//        String fileName = "ITEC_Classes.txt"; //move this <<< to above the List ^^^way up there
        BufferedWriter bufferedWriter = new BufferedWriter(new FileWriter(filename));

        for(int i = 0; i < classNames.size(); i++) {
            String name = classNames.get(i);
            int code = classCodes.get(i);
            bufferedWriter.write("ITEC " + code + " " + name + "\n") ;

            //same thing ^^ in a format string vv:
            bufferedWriter.write(String.format("ITEC %d %s \n", code, name));

            //to write the string output separately and then write in buffered writer:
            String outputLine = String.format("ITEC %d %s \n", code, name);
            bufferedWriter.write(outputLine);
        }

        bufferedWriter.close();

        //make a bufferedReader using the String filename:
        BufferedReader bufferedReader = new BufferedReader(new FileReader(filename));

        //read in the lines one by one
        //save them in a new arraylist:
        //not using list.of because then it can't be changed, using ArrayList() instead:

        //new ArrayLIst:
        List<String> classDescriptions = new ArrayList<>();

        //read the first line, and then do a while loop:
        String line = bufferedReader.readLine();

        //is the line ^^ empty? if it is then we don't want to go into the while loop.
        //start the while loop with not null: (there is something in there
        while (line != null) {
            //I know there is something in "line" ^^, then add that line to the ArrayList "classDescriptions".
            classDescriptions.add(line);
            //then read the next line:
            line = bufferedReader.readLine();
            //readline will remove the \n character when its reading from a file
        }

        //after the loop runs:
        System.out.println("End of file reached");
        System.out.println(classDescriptions);
        //I have 3 copies of everything because I left all the different formats:

        //output:
        // End of file reached
        //[ITEC 2545 Java, ITEC 2545 Java , ITEC 2545 Java , ITEC 2560 Web, ITEC 2560 Web , ITEC 2560 Web ,
        // ITEC 2505 C#, ITEC 2505 C# , ITEC 2505 C# ]

    }
}

//notes: readline removes the \n character that is present in this file: ITEC_Classes.txt:
//ITEC 2545 Java
//ITEC 2545 Java
//ITEC 2545 Java
//ITEC 2560 Web
//ITEC 2560 Web
//ITEC 2560 Web
//ITEC 2505 C#
//ITEC 2505 C#
//ITEC 2505 C#

//when reading to this:
//[ITEC 2545 Java, ITEC 2545 Java , ITEC 2545 Java , ITEC 2560 Web, ITEC 2560 Web , ITEC 2560 Web ,
// ITEC 2505 C#, ITEC 2505 C# , ITEC 2505 C# ]

***vid_4_d_1_your_turn_loop_example_months

//your turn: (slide 23)
//
// Use a loop to write each item in this example array to a file
//
//String[] months = { "Jan", "Feb", "Mar" };
//
//Write one item per line
//
//OR: Modify the task list program you wrote in the Lists class to write your task list to a files
//
//Question: can you read a file into an array? Why or why not?

package org.example.week_6_files_and_exceptions;

import java.io.BufferedWriter;
import java.io.FileWriter;
import java.io.IOException;

public class vid_4_d_1_your_turn_loop_example_months {

    public static void main(String[] args) throws Exception {

        String filename = "vid_4_d_months.txt";

        //added April so I know the data is re-written:
        String[] months = { "Jan", "Feb", "Mar", "April" };

        BufferedWriter bufferedWriter = new BufferedWriter(new FileWriter(filename));

        //classic for loop:
        //note: months.length doesn't have parentheses: months.length() <<<NOPE see:
        for (int i = 0; i < months.length; i++) {
            String month = months[i];
            bufferedWriter.write(month + "\n");
        }
        bufferedWriter.close();

        //found in file:
        //Jan
        //Feb
        //Mar
        //April
    }
}

***vid_4_d_2_task_list_modified_to_months

package org.example.week_6_files_and_exceptions;

import java.io.BufferedWriter;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import static input.InputUtils.stringInput;

public class vid_4_d_2_task_list_modified_to_months {
    //code from: week4_lists: vid_5_loops_with_user_input_task_list_program

    public static void main(String[] args) throws IOException {

        String filename = "vid_4_d_2_months.txt";

        String[] months = { "Jan", "Feb", "Mar" };

//        List<String> months = new ArrayList<>();

        BufferedWriter bufferedWriter = new BufferedWriter((new FileWriter(filename)));


//        while (true) {
//            String data = stringInput("Please type a month, or press Enter to quit");
////            if (data.length() == 0) { //if use just presses Enter, the length of the text is 0
//            if (data.isEmpty()) { //could use this instead of this ^^^
//                break;
//            }
//            months.add(data);
//        }
//        System.out.println("Thank you, here are all the months you entered:");

        //this is an enhanced "for loop":
        for (String input : months) {
//            System.out.println(input);
            bufferedWriter.write(input);
            bufferedWriter.newLine();
        }
        bufferedWriter.close();
        //written to file ("vid_4_d_2_months.txt") in JavaLectureCodeExamples:
        //Jan
        //Feb
        //Mar
    }
}


***vid_4_d_3_notes_from_powerpoints

/*

**Reading and Writing Considerations – new lines with "\n", the newline character (slide 24):

The BufferedWriter write methods do not add a newline for you
Make sure you add a \n character at the end of your lines
Or use BufferedWriter's newLine() method after each line, for example

bufWriter.newLine();   //Writes a newline character

When you read in lines with BufferedReader, it will read a line and strip off the newline character

On a PC? You may not see your newlines properly in some text editors. If not, try using "\r\n" instead of "\n" to add newlines
\r\n are the carriage return and linefeed characters; this is how PCs mark newlines
Compare to Unix-based systems - Mac and Linux - which use only \n.
Or use the newLine method to write the correct system-specific character

**Other ways of Reading and Writing (slide 25)

BufferedReader and BufferedWriter work with sequential streams of character data
They can't jump to the middle of a stream or file
Other Java classes can handle random access in a file: http://docs.oracle.com/javase/tutorial/essential/io/rafs.html
And, you'll have to use different classes if you want to work with bytes directly
http://docs.oracle.com/javase/tutorial/essential/io/bytestreams.html

Reading and writing bytes (slide 26)

Create a Path object from a String file path
No loop, but more work to process the individual lines (see below for code:)

 */

package org.example.week_6_files_and_exceptions;

import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.sql.SQLOutput;
import java.util.Arrays;

public class vid_4_d_3_notes_from_powerpoints {
    public static void main(String[] args) throws IOException {
        Path helloFilePath = Path.of("hello.txt");
        byte[] bytes = Files.readAllBytes((helloFilePath));
        String allLines = new String(bytes);
        System.out.println("All lines test to see changes\n" + allLines); //this is printed
        allLines = allLines.replace("\r", ""); //needed in windows, not mac or linux
        String[] lines = allLines.split("\n");
        System.out.println(Arrays.toString(lines));

        //what's in hello.txt:
        //Hello
        //deleted a bunch of data for vid_3_b_I_O_reading_a_file_should_be_before_vid_2 example

        //output that's printed:
        //All lines test to see changes
        //Hello
        //deleted a bunch of data for vid_3_b_I_O_reading_a_file_should_be_before_vid_2 example
        //[Hello, deleted a bunch of data for vid_3_b_I_O_reading_a_file_should_be_before_vid_2 example]
    }
}

***vid_5_intro_to_exception_handling

/*
Error Handling:
-An Exception is Java's way of telling you that there is an error that stops the program continuing
-Programs throw exceptions when there is an error
-Exceptions are objects
-There are lots of different types of Exceptions

-When your code throws an exception, it crashes
-If it's a problem with your code, troubleshoot and fix the error
-Not initializing a variable = NullPointerException
-Reading a non-existent index = ArrayIndexOutOfBounds, IndexOutOfBounds
-Modifying an ArrayList inside an enhanced for loop = ConcurrentModificationException

-What if it's a problem outside your code? Like a file not found?
-You catch that exception, and do something to deal with the error condition

//prepare in case a file will throw an exception:
-Use try and catch blocks
-try block contains code that might throw an exception
-catch block contains code that can attempt to deal with the exception and allow the program to continue running
    -or quit the program safely
    -and/or log the error message for debugging
    -and/or notify the user that something has gone wrong

 */

package org.example.week_6_files_and_exceptions;

public class vid_5_intro_to_exception_handling {
    public static void main(String[] args) {
//        slide 29: (purposely contains an error:)

//        String[] names = { "Andy", "Ben", "Cody"} ;
//        for (int i = 0 ; i <= 3 ; i++) { //the error is on this line. The i<=3 is always true, change to names.length belowVVV
//            System.out.println(names[i]);
//        }
        //This code generates an
        //ArrayIndexOutOfBoundsException
        //Click on the link in the exception message to jump to the line that caused the exception

        //the fix to the error:
        String[] names = { "Andy", "Ben", "Cody"} ;
        for (int i = 0 ; i < names.length ; i++) {
            System.out.println(names[i]);
            //output:
            //Andy
            //Ben
            //Cody
        }
//        String name;
//forgot to write code to initialize this
//String. Its value is null

//Try to call a method on this String...
//        int characters = name.length();
//a NullPointerException is thrown because the variable "name" is null, fix it by making sure the variable isn't null

    }
}

***vid_5_throw_an_exception_example

package org.example.week_6_files_and_exceptions;

public class vid_5_throw_an_exception_example {
    public static void main(String[] args) {
        //1.
//        String hopeThisIsANumber = "5";
//
//        int number = Integer.parseInt(hopeThisIsANumber);
//        //parseInt will try to convert the string to an integer (string 5 to number 5)
//
//        System.out.println("The number is " + number);
//        //output: The number is 5

        //2.
        //What if hopeThisIsANumber is not a number?
        //what if this data is user input or from a file?
        //don't have control over what this data might be.
//        String hopeThisIsANumber = "cat";
//
//        int number = Integer.parseInt(hopeThisIsANumber);
//        //parseInt will try to convert the string to an integer (string 5 to number 5)
//
//        System.out.println("The number is " + number);
//        //output:
//        // Exception in thread "main" java.lang.NumberFormatException: For input string: "cat"
//        //	at java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)
//        //	at java.base/java.lang.Integer.parseInt(Integer.java:661)
//        //	at java.base/java.lang.Integer.parseInt(Integer.java:777)
//        //	at org.example.week_6_files_and_exceptions.vid_5_throw_an_exception_example.main(vid_5_throw_an_exception_example.java:16)
//        //
//        //Process finished with exit code 1

        //3.
////////////****Surround the code that might crash with a try and a catch block:

        //the line the problem happened was below this vvv, so the 'hopeThisIsANumber' can be moved out of the try/catch block;
        //this matters because then the variable 'hopeThisIsANumber' can be used in the output below:
//        String hopeThisIsANumber = "cat";
            String hopeThisIsANumber = "50";
        try {
            int number = Integer.parseInt(hopeThisIsANumber);
            //java will skip the next line if there is an error, and will go directly to the catch block
            //parseInt will try to convert the string to an integer (string 5 to number 5)

            System.out.println("The number is " + number);
            //an exception (NumberFormatException) is an object (or a variable), need to give it a name here 'e':
        } catch (NumberFormatException e) {
            System.out.println("'" + hopeThisIsANumber + "'" + " is not a valid integer string");
            //output: 'cat' is not a valid integer string
        }

        //the program doesn't crash, and this shows that:
        System.out.println("This is the end of the program.");
        //output: This is the end of the program.

    }
}

***vid_6_a_types_of_errors_notes

/*
-Two broad types of errors: (slide 39)
    *Those that are outside our control (e.g. file IO, network operations,
        things that depend on user input or data from another source)
    *Those that are from coding errors (typically when programmer has made a mistake,
        like reading from non-existent array element)
-For errors outside our control: be prepared to handle errors with try-catch (then attempt to recover,
    or shut down gracefully) instead of letting your program crash
-For coding errors… attempt to avoid through good programming practices and thorough testing;
    consideration of as many possible circumstances as possible


Exceptions and Files (slide 40)

-Reading/writing files is one area where lots of things outside your control can go wrong:
    -What if the file doesn't exist?
    -You try and write to a read-only directory?
    -Another program is using the file?
    -Somebody or some other program changes/moves/deletes the file
    -Permission denied
    -Disk full
    -Plus lots of other ways to go wrong

-So it's important to anticipate possible errors and think about how you'll handle them
    *For example, what will your program do if it tries to open a certain file, but fails? Should it crash?
        Should it quit? Will it ask the user for another location to look for the file in? Or do something else?

Checked vs. Unchecked Exceptions (slide 42)

*checked exception*  Java FORCES you to deal with these exceptions:
-Outside our control errors - often throw a checked exception : Java makes you deal with checked exceptions.
    These are typically thrown in situations where your code interacts with something that has no control over
    -IOException  - your program can't stop a file being deleted/moved (when you add 'throws IOException' to psvm)
    -SQLException - your program can't stop the database server going down
    -Various data parsing exceptions (dates, XML, JSON…)
    -Others

*unchecked exceptions* Java doesn't FORCE you to deal with these exceptions:
-Coding errors: often from coding errors - these are unchecked exceptions. Java does not force you deal with
    unchecked exceptions. You should attempt to write code that doesn't throw these exceptions
    -NullPointerException
    -ArrayIndexOutOfBoundsException
    -ConcurrentModificationException
    -Various others

**How to deal with checked exceptions (because Java makes you):
(slide43)

-If you have a method which is likely to throw an exception, you can specify that in the method header

public static void main(String args[]) throws IOException {

-Any code that calls that method must handle the exception, or it must declare that it will throw it to its own calling method
-The compiler will enforce this
-Many file-related methods declare that they throw IOException
-So code that uses these methods must handle IOExceptions, or declare that they will throw the exception to their
    calling method
-The idea is to remind programmers to handle IO errors -> better, less crashy code
-If main throws an exception, then the program crashes – there's nothing left to handle this exception

slide 44:
-Hence, this. We are saying that we are not going to deal with IOException and we'll just let the program crash if
one happens. Try deleting test.txt and running this code to see what happens

import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;

public class FileReadingApp {
	public static void main(String[] args) throws IOException {

		FileReader reader = new FileReader("test.txt");
		BufferedReader bufReader = new BufferedReader(reader);
		String line = bufReader.readLine();

		while (line != null) {
			System.out.println(line);
			line = bufReader.readLine();
		}
		bufReader.close();
	}
}

*/

package org.example.week_6_files_and_exceptions;

import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;

public class vid_6_a_types_of_errors_notes {
    public static void main(String[] args) throws IOException {

        FileReader reader = new FileReader("test.txt");
        BufferedReader bufReader = new BufferedReader(reader);
        String line = bufReader.readLine();

        while (line != null) {
            System.out.println(line);
            line = bufReader.readLine();
        }
        bufReader.close();

        //output with errors:
        // /Library/Java/JavaVirtualMachines/jdk-21.jdk/Contents/Home/bin/java -javaagent:/Applications/IntelliJ IDEA.app/Contents/lib/idea_rt.jar=55189:/Applications/IntelliJ IDEA.app/Contents/bin -Dfile.encoding=UTF-8 -Dsun.stdout.encoding=UTF-8 -Dsun.stderr.encoding=UTF-8 -classpath /Users/chriskulhanek/IdeaProjects/JavaLectureCodeExamples/target/classes:/Users/chriskulhanek/.m2/repository/edu/minneapolis/input-utils/1.0.2/input-utils-1.0.2.jar org.example.week_6_files_and_exceptions.vid_6_a_types_of_errors_notes
        //Exception in thread "main" java.io.FileNotFoundException: test.txt (No such file or directory)
        //	at java.base/java.io.FileInputStream.open0(Native Method)
        //	at java.base/java.io.FileInputStream.open(FileInputStream.java:213)
        //	at java.base/java.io.FileInputStream.<init>(FileInputStream.java:152)
        //	at java.base/java.io.FileInputStream.<init>(FileInputStream.java:106)
        //	at java.base/java.io.FileReader.<init>(FileReader.java:60)
        //	at org.example.week_6_files_and_exceptions.vid_6_a_types_of_errors_notes.main(vid_6_a_types_of_errors_notes.java:95)
        //
        //Process finished with exit code 1
    }
}



***vid_6_b_more_on_exception_handling

package org.example.week_6_files_and_exceptions;

import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

public class vid_6_b_more_on_exception_handling {

    //what the code looks like before adding try and catch:
    //numbers.txt looked like this:

    //67
    //65
    //84
    //
    //cat

//    public static void main(String[] args) throws IOException {
//        List<Integer> numbers = new ArrayList<>();
//        String filename = "number.txt";
//
//        BufferedReader reader = new BufferedReader((new FileReader(filename)));
//
//        String line = reader.readLine();
//
//        while(line != null) {
//            int number = Integer.parseInt(line);
//            //parseInt converts string to a number
//            numbers.add(number);
//            line = reader.readLine(); //this line is important
//        }
//        System.out.println(numbers);
//        //output: [67, 65, 84] when the file was all in the correct format
    //output with errors when numbers.txt looked like this:
    //
//67
//65
//84
//
//cat

    //output:
    ///Library/Java/JavaVirtualMachines/jdk-21.jdk/Contents/Home/bin/java -javaagent:/Applications/IntelliJ IDEA.app/Contents/lib/idea_rt.jar=55148:/Applications/IntelliJ IDEA.app/Contents/bin -Dfile.encoding=UTF-8 -Dsun.stdout.encoding=UTF-8 -Dsun.stderr.encoding=UTF-8 -classpath /Users/chriskulhanek/IdeaProjects/JavaLectureCodeExamples/target/classes:/Users/chriskulhanek/.m2/repository/edu/minneapolis/input-utils/1.0.2/input-utils-1.0.2.jar org.example.week_6_files_and_exceptions.vid_6_b_more_on_exception_handling
    //Exception in thread "main" java.lang.NumberFormatException: For input string: ""
    //	at java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)
    //	at java.base/java.lang.Integer.parseInt(Integer.java:671)
    //	at java.base/java.lang.Integer.parseInt(Integer.java:777)
    //	at org.example.week_6_files_and_exceptions.vid_6_b_more_on_exception_handling.main(vid_6_b_more_on_exception_handling.java:20)
    //
    //Process finished with exit code 1

//    }
    //NOW to add try and catch:
        public static void main(String[] args) throws IOException {
            List<Integer> numbers = new ArrayList<>();
            String filename = "number.txt";

            BufferedReader reader = new BufferedReader((new FileReader(filename)));

            String line = reader.readLine();

            while(line != null) {
                //ignore anything that isn't an integer:
                try {
                    int number = Integer.parseInt(line);
                    //parseInt converts string to a number
                    numbers.add(number);
                } catch (NumberFormatException e) {
                    //ignore:
                    System.out.println(line + " is not an integer and will be ignored.");
                    //you have to do something in this catch place, or else might hide errors
                }
                line = reader.readLine(); //this line is important
        }
            System.out.println(numbers);
            //output:
            // is not an integer and will be ignored.
            //cat is not an integer and will be ignored.
            //[67, 65, 84]
    }

}

***vid_6_c_handling_exceptions

/*
Handling exceptions (slide 45):

The compiler forces you to deal with checked exceptions, either by

A. Telling the compiler that you won't deal with the exception in this method
For example, the exception is caused by bad data sent to the method; that's the caller's problem,
    so return the problem to them

B. Catching the exception and doing something about it
If it's possible to recover; or if the exception should be logged or recorded somehow
 */

//Handling exception option A: add "throws IOException" into main,

//Handling exception option B:  (slide 47):

// Dealing with the exception
//Place code which may cause an error in a 'try block'.
//And then if an error occurs, you can trap it in a 'catch block', and deal with it,
//  before it crashes the program. You need to specify what type of error the catch block will catch
//Can also add an optional finally block - code that runs whether an exception is thrown or not


package org.example.week_6_files_and_exceptions;

import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;

public class vid_6_c_handling_exceptions {
    //from vid_6_a_types_of_errors_notes
    public static void main(String[] args){

        //add this try block to everything that might be impacted (include close)
        try {
            FileReader reader = new FileReader("test.txt");
            BufferedReader bufReader = new BufferedReader(reader);
            String line = bufReader.readLine();

            while (line != null) {
                System.out.println(line);
                line = bufReader.readLine();
            }
            bufReader.close();
            //then add a catch block (what type of exception?)
            //file not found is a type of IOException
            //the catch block only runs if the IOException is thrown (and throws IOException is not in main)
        } catch (IOException e){
            System.out.println("Sorry, we can't find this file.");
            //output: Sorry, we can't find this file.
        }
    }
}

***vid_7_preventing_vs_catch_and_recover

/* Prevention is (usually) better than cure (slide 51)

It's usually better to prevent exceptions
Exception handling is slow - typically slower than checking for the issue

****When these method are called with a null string, the code on the left (just below), with the try-catch,

public static int countCharacters (String str) {
    try {
        return str.length();
    } catch (NullPointerException npe) {
        return 0;
    }
}

*****is about 40 times slower than code on the right (just below):

public static int countCharacters (String str) {
    if(str == null) {
        return 0;
    }
    return str.length();
}

But, when called with a non-null string, the code on the left is 30% faster than the code on
    the right because no str==null check is made.

TimingExceptions.java in the example repo

***Prevention vs Cure
(slide 52):

-Generally, it's advised to write code that checks for possible error conditions to avoid causing exceptions
-However, consider a scenario where the check is relatively slow, and exceptions are relatively unlikely -
    what's the best approach now?
-Clarity of code is also important

Also remember there are cases where you don't have control over everything, e.g. reading from a file and what
    if the file has been moved? You need exception handling in these cases

 */

package org.example.week_6_files_and_exceptions;

public class vid_7_preventing_vs_catch_and_recover {
}

***vid_8_a_throwing_exceptions_from_method

package org.example.week_6_files_and_exceptions;

import java.io.BufferedReader;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

public class vid_8_a_throwing_exceptions_from_method {
    //code from Clara's code: https://github.com/claraj/Java2545Examples/blob/main/src/main/java/week6_files_exceptions/ThrowsFromMethod.java
    public static void main(String[] args) {
        //this throws exceptions:
//        String filename = "does_not_exist.txt";
//        List<String> data = readFromFile(filename); //there is an unhandled exception here <<<
//        System.out.println(data);
//    }

        //rewrite above ^^ to below vv
        String filename = "does_not_exist.txt";    // try creating this file, or using a file that does exist

//        try {
//            List<String> data = readFromFile(filename);
//            System.out.println(data);
//        } catch (IOException e) {
//            System.out.println("Could not read from file " + filename);
//            //output: Could not read from file does_not_exist.txt
        //if you change the file to something that IS found, then the file's contents will print.
//        }
//    }
//
        //refine just above ^^ by catching more than one exception, remove the 'throws IOException' from below
        try {
            List<String> data = readFromFile(filename);
            System.out.println(data);

            //FileNotFoundException is a specific exception:
        } catch (FileNotFoundException fnfe) {
            System.out.println("The file " + filename + " was not found. Fix and try again.");

            //IOException is a general exception:
        } catch (IOException ioe) {
            System.out.println("Could not read from file " + filename);
        }
    }

    //output: The file does_not_exist.txt was not found. Fix and try again.

    //add "throws IOException" below because the issue isn't in the below method. forcing main to deal with the problem.
    private static List<String> readFromFile(String filename) throws IOException {
        BufferedReader bufferedReader = new BufferedReader(new FileReader(filename));
        List<String> lines = new ArrayList<>();
        String line = bufferedReader.readLine();
        while (line != null) {
            lines.add(line);
            line = bufferedReader.readLine();
        }

        bufferedReader.close();
        return lines;
    }
}

***vid_8_b_questions_about_exceptions

/*
IOException is being thrown, but program does not crash (slide 49)

Question: What would happen if the try block throws a different type of error,
    like a NullPointerException?
Answer: the catch block won't catch it - program will crash
You can add more than one catch block after a try block to deal with more than
    one type of Exception

Question: What if the file is opened successfully, but an error is encountered
    as the file is being read? Code will never get to the line where the bufReader is closed, so the resource will never be closed.
Answer: a finally block, next slide

 */

package org.example.week_6_files_and_exceptions;

import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;

public class vid_8_b_questions_about_exceptions {
    public static void main(String[] args) {

    //from: week 6 vid_6_c_handling_exceptions

        BufferedReader bufReader = null;
        try {
            bufReader = new BufferedReader(new FileReader("test.txt"));
//        BufferedReader bufReader = new BufferedReader(reader); //move this outside the try block so
            //it can be used in the finally block below
        String line = bufReader.readLine();

        while (line != null) {
            System.out.println(line);
            line = bufReader.readLine();
        }
        //try to do something with the output:

//        System.out.println(line.toUpperCase()); //don't do this. if you want to change data,
                //do that inside the loop so they will catch mistakes there.

        } catch (IOException e) {
            System.out.println("Sorry, error or we can't find this file." + e);

            //add this finally block:
        } finally {
            if(bufReader !=null) {
                try {
                    bufReader.close();
                }
                catch (IOException e) {
                    System.out.println("Error closing the file." + e);
                }
            }
        }
    }
    //output: Sorry, error or we can't find this file.java.io.FileNotFoundException: test.txt (No such file or directory)
}

***vid_8_c_new_way_to_close

package org.example.week_6_files_and_exceptions;

import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;

public class vid_8_c_new_way_to_close {

    public static void main(String[] args) {

        //from: week 6 vid_6_c_handling_exceptions
        //then from: vid_8_b_questions_about_exceptions

        //create BufferedReader right after the try block:
        //try with resources. The resources is buffered reader that is reading a file
        //think of it as JUST the file:
        try (BufferedReader bufReader = new BufferedReader(new FileReader("test.txt"));) {

            String line = bufReader.readLine();

            while (line != null) {
                System.out.println(line);
                line = bufReader.readLine();
            }

        } catch (IOException e) {
            System.out.println("Sorry, error or we can't find this file." + e);

        }
    }
}
//Sorry, error or we can't find this file.java.io.FileNotFoundException: test.txt (No such file or directory)


***vid_8_d_try_with_resources

/*
Try with resources: (slide 55):

Introduced in Java 7 -  so you'll see a lot of code uses the older method - plain try-catch blocks
Neater way of dealing with exceptions when you are opening a resource and close it when you are done
E.g. reading/writing a file
Reading/writing from network data
Reading/writing from a database

examples: refer to slides 57 and 58

 */

package org.example.week_6_files_and_exceptions;

import java.io.BufferedWriter;
import java.io.FileWriter;
import java.io.IOException;

//started with this:
//public class vid_8_d_try_with_resources {
//    //from week 6: vid_1_files_and_exceptions_intro_writing
//
//    public static void main(String[] args) throws IOException {
//
//        FileWriter writer = new FileWriter("hello.txt");
//        BufferedWriter bufWriter =  new BufferedWriter(writer);
//
//        bufWriter.write("Hello\n"); //need to add a new line character after each
//        bufWriter.write("More data here\n");
//        bufWriter.write("Goodbye\n");
//        bufWriter.write("Second running will this overwrite?\n"); //added after running once.
//
//FileWriter writer2 = new FileWriter("hello.txt", true); //append flag -true means add to the end
//BufferedWriter bufWriter2 = new BufferedWriter(writer2);
//
//            bufWriter2.write("Hello space newLine() added below"); //need to add a new line character after each
//            bufWriter2.newLine();
//            bufWriter2.write("More data here");
//            bufWriter2.newLine();
//            bufWriter2.write("Goodbye");
//            bufWriter2.newLine();
//            bufWriter2.write("Second running will this overwrite?"); //added after running once.
//            bufWriter2.newLine();
//
//            bufWriter2.close(); //don't forget to close!
//
//    }
//}
public class vid_8_d_try_with_resources {
    //from week 6: vid_1_files_and_exceptions_intro_writing

    public static void main(String[] args) {

        try (BufferedWriter bufWriter =  new BufferedWriter(new FileWriter("hello.txt"))) {

            bufWriter.write("Hello\n"); //need to add a new line character after each
            bufWriter.write("More data here\n");
            bufWriter.write("Goodbye\n");
            bufWriter.write("Second running will this overwrite?\n"); //added after running once.

            bufWriter.close(); //don't forget

        } catch (IOException e) {
            System.out.println("Error writing to file " + e);
        }

        try (FileWriter writer2 = new FileWriter("hello.txt", true);
            BufferedWriter bufWriter2 = new BufferedWriter(writer2)) {

            bufWriter2.write("Hello space newLine() added below"); //need to add a new line character after each
            bufWriter2.newLine();
            bufWriter2.write("More data here");
            bufWriter2.newLine();
            bufWriter2.write("Goodbye");
            bufWriter2.newLine();
            bufWriter2.write("Second running will this overwrite?"); //added after running once.
            bufWriter2.newLine();

            bufWriter2.close(); //don't forget to close!
        }
        catch (IOException e) {
            System.out.println("Error appending data to file" + e);
        }

    }
}

***vid_9_a_code_checker_program

/*
Try with resources:  (slide 59)

-Use try-with-resources for file input/output
-You can also use it with database code (later)
    *Closes database connections whether there is an error, or not

-Some other types of exceptions can use this style

-If you need to catch other exceptions: use regular try-catch blocks

 */


package org.example.week_6_files_and_exceptions;

import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

public class vid_9_a_code_checker_program {
    //base code from Clara: (https://github.com/claraj/Java2545Examples/blob/main/src/main/java/week6_files_exceptions/ReadNumbersFromFile.java)
    //changed to reflect try/catch blocks
    public static void main(String[] args) {

        List<Integer> numbers = new ArrayList<>();
        String filename = "numbers.txt";

        try (BufferedReader reader = new BufferedReader(new FileReader(filename))) {
            //use try "with resources" when there is a thing that is opened and closed
            //advantage: the resource is closed for you automatically

            String line = reader.readLine();

            while (line != null) {
                // ignore anything that isn't an integer.
                try {
                    int number = Integer.parseInt(line);
                    numbers.add(number);
                } catch (NumberFormatException e) {
                    // ignore lines that are not numbers
                    System.out.println(line + " is not an integer, ignoring. ");
                }
                line = reader.readLine();
            }

            System.out.println(numbers);
        } catch (IOException e) {
            System.out.println("Error reading file " + e);
        }
    }
}

***vid_9_b_your_turn_code_style_check

/*
Your Turn – Code Style Check

-Read another Java file into your program
-For example, a file you worked on in a lab
-Check the length of every line – are any lines longer than 100 characters?
-If there are any lines longer than 100 characters, print a message with the line
    text, and line number
-https://google.github.io/styleguide/javaguide.html
-Use try-with-resources exception handling

 */

package org.example.week_6_files_and_exceptions;

import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;

public class vid_9_b_your_turn_code_style_check {
    //made a copy of vid_4_d_1_your_turn_loop_example_months.java and saved it to the
    //root directory (JavaLectureCodeExamples)

//1. how to set up the try/catch block:


//      public static void main(String[] args) throws IOException {
//          //1. Read in the file from JavaLectureCodeExamples (vid_4_d_1_your_turn_loop_example_months.java)
//
//          String filename = "vid_4_d_1_your_turn_loop_example_months.java";
//
//          try (BufferedReader reader = new BufferedReader(new FileReader(filename))) {
//              //read the file:
//
//
//          } catch (IOException e) {
//              System.out.println("Error reading file " + filename + " because " + e);
//          }
//      }
//}

    //2. continue, adding to the try block:
    //2a. read the file
    public static void main(String[] args){
        //1. Read in the file from JavaLectureCodeExamples (vid_4_d_1_your_turn_loop_example_months.java)

        String filename = "vid_4_d_1_your_turn_loop_example_months.java";

        try (BufferedReader reader = new BufferedReader(new FileReader(filename))) {
            //read the file:

        //2b.
            String line = reader.readLine();
            while(line != null) {
                System.out.println(line);
                //update the line within the loop by adding this line:
                line = reader.readLine();
            }

        } catch (IOException e) {
            System.out.println("Error reading file " + filename + " because " + e);
        }
    }
}

//output: (reads in the entire file correctly: and it's just text)
// /Library/Java/JavaVirtualMachines/jdk-21.jdk/Contents/Home/bin/java -javaagent:/Applications/IntelliJ IDEA.app/Contents/lib/idea_rt.jar=58359:/Applications/IntelliJ IDEA.app/Contents/bin -Dfile.encoding=UTF-8 -Dsun.stdout.encoding=UTF-8 -Dsun.stderr.encoding=UTF-8 -classpath /Users/chriskulhanek/IdeaProjects/JavaLectureCodeExamples/target/classes:/Users/chriskulhanek/.m2/repository/edu/minneapolis/input-utils/1.0.2/input-utils-1.0.2.jar org.example.week_6_files_and_exceptions.vid_9_b_your_turn_code_style_check
////your turn: (slide 23)
////
//// Use a loop to write each item in this example array to a file
////
////String[] months = { "Jan", "Feb", "Mar" };
////
////Write one item per line
////
////OR: Modify the task list program you wrote in the Lists class to write your task list to a files
////
////Question: can you read a file into an array? Why or why not?
//
//package org.example.week_6_files_and_exceptions;
//
//import java.io.BufferedWriter;
//import java.io.FileWriter;
//import java.io.IOException;
//
//public class vid_4_d_1_your_turn_loop_example_months {
//
//    public static void main(String[] args) throws Exception {
//
//        String filename = "vid_4_d_months.txt";
//
//        //added April so I know the data is re-written:
//        String[] months = { "Jan", "Feb", "Mar", "April" };
//
//        BufferedWriter bufferedWriter = new BufferedWriter(new FileWriter(filename));
//
//        //classic for loop:
//        //note: months.length doesn't have parentheses: months.length() <<<NOPE see:
//        for (int i = 0; i < months.length; i++) {
//            String month = months[i];
//            bufferedWriter.write(month + "\n");
//        }
//        bufferedWriter.close();
//
//        //found in file:
//        //Jan
//        //Feb
//        //Mar
//        //April
//    }
//}
//
//Process finished with exit code 0


***vid_9_c_style_check_continued_line_length

package org.example.week_6_files_and_exceptions;

import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;

public class vid_9_c_style_check_continued_line_length {
    public static void main(String[] args){
        //1. Read in the file from JavaLectureCodeExamples (vid_4_d_1_your_turn_loop_example_months.java)

        String filename = "vid_4_d_1_your_turn_loop_example_months.java";
        //3a. add variable here to check how long the lines are:
        int maxLineLength = 75;
        //checked at 100 length, there was nothing
        //checked at 75 length and there were 3 lines that were too long.

        try (BufferedReader reader = new BufferedReader(new FileReader("vid_4_d_1_your_turn_loop_example_months.java"))) {

            String line = reader.readLine();

            //create a variable that's a line counter:
            int lineCounter = 1;

            while(line != null) {
                //3b. check how long the maxLineLength is and only print if it's too long:
                if (line.length() > maxLineLength) {
                    System.out.println("The line " + lineCounter + " is too long. ");
                    System.out.println(line);
                }
                //update the line within the loop by adding this line:
                line = reader.readLine();
                //part of the line counter: to increase the line number variable with each loop
                lineCounter ++;
            }

        } catch (IOException e) {
            System.out.println("Error reading file " + filename + " because " + e);
        }
    }
}
///Library/Java/JavaVirtualMachines/jdk-21.jdk/Contents/Home/bin/java -javaagent:/Applications/IntelliJ IDEA.app/Contents/lib/idea_rt.jar=58442:/Applications/IntelliJ IDEA.app/Contents/bin -Dfile.encoding=UTF-8 -Dsun.stdout.encoding=UTF-8 -Dsun.stderr.encoding=UTF-8 -classpath /Users/chriskulhanek/IdeaProjects/JavaLectureCodeExamples/target/classes:/Users/chriskulhanek/.m2/repository/edu/minneapolis/input-utils/1.0.2/input-utils-1.0.2.jar org.example.week_6_files_and_exceptions.vid_9_c_style_check_continued_line_length
//The line 9 is too long.
////OR: Modify the task list program you wrote in the Lists class to write your task list to a files
//The line 28 is too long.
//        BufferedWriter bufferedWriter = new BufferedWriter(new FileWriter(filename));
//The line 31 is too long.
//        //note: months.length doesn't have parentheses: months.length() <<<NOPE see:
//
//Process finished with exit code 0


***vid_9_d_add_a_boolean_to_code_check

package org.example.week_6_files_and_exceptions;

import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;

public class vid_9_d_add_a_boolean_to_code_check {
    public static void main(String[] args){
        //1. Read in the file from JavaLectureCodeExamples (vid_4_d_1_your_turn_loop_example_months.java)

        String filename = "vid_4_d_1_your_turn_loop_example_months.java";
        //3a. add variable here to check how long the lines are:
        int maxLineLength = 75;
        //checked at 100 length, there was nothing
        //checked at 75 length and there were 3 lines that were too long.

        try (BufferedReader reader = new BufferedReader(new FileReader("vid_4_d_1_your_turn_loop_example_months.java"))) {

            // count the number of lines too long:
            int numberOfLinesTooLong = 0;
            //add a boolean
            boolean linesTooLong = false;
            String line = reader.readLine();

            //create a variable that's a line counter:
            int lineCounter = 1;

            while(line != null) {
                //3b. check how long the maxLineLength is and only print if it's too long:
                if (line.length() > maxLineLength) {
                    System.out.println("The line " + lineCounter + " is too long. ");
                    System.out.println(line);
                    //part of boolean addition:
                    linesTooLong = true;
                    numberOfLinesTooLong ++;
                }
                //update the line within the loop by adding this line:
                line = reader.readLine();
                //part of the line counter: to increase the line number variable with each loop
                lineCounter ++;
            }
            //check if linesTooLong is true:
            if(linesTooLong) {
                System.out.println("there were " + numberOfLinesTooLong + " lines that were too long");
                //when int maxLineLength = 75;
                //there were 2 lines that were too long

            } else {
                System.out.println("there were no lines that were too long.");
                //when int maxLineLength = 100;
                //output: there were no lines that were too long.
            }

        } catch (IOException e) {
            System.out.println("Error reading file " + filename + " because " + e);
        }
    }
}

***vid_10_a_no_do_user_input_while_loop

package org.example.week_6_files_and_exceptions;

import org.w3c.dom.ls.LSOutput;

import static input.InputUtils.intInput;

public class vid_10_a_no_do_user_input_while_loop {
    public static void main(String[] args) {
        int userInput = 0;
        while (userInput < 1 || userInput > 10) {
            userInput = intInput("Please enter a number between 1 and 10");
        }
        System.out.println("Thanks, the number you entered is " + userInput);
        //output:
        //Please enter a number between 1 and 10
        //0
        //Please enter a number between 1 and 10
        //11
        //Please enter a number between 1 and 10
        //-1
        //Please enter a number between 1 and 10
        //10
        //Thanks, the number you entered is 10
    }
}

***vid_10_b_do_while_user_input_validation_wrap_up

package org.example.week_6_files_and_exceptions;

import static input.InputUtils.intInput;

public class vid_10_b_do_while_user_input_validation_wrap_up {
//from Clara's code: (https://github.com/claraj/Java2545Examples/blob/main/src/main/java/week6_files_exceptions/UserEntersData_Do.java_)

    public static void main(String[] args) {

        // Example: you want the user to enter a number between 1 and 10
        // do-while version

        int userInput;
        do {
            userInput = intInput("Please enter a number between 1 and 10");
        } while (userInput < 1 || userInput > 10);

        System.out.println("Thanks, the number you entered is " + userInput);
        //output:
        //Please enter a number between 1 and 10
        //11
        //Please enter a number between 1 and 10
        //0
        //Please enter a number between 1 and 10
        //-80
        //Please enter a number between 1 and 10
        //1
        //Thanks, the number you entered is 1
        //
        //Process finished with exit code 0
    }
}


***vid_10_c_user_enters_data_windows_version

package org.example.week_6_files_and_exceptions;

import java.util.List;

import static input.InputUtils.stringInput;

public class vid_10_c_user_enters_data_windows_version {
    //from Clara's code: https://github.com/claraj/Java2545Examples/blob/main/src/main/java/week6_files_exceptions/UserEntersData_WindowsVersion.java

    public static void main(String[] args) {
        //check to see if a user's data is within a set of choices:

        // Example: enter your version of Windows. Only "XP", "7", "8" and "10" are acceptable.

        List<String> windowsVersions = List.of("XP", "7", "8", "10");

        //string.join joins all things in a list into a string
        String windowsVersionsString = String.join(", ", windowsVersions);   // "XP, 7, 8, 10"

        String version = stringInput("Enter your version of Windows from these choices: " + windowsVersionsString).toUpperCase();

        //while NOT windowsVersions contains the version
        //another way to write the just below VV : while (windowsVersions.contains(version) == false)
        //while the below conditions is true (that the Windows version is NOT XP, 7, 8 or 10, the loop will continue
        while (!windowsVersions.contains(version)) {
            version = stringInput("Not a recognized version. " +
                    "Enter your version of Windows from these choices: " + windowsVersionsString).toUpperCase();
        }

        System.out.println("Thanks, your Windows version is " + version);
    }
}
}

***vid_10_d_input_utils_double_input_method

//from clara's code: https://github.com/claraj/input-utils/blob/master/src/main/java/input/InputUtils.java
//from powerpoint slide: 63

/**
 *
 * Utility methods for
 *   - getting validated integer and double input from user.
 *   - getting positive integer or double input from user.
 *   - turning yes/no responses into boolean values
 *   - String input - doesn't do much more than the basic scanner, but there for consistency
 */

package org.example.week_6_files_and_exceptions;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Scanner;

public class vid_10_d_input_utils_double_input_method {


    static Scanner scanner = new Scanner(System.in);


    /** Print question, wait for user to type and press return, return the data entered.
     * @param question Text to print for the user
     * @return whatever user types as a String. */
    public static String stringInput(String question) {
        if (question != null) {
            System.out.println(question);
        }
        return scanner.nextLine();
    }


    /**  Wait for user to type and press return, return the data entered.
     *
     * @return the String the user types.  */
    public static String stringInput() {
        return stringInput(null);
    }

    /** Gets a double number from the user.
     *  Print question, wait for user to type and press return,
     *  verify data is a double, ask for input again if not.
     *
     * @param question A question to print for the user.
     @return the double value entered. */
    public static double doubleInput(String question) {

        while (true) {
            // If user has provided a question, then print it for the user
            if (question != null) {
                System.out.println(question);
            }

            //Try to read what the user typed, expect it to be a double.
            try {
                // If the input can be read as a double, that double value will be returned
                // This ends the loop, and this method, and control returns to the calling method.

                String line = scanner.nextLine();
                return Double.parseDouble(line);

            } // if the input can't be read as a double, then an error will be raised.
            // That error can be 'caught' by this code, and we can print an error message.
            // Since we are inside a while loop, then the loop can repeat and ask the user for input again.
            catch (NumberFormatException nfe) {
                System.out.println("Error - please enter a number.");
            }

        }

    }


    /** Gets a double number from the user.
     *  Wait for user to type and press return,
     *  Verify data is a double, ask for input again if not.
     *
     @return the double value entered. */

    public static double doubleInput() {
        return doubleInput(null);
    }

    /** Gets a double number from the user.
     *  Wait for user to type and press return,
     *  Verify data is a positive double, ask for input again if not.
     *  0 is considered positive.
     *
     @return the double value entered. */

    public static double positiveDoubleInput() { return positiveDoubleInput(null); }


    /** Gets a double number from the user.
     *  Wait for user to type and press return,
     *  Verify data is a positive double, ask for input again if not.
     *  0 is considered positive.
     *
     * @param question A question to print for the user.
     @return the double value entered. */

    public static double positiveDoubleInput(String question) {

        while (true) {
            // If user has provided a question, then print it for the user
            if (question != null) {
                System.out.println(question);
            }

            //Try to read what the user typed, expect it to be a POSITIVE (0 or greater) double.
            try {
                // If the input can be read as a double, that double value will be returned
                // This ends the loop, and this method, and control returns to the calling method.


                String line = scanner.nextLine();
                double userInput = Double.parseDouble(line);
                if (userInput >= 0)  {
                    return userInput; //will not return a null value, this will go to the catch block instead
                }

                else {
                    throw new NumberFormatException(userInput + " is not valid. Number must be positive.");
                }

            }

            // if the input can't be read as a double, then an error will be raised.
            // That error can be 'caught' by this code, and we can print an error message.
            // Since we are inside a while loop, then the loop can repeat and ask the user for input again.
            catch (NumberFormatException ne) {
                System.out.println("Error - please enter a positive number.");
            }
        }

    }


    /** Asks user a question, waits for response, checks to make sure user enters a integer.
     *
     * @param question the question that will be displayed for the user
     * @return the int value entered. */
    public static int intInput(String question) {

        while (true) {
            // If user has provided a question, then print it for the user
            if (question != null) {
                System.out.println(question);
            }

            //Try to read what the user typed as an int.
            try {
                // If the input can be read as a int, that int will be returned
                // This ends the loop, and this method, and control returns to the calling method.
                String line = scanner.nextLine();
                return Integer.parseInt(line);


            } // if the input can't be read as an int, then an error will be raised.
            // For example, if the user enters 'ten' or 1.4 or 123456543454343434, these are not ints, so will cause an error.
            // That error can be 'caught' by this code, and we can print an error message.
            // Since we are inside a while loop, then the loop can repeat and ask the user for input again.
            catch (NumberFormatException ime) {
                System.out.println("Error - please enter an integer number.");
            }
        }

    }

    /** Waits for user to type, checks to make sure user enters a integer.
     *
     * @return the int value entered. */

    public static int intInput() {
        return intInput(null);
    }


    /** Waits for user to type, checks to make sure user enters a positive integer.
     * 0 is considered positive.
     * @return the int value entered. */

    public static int positiveIntInput() {
        return positiveIntInput(null);
    }


    /** Asks user a question, waits for response, checks to make sure user enters a positive integer.
     * 0 is considered positive.
     * @return the int value entered. */

    public static int positiveIntInput(String question) {

        while (true) {
            // If user has provided a question, then print it for the user
            if (question != null) {
                System.out.println(question);
            }

            //Try to read what the user typed as an int.
            try {
                // If the input can be read as a int, that int will be returned
                // This ends the loop, and this method, and control returns to the calling method.
                String line = scanner.nextLine();
                int userInput = Integer.parseInt(line);
                if (userInput >= 0) {
                    return userInput;
                } else {
                    throw new NumberFormatException(userInput + " is not valid. Number must be positive.");
                }

            } // if the input can't be read as an int, then an error will be raised.
            // For example, if the user enters 'ten' or 1.4 or 123456543454343434, these are not ints, so will cause an error.
            // That error can be 'caught' by this code, and we can print an error message.
            // Since we are inside a while loop, then the loop can repeat and ask the user for input again.
            catch (NumberFormatException ime) {
                System.out.println("Error - please enter a positive integer number.");
            }
        }

    }


    /** Converts a Yes or No input to a boolean value
     *
     * @param question a question to print for the user
     @return "yes" or "y" or uppercase variants returns true
     "no" or "n" or uppercase variants return false
     All other inputs ask user to re-enter data

     */

    public static boolean yesNoInput(String question) {

        // Values that are considered to be a yes response
        ArrayList<String> yesValues = new ArrayList(Arrays.asList("yes", "y"));

        // Same for no responses
        ArrayList<String> noValues = new ArrayList(Arrays.asList("no", "n"));


        while (true) {

            // If user has provided a question, then print it for the user
            if (question != null) {
                System.out.print(question);
            }

            // Suggest expected responses
            System.out.println(" Y/N? ");

            String response = scanner.nextLine().toLowerCase();

            if (yesValues.contains(response)) {
                return true;
            }

            if (noValues.contains(response)) {
                return false;
            }

            // If the user input is not a yes or a no response, print error, and the loop will repeat.
            System.out.println("Please enter 'y' or 'n'.");

        }

    }


    /** Converts a Yes or No input to a boolean value

     @return "yes" or "y" or uppercase variants returns true
     "no" or "n" or uppercase variants return false
     All other inputs ask user to re-enter data

     */
    public static boolean yesNoInput() {
        return yesNoInput(null);
    }

}

***vid_10_e_wrap_up

/*

Lab in Github: (slide 64)

The tests create files as part of checking your work
They are all written to a directory called temporary_directory_for_test_files
You can usually ignore the files created

But sometimes checking the data written to the files may be helpful for troubleshooting
Don't delete this directory
 */


package org.example.week_6_files_and_exceptions;

public class vid_10_e_wrap_up {
}






