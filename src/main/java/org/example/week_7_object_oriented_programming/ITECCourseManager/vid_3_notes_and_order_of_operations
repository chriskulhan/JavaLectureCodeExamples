1. Start with: vid_3_a_ITEC_course_manager_no_objects
    from: Clara's programs online: https://github.com/claraj/Java2545Examples/blob/main/src/main/java/week7_first_classes/ITECCourseManager_NoObjects.java

2. Modify program to be Object Oriented:
//from powerpoint slide 13:

    -Let's model an object
    -Create ITECCourse object (create an ITECCourse "class" in Intellij)
    -A Course object will contain data about one ITEC course
    -We can encapsulate ITECCourse properties into one object

    -Create ITECCourse objects from a ITECCourse class
        -Remember a class is instructions for making an object
        -One class can make as many objects as you need
    -We can change the data ITECCourse objects stored by modifying the class definition
    -What if we want to add the classroom the course will be taught in? We can just modify the
        ITECCourse class definition
    -Much simpler and safer than adding another variable to our code for all our courses;
        easier to remember the variable name
    -String maintenanceCourseClassroom = "T3020";
    -String datacomCourseClassroom = "T3050";           // yuck

3. The Object Oriented Version (slide 14)

    -Objects store data but can also do things
    -Put them to work for you!
    -What if we want to add code to check if the number of students enrolled doesn't exceed the max?
    -We can do that in the ITECCourse class
        -How? By adding a method to "ITECCourse" class

4. Defining a class (slide 15) notes

    -Use the keyword class plus the name of the class
    -Convention is to start class name with an uppercase letter (StartTheClassWithUpperCase), not: (startTheClassWith...)
    -Usually write each class definition in its own file
    -The file name must match the class name
    -So ITECCourse needs to be in a file called ITECCourse.java

    public class ITECCourse{
         // code here
    }

    (slide 16)

    -You can write several classes in the same file
    -Or put them in different files (for now, make sure you put them in the same package)
    -Let's put the ITECCourse class in a separate .java file
    -New project, create a new Class
    -File > Newâ€¦ > Java Class
    -Call it ITECCourse

5. refactor this code: vid_3_a_ITEC_course_manager_no_objects to be object oriented.
    -working in: ITEC_courses_vid_3_object_oriented_coding

    a. Start by making a class to represent ITEC Course objects called "ITECCourse_vid_3_working_version"
    b. add fields/variables/data/instance variables:
        //I added "Field" to all the fields so I don't get confused:

        String nameField;

        int codeField;
        //example 1150

        List<String> studentsField;
        //list of student names

        int maxStudentsField;

    c. Add a method to deal with how to add a student:
        void addStudentField(String studentName) {
            //make sure variable studentsField isn't null:
            if (studentsField == null) {
                //initialize the variable here (make the arraylist)
                studentsField = new ArrayList<>();
            }
            //add the studentName
        studentsField.add(studentName);

    d. take this code from: vid_3_a_ITEC_course_manager_no_objects

        public static void writeCourseInfo(String name, int code, ArrayList<String>students, int maxStudents) {
            System.out.println("Course Name: " + name);
            System.out.println("Course Code: " + code);
            System.out.println("Students enrolled:");
            for (String student : students) {
                System.out.println(student);
            }
            System.out.println("There are " + getNumberOfStudents(students) + " students enrolled");
            System.out.println("The max number of students that can enroll in this course is  " + maxStudents);
        }

    e. paste it here: ITECCourse_vid_3_working_version and reconfigure to:
        //remove "static" and the objects "String name, int code, ArrayList<String>students, int maxStudents" from the first line:
        //from: public static void writeCourseInfo(String name, int code, ArrayList<String>students, int maxStudents) {
        // (because this is going to be part of the "ITECCourse_vid_3" object/class and will have the variables
        //already inside this class (nameField, codeField, studentsField,etc.)

        //to this: (I added "Field" after each field for now so I can understand what is going on, so from 'name' to 'nameField');

        public void writeCourseInfo() {
            System.out.println("Course Name: " + nameField);
            System.out.println("Course Code: " + codeField);
            System.out.println("Students enrolled:");
            for (String student : studentsField) {
                System.out.println(student);
            }
            System.out.println("There are " + getNumberOfStudents(studentsField) + " students enrolled");
            System.out.println("The max number of students that can enroll in this course is  " + maxStudentsField);
        }

    f. take "getNumberOfStudents" method from: vid_3_a_ITEC_course_manager_no_objects
        - comment out the things you added to "ITECCourse_vid_3_working_version" so they don't get used by two things at once:
        - remove 'public' and 'static' from the method and also change the variables from

         -students to studentsField so it goes from:
          public static int getNumberOfStudents(ArrayList<String> students) {
                return students.size();
            }

        -turns into:
          int getNumberOfStudents(ArrayList<String> studentsField) {
                              return studentsField.size();
            }

    g. the 'getNumberOfStudents' method in 'ITECCourse_vid_3_working_version' doesn't need
        arguments because they are in the ITECCourse_vid_3_working_version object already.

        so go from:
            int getNumberOfStudents(ArrayList<String> studentsField) {
                return studentsField.size();
            }

        to this:
             int getNumberOfStudents() {
                return studentsField.size();
             }
    h. remove argument for *all* getNumberOfStudents():

        go from:
        System.out.println("There are " + getNumberOfStudents(studentsField) + " students enrolled");

        to this:
        System.out.println("There are " + getNumberOfStudents() + " students enrolled");

6. Refactor code from "vid_3_a_ITEC_course_manager_no_objects" to "vid_3_b_ITEC_course_manager_no_objects"
    a. make a new ITECCourse object in the above:
        go from:
           public static void main(String[] args) {

                //create an example course:
                String maintenanceCourseName = "Microcomputer Systems Maintenance";
                int maintenanceCourseCode = 1310;
                ArrayList<String> maintenanceCourseStudentList = new ArrayList<>();
                int maintenanceCourseMaxStudents = 20;

        to this:
            public static void main(String[] args) {

                //this name 'ITECCourse_vid_3_working_version' isn't convention, but I'm using while I'm learning:
                ITECCourse_vid_3_working_version maintenanceCourse = new ITECCourse_vid_3_working_version();

                //create an example course:
                String maintenanceCourseName = "Microcomputer Systems Maintenance";
                int maintenanceCourseCode = 1310;
                ArrayList<String> maintenanceCourseStudentList = new ArrayList<>();
                int maintenanceCourseMaxStudents = 20;

    b. then remove the individual variables : 'maintenanceCourse', 'maintenanceCourseName', 'maintenanceCourseCode'
        by setting the fields in 'ITECCourse_vid_3_working_version' object:
            String nameField;
            int codeField;
            //example 1150
            List<String> studentsField;
            //list of student names
            int maxStudentsField;

        by setting "name of object" '.' "name of field"   = ...etc. (see below for example)

        from this: (in vid_3_b_ITEC_course_manager_no_objects):
            public static void main(String[] args) {

                //this name 'ITECCourse_vid_3_working_version' isn't convention, but I'm using while I'm learning:
                //this line (just below vv) creates the new 'ITECCourse_vid_3_working_version' course object
                //it will represent "Microcomputer Systems Maintenance".
                ITECCourse_vid_3_working_version maintenanceCourse = new ITECCourse_vid_3_working_version();

                //create an example course:
                String maintenanceCourseName = "Microcomputer Systems Maintenance";
                int maintenanceCourseCode = 1310;
                ArrayList<String> maintenanceCourseStudentList = new ArrayList<>();
                int maintenanceCourseMaxStudents = 20;

        to this:
            public static void main(String[] args) {

                //this name 'ITECCourse_vid_3_working_version' isn't convention, but I'm using while I'm learning:
                //this line (just below vv) creates the new 'ITECCourse_vid_3_working_version' course object
                //it will represent "Microcomputer Systems Maintenance".
                ITECCourse_vid_3_working_version maintenanceCourse = new ITECCourse_vid_3_working_version();

               //change this:
        //        String maintenanceCourseName = "Microcomputer Systems Maintenance";

                //to this:
                maintenanceCourse.nameField = "Microcomputer Systems Maintenance";
        ------
                //change this:
        //        int maintenanceCourseCode = 1310;

                //to this:
                maintenanceCourse.codeField = 1310;
        -----
                //change this:
        //        int maintenanceCourseMaxStudents = 20;

                //to this:
                maintenanceCourse.maxStudentsField = 20;
        ----
                //change these:
        //        maintenanceCourseStudentList.add("Anna");
        //        maintenanceCourseStudentList.add("Bill");
        //        maintenanceCourseStudentList.add("Carl");

                //to these:
                maintenanceCourse.addStudent("Anna");
                maintenanceCourse.addStudent("Bill");
                maintenanceCourse.addStudent("Carl");
        ----
                //find out info about the ITEC course and who is registered by adding:
                maintenanceCourse.writeCourseInfo();

                //create another example course:

                ITECCourse_vid_3_working_version datacomCourse = new ITECCourse_vid_3_working_version();
                //change this:
        //        String datacomCourseName = "Data Communications";

                //to this:
                datacomCourse.nameField = "Data Communications";

                //change this:
        //        int dataComCourseCode = 1425;

                //to this:
                datacomCourse.codeField = 1425;

                //leave this arraylist alone:
                ArrayList<String> datacomCourseStudentList = new ArrayList<>();

                //change this:
        //        int dataComCourseMaxStudents = 30;

                //to this:
                datacomCourse.maxStudentsField = 30;
    c. add student info
            //change this:
    //        //Add some students
    //        datacomCourseStudentList.add("Dave");
    //        datacomCourseStudentList.add("Ed");
    //        datacomCourseStudentList.add("Flora");

            //to this:
            //Add some students
            datacomCourse.addStudent("Dave");
            datacomCourse.addStudent("Ed");
            datacomCourse.addStudent("Flora");

    d. write course info:
            //change to this:
            maintenanceCourse.writeCourseInfo();

            //replaces these "writeCourseInfo" things:
            //Print information about these courses
            //commented out so this doesn't get confused
    //        writeCourseInfo(maintenanceCourseName, maintenanceCourseCode, maintenanceCourseStudentList, maintenanceCourseMaxStudents);
    //        writeCourseInfo(datacomCourseName, datacomCourseCode, datacomCourseStudentList, datacomCourseMaxStudents);
    //    }

    e. run the program from 'vid_3_b_ITEC_course_manager_no_objects'

    //___________________________****************__________________
    //when this is run, there are some things that are ported from here:
    //vid_3_b_ITEC_course_manager_no_objects
    //to here: ITECCourse_vid_3_working_version
    //and back again.

    //the shape the data is ported into is from the "writeCourseInfo" method in ITECCourse_vid_3_working_version

    //the individual data pieces are housed in: vid_3_b_ITEC_course_manager_no_objects

    //output:
    ***output from the first data object "maintenanceCourse"

    //Course Name: Microcomputer Systems Maintenance
    //Course Code: 1310
    //Students enrolled:
    //Anna
    //Bill
    //Carl
    //There are 3 students enrolled
    //The max number of students that can enroll in this course is  20


    ***output from the second data object: "datacomCourse"
    //Course Name: Data Communications
    //Course Code: 1425
    //Students enrolled:
    //Dave
    //Ed
    //Flora
    //There are 3 students enrolled
    //The max number of students that can enroll in this course is  30

        //made another version: vid_3_c_ITEC_course_manager_with_objects_cleaned_up

        **This version is better, but could be even better: (slide 20)

        -Fewer variables in ITECCourseManager
        -And we can add extra features to our Course objects

        -But still a lot of code in ITECCourseManager (can this be improved upon?):

            -Can add a constructor to clean up creating these objects
            -A constructor is a special method called when the object is created
            -The constructor ***_must have the same name as the class_***
            -Used to set up and initialize the object
            -(Similar to  __init__ in Python)

   7. add a constructor to: ITECCourse_vid_3_working_version
   **convention is to add the constructor after the data/field/instance variables:

        int maxStudentsField;// (I left this as a place marker)
        _________________

        //***add constructor here (step 7 in vid_3_notes_and_order_of_operations):

        //constructors have to have the same name as the class here: "ITECCourse_vid_3_working_version"
        //will have arguments that correspond to the variables/data/instance variables above.
        //so: nameField will have argument/parameter: courseName with type String
        //codeField will have argument/parameter: courseCode with type int
        //and maxStudentsField will have argument/parameter: courseMaxStudents with type int
        //
        ITECCourse_vid_3_working_version(String courseName, int courseCode, int courseMaxStudents) {
            nameField = courseName;
            codeField = courseCode;
            maxStudentsField = courseMaxStudents;
            //now check vid_3_c_ITEC_course_manager_with_objects_cleaned_up
            //there is some red squiggles there now.
        }

        ___________________
        //need to write a method to add a student: (I left this as a place marker)
        void addStudent(String studentName) {

    8a. go back to vid_3_c_ITEC_course_manager_with_objects_cleaned_up and look for red marked areas:

    ITECCourse_vid_3_working_version maintenanceCourse = new ITECCourse_vid_3_working_version();

    AND

    ITECCourse_vid_3_working_version datacomCourse = new ITECCourse_vid_3_working_version();

    both have red squiggles by the parentheses.

    **Fix ITECCourse_vid_3_working_version datacomCourse = new ITECCourse_vid_3_working_version();
        by adding the 3 arguments from ITECCourse_vid_3_working_version

    ---->change this in vid_3_c_ITEC_course_manager_with_objects_cleaned_up

        from this:
               ITECCourse_vid_3_working_version maintenanceCourse = new ITECCourse_vid_3_working_version();

       to this:
          ITECCourse_vid_3_working_version maintenanceCourse = new ITECCourse_vid_3_working
            _version("Microcomputer Systems Maintenance", 1310, 20);

       |>by taking the below vvv info and put it in the argument place (in the parentheses) above^^^
            maintenanceCourse.nameField = "Microcomputer Systems Maintenance";
            maintenanceCourse.codeField = 1310;
           ArrayList<String> maintenanceCourseStudentList = new ArrayList<>(); // todo ask: this wasn't used????
           maintenanceCourse.maxStudentsField = 20;

    8b.    go back to vid_3_c_ITEC_course_manager_with_objects_cleaned_up and look for red marked areas:
               //take this:
       //        ITECCourse_vid_3_working_version datacomCourse = new ITECCourse_vid_3_working_version();

               //add the below vv  parameters/arguments within the parentheses to here:
               ITECCourse_vid_3_working_version datacomCourse = new ITECCourse_vid_3_working_version("Data Communications",1425,30);

       //        datacomCourse.nameField = "Data Communications";
       //        datacomCourse.codeField = 1425;
       //
       //        ArrayList<String> datacomCourseStudentList = new ArrayList<>(); todo: what happens to this?
       //
       //        datacomCourse.maxStudentsField = 30;

    8c do this for the remaining data that is added for the various types of variables

    8d. move the addStudents validation (if null, etc.) from vid_3_c_ITEC_course_manager_with_objects_cleaned_up
        into the constructor so the validation is automatic.
        **if it exists already in the constructor, it's not necessary to check if it exists

        ITECCourse_vid_3_working_version(String courseName, int courseCode, int courseMaxStudents) {
            nameField = courseName;
            codeField = courseCode;
            maxStudentsField = courseMaxStudents;
            //now check vid_3_c_ITEC_course_manager_with_objects_cleaned_up
            //there is some red squiggles there now.

      here>>      ******studentsField = new ArrayList<>(); //add this <<< to replace vvv
            // if (studentsField == null) {
            //initialize the variable here (make the arraylist)
            //from the "void addStudent" method just below
        }

        //need to write a method to add a student:
        void addStudent(String studentName) {
            //make sure variable studentsField isn't null:
   ***>>>from here // if (studentsField == null) {
    //            //initialize the variable here (make the arraylist)
    //            studentsField = new ArrayList<>();
            //add the studentName
            studentsField.add(studentName);