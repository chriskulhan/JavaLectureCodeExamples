/*vid_2_notes:
(java reference that I didn't use, but exists: https://docs.oracle.com/javase/tutorial/java/javaOO/classes.html)
(google style guide, not used here but useful in the future: https://google.github.io/styleguide/javaguide.html)

0. check to see what happens when you try to look in vid_1_swimmingPoolProgram at what lives in
    the como object by printing it:
    // System.out.println(como);
        //output: org.example.week_7_object_oriented_programming.poolexample.vid_1_objects_pool@5674cd4d
        //why? telling us what type of object it is, but the memory address (@5674cd4d) isn't very useful
        //in order to make this better, make a toString(); instance method in vid_1_objects_pool to

1. add a new "instance method" to vid_1_objects_pool called toString() to deal with the como object:

    public String toString() {
        String description = this.nameField + " pool is " + this.lengthField + " meters long.";
        return description;
        }

2. rerun after adding this "toString" instance method in vid_1_objects_pool:

            //public String toString() {
        //        String description = this.nameField + " pool is " + lengthField + " meters long.";
        //        return description;

        System.out.println(como); (this is printed in vid_1_swimmingPoolProgram)
        //output: Como Park pool is 80.0 meters long.
        //this is the string from the toString method ^^^

        //see what this might look like for ymca:
        System.out.println(ymca); (this is printed in vid_1_swimmingPoolProgram)
        //output: YMCA pool is 50.0 meters long.
        //this has used the toString instance method in vid_1_objects_pool to make this string ^^^

3. notes on "this.", can use this.lengthField or just lengthField if the variables can't be confused with each other
    (I personally will NOT be doing this, but Clara must be telling us this because there will be
        something coming up that will do this)

        examples:
        a. in vid_1_objects_pool:
            this.nameField = nameParameter;
            //could be nameField = nameParameter; (without the "this." because it can't be confused)

        b. in vid_1_objects_pool:
            this.lengthField = lengthParameter;
            //could be lengthField = lengthParameter; (without the "this." because it can't be confused)

        c. in vid_1_objects_pool:
            double total = laps * this.lengthField; //this could be shortened to: "return lap * this.lengthField;"
            //this could also be: double total = laps * lengthField; (because "this." isn't always necessary if it can't be confused)

        d. in vid_1_objects_pool:
            public String toString() {
            String description = this.nameField + " pool is " + this.lengthField + " meters long.";
            //could instead be: String description = nameField + " pool is " + lengthField + " meters long.";
            return description;
            }
4. in vid_1_objects_pool: Add @Override
        **to help make sure the thing below it (here: toString() ) is spelled correctly:
    add an @Override before the toString() method in vid_1_objects_pool vvv:

    //public String toString() {
    //        String description = this.nameField + " pool is " + this.lengthField + " meters long.";
    //        //could instead be: String description = nameField + " pool is " + lengthField + " meters long.";
    //        return description;
    //        }

5. Your turn add a new pool object in vid_1_swimmingPoolProgram:

        //todone (vid_2_your_turn) create a new pool with name "Edina", length 50;
        vid_1_objects_pool edina = new vid_1_objects_pool ("Edina", 50);

        //todone (vid_2_your_turn) What's the total distance for swimming 12 laps in the Edina pool?
        System.out.println("What's the total distance for swimming 12 laps in the Edina pool? Answer: " +
                edina.distanceForLaps(12) + " meters. ");
        //output: What's the total distance for swimming 12 laps in the edina pool? Answer: 600.0 meters.

        //todone (vid_2_your_turn) print Edina pool info:
        System.out.println(edina);
        //output: edina pool is 50.0 meters long.
    **

 */

 6. Add access modifiers (learned about in video 5) to this program
    **add public in from of the pool class: vid_1_objects_pool
    from this:

    vid_1_objects_pool(String nameParameter, double lengthParameter) {
            this.nameField = nameParameter;
            //could be nameField = nameParameter; (without the "this." because it can't be confused)

            this.lengthField = lengthParameter;
            //could be lengthField = lengthParameter; (without the "this." because it can't be confused)
            //these variables within this class (vid_1_objects_pool) will
            //let us create objects associated with these variables:
        }
    to this:

    public vid_1_objects_pool(String nameParameter, double lengthParameter) {
            this.nameField = nameParameter;
            //could be nameField = nameParameter; (without the "this." because it can't be confused)

            this.lengthField = lengthParameter;
            //could be lengthField = lengthParameter; (without the "this." because it can't be confused)
            //these variables within this class (vid_1_objects_pool) will
            //let us create objects associated with these variables:
        }

**can't access the nameField in the vid_1_swimmingPoolProgram

7. create getter and setter methods in: vid_1_objects_pool

    a. press command-N (control-N on a pc)
    b. select getter and setter
    c. select both nameField and LengthField
    d. now getter and setter methods will appear in: vid_1_objects_pool
        look like:
            public String getNameField() {
                return nameField;
            }

            public void setNameField(String nameField) {
                this.nameField = nameField;
            }

            public Double getLengthField() {
                return lengthField;
            }

            public void setLengthField(Double lengthField) {
                this.lengthField = lengthField;
            }

8. Now need to change the way the private data is snagged
    from:    vid_1_objects_pool
    by:     vid_1_swimmingPoolProgram

    changed this in vid_1_swimmingPoolProgram:

    //        ymca.nameField = "ymca"; //this isn't allowed
                //will need to make getter and setter methods in vid_1_objects_pool that can
                // restrict the info that is available

        //so, if I wanted to change the name of ymca, now that there are getter and setter methods:

            ymca.setNameField("Minneapolis YMCA"); //this is how to access the name now.

            //run this and see what if the new name shows up: (it does!)
            //some of the output:
            // Minneapolis YMCA pool is 50.0 meters long.

9. USe the getter and setter methods to do validation:
    example:
    go to:    vid_1_objects_pool
    **check to make sure the length is positive:

    goes from this:
        public void setLengthField(Double lengthField) {
            this.lengthField = lengthField;
        }
    to this:
        public void setLengthField(Double lengthField) {
            if (lengthField < 0 || lengthField > 100){
                return; //can all kinds of things here based on the need of the program
                //could print an error message, return and ignore, raise an exception, etc.
            }
            this.lengthField = lengthField;
        }
