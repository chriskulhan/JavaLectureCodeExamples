reference before this week's video: https://github.com/claraj/Java2545Examples/blob/main/src/main/java/week4_list_data_structure/GuestList.java

from powerpoints:
Reminder arrays: (1st slide)
int[] someNumbers = new int[10];   //10 ints

String[] names = new String[4];    //4 Strings

Fixed size, data structure
Stores items of the same type; defined when created
Can contain Objects or primitive types, but all the things in one array, must be the same type
Simple, fast, and efficient â€“ minimal and fixed storage requirements
Simple syntax to create array, store items, retrieve items; loop over an array
BUT difficult to rearrange items in an array;  can't resize the array;  add items in the middle of the array; delete an item
No built-in capability for searching an array

***powerpoint slide 2: Lists:

A resizable, ordered collection of items
Items are kept in order
Can create empty list
Can add items to the end - list gets bigger
Can add items to the start or in the middle
Can get any item from the list by index
Can remove items from the start, middle or end - list get smaller
Can remove by value, or by index
Can search for items in the list
Can find out the size of the list, if it is empty

Lists are everywhere (list of: classes, friends, emails, contacts, etc.)

Java Lists: slide 5:
Three kinds of Lists in Java:
    -ArrayList
    -LinkedList
    -Vector

Java thinks about different ways you might use a list
Some data? Lots of data?
Do you need to search for data in the list?
Will you add and remove data from the start, or end, or middle?

-----What is different about the 3 lists? (slide 10)
***ArrayList:***
uses an an array to store data
simple and fast
When adding or removing items, the array can be replaced with a larger or smaller array, as needed
Fast to search
Fast to add/remove items at the end of the list
Slow to add/remove items at the start or middle of the list - gets slower with more items in list

//your turn: Create a new Java class:

//Create a main method (psvm shortcut)
//Add this code to the main method
//Alt+Enter or Option+Enter to import List, ArrayList
//Run and test

//package org.example.week4_lists;
//
//import java.util.ArrayList;
//import java.util.List;
//
//public class vid_1_data_structure_lists {
//    public static void main(String[] args) {
//
//        List<String> arrayList = new ArrayList<>();
//        arrayList.add("Hello");
//        arrayList.add("World");
//
//        for (String s : arrayList) {
//            System.out.println(s);
//        //output:
//            //Hello
//            //World
//        }
//        //print entire arrayList:
//        System.out.println(arrayList);
//        //output: [Hello, World]
//    }
//}

//your turn,

package org.example.week4_lists;

import java.util.ArrayList;
import java.util.List;

public class vid_1_data_structure_lists {
    public static void main(String[] args) {

        List<String> arrayList = new ArrayList<>();
        arrayList.add("Hello");
        arrayList.add("World");

        //Can you add your name to the List?
        arrayList.add("Chris Kulhanek");

        //Can you add "MCTC" to the List?
        arrayList.add("MCTC");

        //Can you print out all the Strings in the List?
        for (String s : arrayList) {
            System.out.println(s);
            //output:
            //Hello
            //World
            //Chris Kulhanek
            //MCTC

        }
        //new loop to print to all strings in upper case:
        for (String t : arrayList) {
            //Can you print out all the String in the List in uppercase?
            System.out.println(t.toUpperCase());
            //output:
            //MCTC
            //HELLO
            //WORLD
            //CHRIS KULHANEK
            //MCTC
        }
        //note outside the loop:
            //print entire arrayList:
            System.out.println(arrayList);
            //output: [Hello, World, Chris Kulhanek, MCTC]

            //Can you print the lengths of each String?
            System.out.println(arrayList.toArray().length);
            //output: 4
    }
}

*******vid_1_data_structure_lists

//your turn: Create a new Java class:

//Create a main method (psvm shortcut)
//Add this code to the main method
//Alt+Enter or Option+Enter to import List, ArrayList
//Run and test

//package org.example.week4_lists;
//
//import java.util.ArrayList;
//import java.util.List;
//
//public class vid_1_data_structure_lists {
//    public static void main(String[] args) {
//
//        List<String> arrayList = new ArrayList<>();
//        arrayList.add("Hello");
//        arrayList.add("World");
//
//        for (String s : arrayList) {
//            System.out.println(s);
//        //output:
//            //Hello
//            //World
//        }
//        //print entire arrayList:
//        System.out.println(arrayList);
//        //output: [Hello, World]
//    }
//}

//your turn,

package org.example.week4_lists;

import java.util.ArrayList;
import java.util.List;

public class vid_1_data_structure_lists {
    public static void main(String[] args) {

        List<String> arrayList = new ArrayList<>();
        arrayList.add("Hello");
        arrayList.add("World");

        //Can you add your name to the List?
        arrayList.add("Chris Kulhanek");

        //Can you add "MCTC" to the List?
        arrayList.add("MCTC");

        //Can you print out all the Strings in the List?
        for (String s : arrayList) {
            System.out.println(s);
            //output:
            //Hello
            //World
            //Chris Kulhanek
            //MCTC

        }
        //new loop to print to all strings in upper case:
        for (String t : arrayList) {
            //Can you print out all the String in the List in uppercase?
            System.out.println(t.toUpperCase());
            //output:
            //MCTC
            //HELLO
            //WORLD
            //CHRIS KULHANEK
            //MCTC
        }
        //note outside the loop:
            //print entire arrayList:
            System.out.println(arrayList);
            //output: [Hello, World, Chris Kulhanek, MCTC]

            //Can you print the lengths of each String?
            System.out.println(arrayList.toArray().length);
            //output: 4
    }
}

****vid_1_tree_array_list_example

package org.example.week4_lists;

import java.util.ArrayList;
import java.util.List;

public class vid_1_tree_array_list_example {
    public static void main(String[] args) {

        //Create arraylist
        List<String> trees = new ArrayList<>();

        //Add data at the end:
        trees.add("Pine");
        trees.add("Oak");
        trees.add("Elm");
        trees.add("Aspen");

        trees.add("Palm");

        //Add data at index 2, in the middle
        trees.add(2, "Palm");

        //Get by index, using "get" method
        System.out.println("Tree at index 1 is " + trees.get(1));
        //output: Tree at index 1 is Oak

//        //loop over all the trees and print them all:
        for (String tree : trees) {
            System.out.println(tree);
//            //output: Pine
            //Oak
            //Palm
            //Elm
            //Aspen
            //Palm
//        }
//
//        //remove data by value:
            trees.remove("Oak");
//
//        //remove data String at index 0, the first element:
            trees.remove(0);
////
            System.out.println(trees);
//        //output: [Palm, Elm, Aspen, Palm]
//
//      //does the array contain data? check using "contains":
            if (trees.contains("Aspen")) {
                System.out.println("Tree list contains Aspen");
//            //output: Tree list contains Aspen
//
//        }
                //how many things are in the array list? .size
                int numberOfTrees = trees.size();
                System.out.println("There are " + numberOfTrees + " trees in the list.");
//        //output: There are 6 trees in the list.
            }
        }
    }
}

//All the above can also be done with a LinkedList

****vid_1_linked_lists
/* LinkedList a chain of nodes (slide 14)

//Made of nodes linked together
    //Each node stores one list item
//Each node has a link to the node immediately before and after itself
//A LinkedList knows where the start and end node are, but can't access the middle nodes directly
//advantages of LinkedLists:
    //fast to read data from beginning to end or reverse,
// adding a new data piece: create a new node, get rid of end cap (which is index zero), create a new link

//How do you work with data in a Linked List? (slide 15)
   Suppose we need to test if dataC is in the LinkedList
    Start at the beginning, follow the links until we get to dataC; return true.
        If we get to the end without finding dataC, then return false
    Can also retrieve the nth node (counting from 0)
    Start at the beginning, count along the links n times
    Easy to fetch the first or last node

**How to add data to the middle in a LinkedList:
    cross from start to the place you want to add, break the link and then add the node and add new links to each.

**How do you remove an item from a LinkedList?
    **Same concept as above,
    -you have to move from the start or end to find the place the item is,
    -remove the links
    -relabel the each new node
    -make new links

***Advantages of LinkedLists: (slide 19)

-Fairly fast to search, slower for larger Lists
-Follow links along the nodes until the item is found, or get to end of list
-Fast to add items at the start or end
-Fast to remove items at the start or end
-Fairly fast to add items in the middle

**working with a LinkedList is the same as working with an ArrayList

*****vid_1_vector*****

/*
Vector (slide 21)
-Vectors are very similar to ArrayList, and use an array to store data internally

-But Vector is thread-safe (aka synchronized) **safer but slower
    -Threads in a program are tasks that can run at the same time. What if two threads tried to add an item to a List?
    -Vector makes sure that two different parts of the program don't modify a Vector at once
    -But this makes it slower than ArrayList
    -Unless you are writing a program with more than one thread, use ArrayList
    -When we write GUI code, we'll use Vector

Vector works the same as Array List and Linked List in coding (except the initial name)

 */

package org.example.week4_lists;

public class vid_1_vector {
}

***Comparing ArrayList and LinkedList:

                                            ArrayList   LinkedList
                                            ---------   ----------
Adding to the end                           Very Fast   Fast
Adding in the middle                        Slow*       Fairly fast*
Adding at the start                         Very slow*  Fast
Searching for an item                       Fast*       Fast*
Removing an item from the end               Very Fast   Fast
Removing an item from the middle            Slow*       Fairly Fast*
Removing an item from the start             Slow*       Fast
Looping                                     Fast        Almost as fast
Storage needed in addition to data stored   Minimal     More than ArrayList

* = operation will get slower as list gets longer

ArrayList is more general purpose because we do a lot with data at the end of a list

LinkedLIst would be a better choice if you do a lot with middle data


***Classic Java Interview Questions ArrayList vs Linked List**

-Which one is faster to add data to?
-Adding to the the end? The start? The middle?
-Which one is faster to fetch data from?
-From the end? The start? The middle?
-Which one is faster to delete data from?
-From the end? The start? The middle?

-Which one takes up more storage space?
-Think about large datasets â€“ what if you have 1000 items? 1,000,000 items?

------

To check speed: use https://github.com/claraj/Java2545Examples/blob/main/src/main/java/week4_list_data_structure/Speed.java

****vid_2_Array_vs_Vector_with_example
/*
ArrayList vs. Vector?
Which one to choose for code? (slide 25)

-ArrayList is faster for most common tasks
-Adding/removing at the end of list, looping, searching for item in list
-Unless you will need to add/remove a lot of data from the start or middle of list - then LinkedList is faster
-LinkedList has some extra methods for adding/removing at start and at end
-Remember, other than creating the list, your code will be the same for both types of list

Create a List Syntax: (slide 26)
What type of List - ArrayList, LinkedList, Vector?
What type of data does it store? Strings, integer, doubles... ?
Give the List a name (cities)

List<String> cities = new ArrayList <>();


<> Generic types for Array Lists (and Linked lists and vectors)(slide 27):

-Almost all the lists you use will contain data of just one type
    -An ArrayList of names only contains Strings
    -An ArrayList of prices only contains Doubles
-So Java recommends you specify that a List can only contain one particular type of value
-The compiler will enforce that - only that type will be permitted = safer code
-And when you remove data from the List, you know what type it is

ArrayList for primitive types (slide 28)
-Use the Object names for the generic type
    -int -> Integer
    -boolean -> Boolean
    -double -> Double

List<Integer> numbers = new ArrayList <>();
List<Boolean> results = new ArrayList <>();
List<Double> prices = new ArrayList <>();

**String is an object type -- has method, so there are things that can be done (uppercase, lowercase, contains, etc.)

List of primitive types:
-Use the object names (Integer, Double etc.) for the generic type
-Can add primitive values (int, double etc.) to the List - Java compiler handles conversion between object and primitive value

List<Integer> numbers = new ArrayList <>():

numbers.add(100); //add int value

int first = numbers.get(0); //read value of index 0
System.out.println(first); //output: 100

 */

package org.example.week4_lists;

import java.util.ArrayList;
import java.util.List;

public class vid_2_Array_vs_Vector_with_example {
    //examples of adding data to lists:
    public static void main(String[] args) {
        List<Integer> classCodes = new ArrayList<>();
        classCodes.add(2545);
        classCodes.add(1150);
        classCodes.add(1250);

        System.out.println(classCodes);
        //output: [2545, 1150, 1250]

        //what size is this?
        System.out.println(classCodes.size());
        //output: 3

        //how to loop over a list of integers using int:
        for (int classCode: classCodes) {
            //^^classCode is the new variable you create
            //^^classCodes is the list at the top of this method
            System.out.println(classCode);
            //output:
            //2545
            //1150
            //1250
        }

        //same as above, only using Integer, and a new variable
        for (Integer classCodeAgain: classCodes) {
            //^^classCodeAgain is the new variable you create
            //^^classCodes is the list at the top of this method
            System.out.println(classCodeAgain);
            System.out.println("ITEC " + classCodeAgain);
            //output: (because it's a loop:)
            //2545
            //ITEC 2545
            //1150
            //ITEC 1150
            //1250
            //ITEC 1250

        }
    }
}

***vid_2_adding_at_beginning

package org.example.week4_lists;

import java.util.ArrayList;
import java.util.List;

public class vid_2_adding_at_beginning {
    public static void main(String[] args) {
        List<Integer> classCodes = new ArrayList<>();
        classCodes.add(2545);
        classCodes.add(1150);
        classCodes.add(1250);

        //when adding a list mate, you need to identify the index place and the contents:
        classCodes.add (0, 1425);

        System.out.println(classCodes);
        //output: [1425, 2545, 1150, 1250]

        //what size is this?
        System.out.println(classCodes.size());
        //output: 4

        //how to loop over a list of integers using int:
        for (int classCode: classCodes) {
            //^^classCode is the new variable you create
            //^^classCodes is the list at the top of this method
            System.out.println(classCode);
            //output:
            //1425
            //2545
            //1150
            //1250
        }

        //same as above, only using Integer, and a new variable
        for (Integer classCodeAgain: classCodes) {
            //^^classCodeAgain is the new variable you create
            //^^classCodes is the list at the top of this method
            System.out.println(classCodeAgain);
            System.out.println("ITEC " + classCodeAgain);
            //output: (because it's a loop:)
            //1425
            //ITEC 1425
            //2545
            //ITEC 2545
            //1150
            //ITEC 1150
            //1250
            //ITEC 1250

        }
    }
}

*****vid_3_removing_numbers_from_list_claras_code

//from: https://github.com/claraj/Java2545Examples/blob/main/src/main/java/week4_list_data_structure/RemovingIntFromArrayList.java

package org.example.week4_lists;

import java.util.ArrayList;
import java.util.List;

public class vid_3_removing_numbers_from_list_claras_code {

    public static void main(String[] args) {

        List<Integer> numbers = new ArrayList<>();

        numbers.add(100);   // Add int value

        // Add some more ints
        numbers.add(5);
        numbers.add(42);
        numbers.add(71);
        numbers.add(201);
        numbers.add(22);

        System.out.println(numbers);   // [100, 5, 42, 71, 201, 22]

        numbers.remove(5);

        System.out.println(numbers);  // [100, 5, 42, 71, 201].

        // What happened? The data 5 is still in the list.
        // The call to remove(5) removed the element at index 5.
        // 100 is an int, and remove() will try to remove element 100.
        // But there's only 5 elements in the list so the program will crash.

        // And if it doesn't crash - for example, code like
        // myList.remove(4);
        // may be expected this to remove the element containing the int 4
        // but it actually removes the element in position 4 of the ArrayList
        // which can cause hard-to-find bugs

        // So how do you remove an int from an ArrayList?

        // Convert your int to an Integer object, and then remove that.
        // This removes the element with the value 5

        numbers.remove(Integer.valueOf(5));
        System.out.println(numbers);        // [100, 42, 71, 201]

        // Why? There are two versions of remove().
        // One takes an int as an argument. The other takes an Object as the argument.
        // int is a primitive type, NOT an object. If the argument is an int, then remove() treats the argument as a
        // int representing an element number and attempts to remove the data at that element number.
        // If the argument to remove() is an Object, of any kind, then remove() treats that argument as data to search
        // the ArrayList for, and remove it if found.

        // So, if we want to search the ArrayList for an integer number and remove that, we need to turn that int into an Object.
        // All primitive types have a corresponding Object type. The Object type simply 'wraps' the primitive type.
        // So, there are int (primitive) and Integer (Object).
        // To remove an int element from an ArrayList, create an Integer from it with
        // Integer.valueOf(number)
        // and then use remove() to remove that Integer object.

        numbers.remove(Integer.valueOf(42));   // Removes the int 4 from the ArrayList.
        System.out.println(numbers);

        // Remove by element number and save the data removed

        int first = numbers.remove(0);

        System.out.println("The first element is " + first);   // The first element is 100
        System.out.println("And the list is now " + numbers);   // And the list is now [71, 201]

        int moreData = numbers.remove(1);
        System.out.println("Removed this element from the ArrayList: " + moreData);   // Removed this element from the ArrayList 201
        System.out.println("The ArrayList is now " + numbers);    //  The ArrayList is now [71]


        // If you try to remove an element that is not in the ArrayList, then the remove statement has no effect
        numbers.remove(Integer.valueOf(888));  // no effect on the ArrayList

        // remove(yourElement) actually returns a boolean value, which reflects whether an item was removed or not,
        // so you can use it to verify if the item was found and removed.

        System.out.println("Attempting to remove 100000");
        if (numbers.remove(Integer.valueOf(100000))) {
            System.out.println("The element 100000 was removed");
        } else {
            System.out.println("The element 100000 was not found in the list, so nothing was removed");
        }

    }
}

****vid_3_removing_from_list

package org.example.week4_lists;

import java.util.ArrayList;
import java.util.List;

public class vid_3_creating_adding_removing_length_of_lists {
    public static void main(String[] args) {

        List<String> classNames = new ArrayList<>();
        classNames.add("Programming Logic");
        classNames.add("Web Client Server");
        classNames.add("Project Management");
        classNames.add("Info Tech Concepts");
        System.out.println(classNames);
        //output: [Programming Logic, Web Client Server, Project Management, Info Tech Concepts]

        //Remove a known item (by value) from a list:
        classNames.remove("Project Management"); //internally will use .equals to find this
        System.out.println(classNames);
        //output:[Programming Logic, Web Client Server, Info Tech Concepts]

        //remove by position (by index):
        classNames.remove(0); //int primitive type
        System.out.println(classNames);
        //output: [Web Client Server, Info Tech Concepts]

        //how does Java know if you are asking to remove an object or an int?

        //how do you remove a number from a list?
        //**Go to vid_3_removing_numbers_from_list_claras_code

        //if you try and remove something that's not there, nothing happens
        classNames.remove("bobobobo"); //object
        System.out.println(classNames);
        //nothing happens: output: [Web Client Server, Info Tech Concepts]

        //in order to see if something was removed, add the boolean wasRemoved before: (false)
        boolean wasRemoved = classNames.remove("booboo");
        System.out.println(classNames + " " + wasRemoved);
        //output: [Web Client Server, Info Tech Concepts] false
        //false because it wasn't removed^^^

        //to see if something was removed (true): make a new boolean variable (wasRemoved)
        boolean wasRemovedInfoTechConcepts = classNames.remove("Info Tech Concepts");
        System.out.println(classNames + " " + wasRemovedInfoTechConcepts);
        //output: [Web Client Server] true
        System.out.println(classNames);
        //output: [Web Client Server]

        //to modify an element in the list: use .set(index place, contents)
        classNames.set(0, "Systems Analysis");
        System.out.println(classNames);
        //output: [Systems Analysis]

        //if index is out of range, the code won't run:
//        classNames.set(1, "Systems Analysis");
//        System.out.println(classNames);
        //output:
        // Exception in thread "main" java.lang.IndexOutOfBoundsException: Index 1 out of bounds for length 1
        //	at java.base/jdk.internal.util.Preconditions.outOfBounds(Preconditions.java:100)
        //	at java.base/jdk.internal.util.Preconditions.outOfBoundsCheckIndex(Preconditions.java:106)
        //	at java.base/jdk.internal.util.Preconditions.checkIndex(Preconditions.java:302)
        //	at java.base/java.util.Objects.checkIndex(Objects.java:385)
        //	at java.base/java.util.ArrayList.set(ArrayList.java:470)
        //	at org.example.week4_lists.vid_3_creating_adding_removing_length_of_lists.main(vid_3_removing_from_list.java:56)
        //Process finished with exit code 1

        //how to find if an element is in a condition: .contains:
        if (classNames.contains("C# Programming")) {
            System.out.println("The list does contain C#");
        } else {
            System.out.println("The list does NOT contain C#");
            //output: The list does NOT contain C#
        }

        //use a variable with the contains method (.contains) to find if an element is in a condition: (doesn't)
        String search = "C# Programming";
        //use the variable ^^^ "search" in the contains method:
        if (classNames.contains(search)) {
            //use the variable in the output as well:
            System.out.println("The list does contain " + search);
        } else {
            System.out.println("The list does NOT contain " + search);
            //output: The list does NOT contain C# Programming
        }

        //use a variable with the contains method (.contains) to find if an element is in a condition: (does)
        String searchAgain = "Systems Analysis";
        //use the variable ^^^ "search" in the contains method:
        if (classNames.contains(searchAgain)) {
            //use the variable in the output as well:
            System.out.println("The list does contain " + searchAgain);
        } else {
            System.out.println("The list does NOT contain " + searchAgain);
            //output: The list does contain Systems Analysis
        }

        //to find the length of a list, use the size method (.size):
        System.out.println(classNames.size());
        //output: 1

        //Remove everything from the list using the clear method (.clear):
        classNames.clear();
        System.out.println(classNames);
        //output: []

        //print size again:
        System.out.println(classNames.size()); //returns length of list:
        //output: 0

        System.out.println(classNames.isEmpty()); //returns true/false
        //output: true
    }
}

****vid_4_looping_over_lists

package org.example.week4_lists;

import java.util.ArrayList;
import java.util.List;

public class vid_4_looping_over_lists {
    public static void main(String[] args) {

        List<String> classNames = new ArrayList<>();
        classNames.add("Programming Logic");
        classNames.add("Web Client Server");
        classNames.add("Project Management");
        classNames.add("Info Tech Concepts");
        System.out.println(classNames);
        //output: [Programming Logic, Web Client Server, Project Management, Info Tech Concepts]

        //How do you remove data from a list? Use an "enhanced for loop"
        //this will represent every item in the list in turn:

        //(don't use the word "class" as a variable name (here used "name").)
        for (String name: classNames) {
            System.out.println(name);
            //output:
            //Programming Logic
            //Web Client Server
            //Project Management
            //Info Tech Concepts
//            classNames.remove(0); //will result in an error because the enhanced loop
            //this can't be done with this type of loop
        }
        System.out.println("************1"); //added to see where the next thing starts:

        //can write classic for loops:
        //if you need to know where you are in the loop AS WELL AS what the data is use this:
        for (int i = 0; i < classNames.size () ; i++) {
            //this one includes the index, enhanced for loops don't
            //use the get to get each item:
            System.out.println(classNames.get(i));
            //output: (exactly the same as above):
            //Programming Logic
            //Web Client Server
            //Project Management
            //Info Tech Concepts

            //not a good way to remove an element from a loop:
            //remove element 0 ("Programming Logic") from the array
//            classNames.remove(0);
            //output: (weirdly only prints two things from the list?)
            //Programming Logic
            //Project Management
        }
        System.out.println("************2");
        //First: remove all elements from the loop
        //vvv read as "while NOT (!) classNames is empty", or "while classnames is not empty":
        while (!classNames.isEmpty()) {
            String name = classNames.remove(0);
            System.out.println(name);
            //if you remove something, this will return which value was removed.
            //output:
            //Programming Logic
            //Web Client Server
            //Project Management
            //Info Tech Concepts
        }
        System.out.println(classNames);
        //output: []
        //empty list because everything has been removed:


    }
}

****vid_4_array_loop_add_enhanced_for_loop

package org.example.week4_lists;

public class vid_4_array_loop_add {
    public static void main(String[] args) {
        String[] days = {"Mon", "Tues", "Wed", "Thurs", "Fri"};
        //days is an array
        //this loop vvv will look at each day in turn:
        //this is an enhanced for loop and won't allow you to know *where* you are
        // (or said differently: you won't be able to know what the index is if you use an enhanced "for loop")
        for (String day: days) {
            //verify that it loops through all the things in the array:
            System.out.println(day);
            //output:
            //Mon
            //Tues
            //Wed
            //Thurs
            //Fri
        }

    }
}


****vid_5_loops_with_user_input_task_list_program

package org.example.week4_lists;

import java.util.ArrayList;
import java.util.List;

import static input.InputUtils.stringInput;

public class vid_5_loops_with_user_input_task_list_program {
    public static void main(String[] args) {
        List<String> todoList = new ArrayList<>();

        while (true) {
            String data = stringInput("Please type a task you need to do, or press Enter to quit");
//            if (data.length() == 0) { //if use just presses Enter, the length of the text is 0
                if (data.isEmpty()) { //could use this instead of this ^^^
                break;
            }
            todoList.add(data);
        }
        System.out.println("Thank you, here are all of the tasks you entered:");

        //this is an enhanced "for loop":
        for (String input : todoList) {
            System.out.println(input);
            //output:
            //Thank you, here are all of the tasks you entered:
            //do laundry
            //wash dishes
            //rake leaves
            //clean bathroom
        }
    }
}

****vid_5_your_turn_use_task_list_and_add_things

/* start with: vid_5_loops_with_user_input_task_list_program
(slide 44)

-Add a check to prevent duplicate items added
    -use contains()
    -print a message to the user
    -don't add the item to the list

-Print the total number of tasks

 */

package org.example.week4_lists;

import java.util.ArrayList;
import java.util.List;

import static input.InputUtils.stringInput;

public class vid_5_your_turn_use_task_list_and_add_things {
    public static void main(String[] args) {
        List<String> todoList = new ArrayList<>();

        //how does the below "String data" interact with the above "todoList"? There is nothing tethering it together? No words match
        //Is it just because it's within the same method that the computer knows? <confused> (I think this is my main block
        //throughout this class. I don't know when the computer knows and when it doesn't.) I can pattern match and
        //make both "sides" of the code flow if I know the "pivot point" or how they talk to each other.

        while (true) {
            String data = stringInput("Please type a task you need to do, or press Enter to quit");
//            if (data.length() == 0) { //if use just presses Enter, the length of the text is 0
            if (data.isEmpty()) { //could use this instead of this ^^^
                break;
            }
//            if (todoList.contains(data)) {
                //when adding ignores case, this if statement ^^^ changes to this:
            if (containsIgnoresCase(todoList, data)) {
                System.out.println("This list already contains this list item, try again");
            } else {
                todoList.add(data);
            }
        }
            System.out.println("Thank you, here are all of the tasks you entered:");

            //this is an enhanced "for loop":
            for (String input : todoList) {
                System.out.println(input);
            }
        System.out.println("You have entered " + todoList.size() + " items to your To Do list.");
            //output: (note: I accidentally added a space after one of the "dance" terms, so if this were for real, would
            //need to cut spaces out of inputs:
        //Thank you, here are all of the tasks you entered:
        //sing
        //dance
        //dance
        //sleep
        //You have entered 4 items to your To Do list.
        }
        //write a new method to ignore case on inputs:
        public static boolean containsIgnoresCase (List<String> list, String data) {
        //test to see if the array list called "list" contains some data called "data"
            // (general method to find if something contains something else ignoring case:
            for(String item: list) {
                if (item.equalsIgnoreCase(data)) {
                    //if, after ignoring case, the item is found in the list:
                    return true;
                }
            }
            //if we don't find the item after ignoring case, return false:
            return false;
            //output: (after ignoring case)
            //Please type a task you need to do, or press Enter to quit
            //dance
            //Please type a task you need to do, or press Enter to quit
            //DANCE
            //This list already contains this list item, try again
            //Please type a task you need to do, or press Enter to quit
            //sing
            //Please type a task you need to do, or press Enter to quit
            //SINg
            //This list already contains this list item, try again
            //Please type a task you need to do, or press Enter to quit
            //play
            //Please type a task you need to do, or press Enter to quit

            //Thank you, here are all of the tasks you entered:
            //dance
            //sing
            //play
            //You have entered 3 items to your To Do list.
        }

    }

****vid_6_lists_and_loops_more_ways

/*
Counting copies of items in a list: (slide 45)

-Create a list of internet speeds for every hour in a 12-hour period
-Print the speeds using a regular for loop, to access the index as well as the data
-How many times was the speed 0?

 */

package org.example.week4_lists;


import java.util.ArrayList;
import java.util.List;

import static input.InputUtils.positiveDoubleInput;

public class vid_6_lists_and_loops_more_ways {
    public static void main(String[] args) {

        List<Double> speeds = new ArrayList<>();

        int totalHours = 12;

        //regular for loop: (to gather data)
        for (int hour = 0; hour < totalHours; hour++) {
            double speed = positiveDoubleInput("Enter the internet speed for hour " + hour);
            speeds.add(speed);
        }
        //print out all the speeds:
        System.out.println("All the speeds are:");

        //regular for loop: (because want to print the hour as well as the data:
        for (int hour = 0; hour < speeds.size(); hour++) {
            double speed = speeds.get(hour);
            System.out.printf("Hour: %d Speed %.2f\n", hour, speed);
        }
        //count the number of times the speed was 0 (or where the internet went down)

        //enhanced for loop: (counting the number of times the speed was equal to zero:
        int zeroCount = 0;
        for(double speed: speeds) {
            if (speed == 0) {
                zeroCount++;
            }
        }
        System.out.println("Number of times speed was 0 (no connection) : " + zeroCount);

        //Remove all zeros
        while (speeds.contains(0.0)) {
            speeds.remove (0.0);
        }
        //Questions:
        //why remove 0.0 instead of 0?
        // (my answer: because it's a double, not int?)

        //why is a while loop used instead of a for loop?
        //(my answer: while will only trigger when the thing is happening (speed =0), so less code)

        System.out.println(speeds);

        //Find the average of all the speeds:
        double total = 0;
        for (double speed: speeds) {
            total = total + speed;
        }
        double average = total / speeds.size ();

        System.out.println("The average speed is " + average);
    }
}

//input/output:
//Enter the internet speed for hour 0
//5
//Enter the internet speed for hour 1
//6
//Enter the internet speed for hour 2
//7
//Enter the internet speed for hour 3
//0
//Enter the internet speed for hour 4
//0
//Enter the internet speed for hour 5
//0
//Enter the internet speed for hour 6
//6
//Enter the internet speed for hour 7
//7
//Enter the internet speed for hour 8
//8
//Enter the internet speed for hour 9
//9
//Enter the internet speed for hour 10
//0
//Enter the internet speed for hour 11
//
//Error - please enter a positive number.
//Enter the internet speed for hour 11
//4
//All the speeds are:
//Hour: 0 Speed 5.00
//Hour: 1 Speed 6.00
//Hour: 2 Speed 7.00
//Hour: 3 Speed 0.00
//Hour: 4 Speed 0.00
//Hour: 5 Speed 0.00
//Hour: 6 Speed 6.00
//Hour: 7 Speed 7.00
//Hour: 8 Speed 8.00
//Hour: 9 Speed 9.00
//Hour: 10 Speed 0.00
//Hour: 11 Speed 4.00
//Number of times speed was 0 (no connection) : 4
//[5.0, 6.0, 7.0, 6.0, 7.0, 8.0, 9.0, 4.0]
//The average speed is 6.5

***vid_6_collection_objects

/*
LinkedList, ArrayList  and Vector are Collection objects (slide 48)

-They also have the type Collection
    -They actually implement an interface called Collection
    -For now â€“LinkedList, ArrayList and Vector are also Collection objects

-Java provides a class called ---Collections--- which has several utility methods that operate
    on Collection objects â€“ sort, max, min, shuffle, reverse, copy, fillâ€¦
https://docs.oracle.com/en/java/javase/14/docs/api/java.base/java/util/Collections.html


 */

package org.example.week4_lists;

import java.util.ArrayList;
import java.util.Collections;
import java.util.List;

public class vid_6_collection_objects {

        //Clara's Collections methods from:
        // https://github.com/claraj/Java2545Examples/blob/main/src/main/java/week4_list_data_structure/CollectionsMethods.java
//        package week4_list_data_structure;

/*
 *  Collections utility methods for ArrayList and LinkedList
 */
        public class CollectionsMethods {

            public static void main(String[] args) {

                List<String> animals = new ArrayList<>();

                animals.add("Cat");
                animals.add("Zebra");
                animals.add("Fish");
                animals.add("Bird");
                animals.add("Fish");    // I meant to add "Fish" twice

                System.out.println("Original animals list: " + animals);

        // Sort into order - only if the type of data in the list is sortable
                Collections.sort(animals);
                System.out.println("Sorted animals list: " + animals);

        //replace all:
                Collections.replaceAll(animals, "Fish", "Shark");  // Replace all "Fish" elements with "Shark"
                System.out.println("Replace \"Fish\" with \"Shark\", now the list is: " + animals);

        //reverse:
                Collections.reverse(animals);   // reverse the order of the list
                System.out.println("In reverse order: " + animals);

        //shuffle: put in random order
                Collections.shuffle(animals);   // put elements in random order
                System.out.println("Shuffled list: " + animals);

        //minimum (for strings first thing alphabetically:)
                // Display the minimum value = the lowest value = for strings, the first in the alphabet
                System.out.println("First in the alphabet: " + Collections.min(animals));

        //maximum (for strings, last thing alphabetically:)
                // Display the maximum value = the lowest value = for Strings, the last in the alphabet
                System.out.println("Last in the alphabet: " + Collections.max(animals));

        //fill whole array with one thing:
                Collections.fill(animals, "Koala");   // Fill the entire ArrayList with "Koala"
                System.out.println("Replaced every element with Koala and now the list is: " + animals);

            }
        }
    }


******vid_6_another_list_creation_way

package org.example.week4_lists;

import java.util.List;

public class vid_6_another_list_creation_way {
    public static void main(String[] args) {

        //how to create a list without adding individually to it:
        //however---you can't change this list
        List<String> animals = List.of("Cat", "Bird", "Zebra");

        System.out.println(animals);
        //output: [Cat, Bird, Zebra]

        animals.add ("Frog"); //this won't work because the initial list can't be modified
        //
        animals.remove("Cat"); //this also won't work because the initial list can't be modified

        //output: [Cat, Bird, Zebra]
        //error parts because can't add or remove after making a fast list via "List.of"
        // Exception in thread "main" java.lang.UnsupportedOperationException
        //	at java.base/java.util.ImmutableCollections.uoe(ImmutableCollections.java:142)
        //	at java.base/java.util.ImmutableCollections$AbstractImmutableCollection.add(ImmutableCollections.java:147)
        //	at org.example.week4_lists.vid_6_another_list_creation_way.main(vid_6_another_list_creation_way.java:15)
        //
        //Process finished with exit code 1
    }
}

****vid_7_random_number_refresh

package org.example.week4_lists;

import java.util.Random;

public class vid_7_random_number_refresh {
    public static void main(String[] args) {

    //make a random number generator (rnd is often used)
        Random rnd = new Random();

    //# between 0-9
        int randomNumber = rnd.nextInt(10);

    //random number between 1 and 10:
        int randomNumberBetween1and10 = rnd.nextInt(10) + 1;

        System.out.println(randomNumber);
        //output: 5

        System.out.println(randomNumberBetween1and10);
        //output: 10

        //will add the output:
        System.out.println(randomNumber + randomNumberBetween1and10);
        //output: 15

        System.out.println(randomNumber + " " + randomNumberBetween1and10);
        //output: 8 7

    }
}


****vid_7_random_refresh_from_powerpoint
//(slide 51)

package org.example.week4_lists;

import java.util.Random;

public class vid_7_random_refresh_from_powerpoint {
    public static void main(String[] args) {
        //create a Random object - this is the random number generator:
        Random random = new Random();

        int randomNumber = random.nextInt(10); //generate a number between 0 and 9;
        System.out.println("Random secret number between 0 and 9 = " + randomNumber);

        int anotherRandomNumber = random.nextInt(1000); //Generate a random number between 0 and 999
        System.out.println("Another random number between 0 and 999 = " + anotherRandomNumber);

        ///What if you want a random number between 1 and 10? (instead of 0 to 9?)
        //generate a random number between 0 and 9, then add 1 to it, so 0 is 1, 1 is 2, etc.

        int andAnotherRandomNumber = random.nextInt(10) + 1;
        System.out.println("And another random number between 1 and 10 = " + andAnotherRandomNumber);

        //random number between 5 and 12:
        //generate a random number from 0-7, then add 5 to it:
        int yetAnotherRandomNumber = random.nextInt(7) + 5;
        System.out.println("Yet another random number between 5 and 12 = " + yetAnotherRandomNumber);

        //output:
        //Random secret number between 0 and 9 = 8
        //Another random number between 0 and 999 = 646
        //And another random number between 1 and 10 = 6
        //Yet another random number between 5 and 12 = 6

        //rerun output:
        //Random secret number between 0 and 9 = 3
        //Another random number between 0 and 999 = 406
        //And another random number between 1 and 10 = 5
        //Yet another random number between 5 and 12 = 10
    }
}

****vid_7_your_turn_random_numbers_guest_list_program

/*Instructions for Guest list program:  slides (51-54)

1. Create an empty list.
2. Use a while loop to ask the user for the names of guests. They will enter the names,
    one by one. Add each name to the list. When the user is done, they should press enter to
    stop adding names.

    -Your program should reject duplicate names. Don't add a name to the list if that name is
        already in the list.
3. Sort the names in alphabetical order
4. Print all the names entered
5. Ask the user if they would like to delete any names. Use a while loop so the user can delete as many
    names as needed. You can either use remove to delete by name, or delete by index. You can decide what
    the user should do to end this loop.
6. Print all the names again
7.Print the total number of guests
8.Comment your code!
9. Challenge: select a guest at random to win a prize. Print their name
10. Challenge: add validation to your program so it doesn't crash if the user enters invalid data.
    Places to add validation:
Check for valid names if removing by name; or check for valid indexes if removing names by index
End part 4's while loop if the user has removed all of the names from the guest list.
 */
// double checked from: https://github.com/claraj/Java2545Examples/blob/main/src/main/java/week4_list_data_structure/GuestList.java


package org.example.week4_lists;

import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import java.util.Random;

import static input.InputUtils.*;
import static org.example.week4_lists.vid_5_your_turn_use_task_list_and_add_things.containsIgnoresCase;
import static org.example.week4_lists.vid_7_claras_code_for_guest_list.printGuestNames;
import static org.example.week4_lists.vid_7_claras_code_for_guest_list.selectPrizeWinner;

public class vid_7_your_turn_random_numbers_guest_list_program {
    public static void main(String[] args) {
//        reference: my week_4 vid_5_loops_with_user_input_task_list_program
        //names of the guest:
        //1. create an empty list:
        List<String> guestList = new ArrayList<>();

//        2a. Use a while loop to ask the user for the names of guests:
        while (true) {
            String name = stringInput("Please type the name of your next guest, or press enter to finish:");
            //2b. When the user is done, they should press enter to stop adding names.
            if (name.isEmpty()) {
                break;
            }
            //goes to bottom (below main method) 2c. to check for duplicates:
            if (containsIgnoresCase(guestList, name)) {
                System.out.println("You already added " + name);
            } else {
                System.out.println("Adding " + name + " to list.");
                guestList.add(name);
            }

        }
        //3. Sort the names in alphabetical order:
        Collections.sort(guestList);
//        System.out.println("Thank you, here are all of the names you added:");
        //output: Thank you, here are all of the names you added:
        //[bob, cathy]

        //print out the guest names:
        printGuestNames(guestList);

        //remove guests if needed:
        //yesNoInput will return true if they do want to remove guests and false if they don't
        while (yesNoInput("Do you want to remove any guests?")) {
            System.out.println("Here are all the guests:");
            printGuestNames(guestList);

            if (guestList.isEmpty()) {
                System.out.println("There are no more guests to remove.");
                break;
            }
            int index = positiveIntInput("Enter the number beside the guest you want to remove:");
            index = (index - 1); //or index--;
            //make sure the index is less than the size of the array list:
            if (index < guestList.size()) {
                String removedGuest = guestList.remove(index);
                //print confirmation:
                System.out.println("Removed guest " + removedGuest);
            } else {
                System.out.println("Error - please enter a valid number of a guest.");
            }
        }
        //4. Print all the names entered:
        //4b. refine the way of printing by making a new method
//        System.out.println(guestList);
        printGuestNames(guestList);
        System.out.println("The number of guests in the guest list is " + guestList.size());

        //9. challenge select a guest at random to win prize:
        selectPrizeWinner(guestList);
    }

    public static void selectPrizeWinner(List<String> guests) {
        if (guests.isEmpty()) {
            System.out.println("Warning - There are no more guests to win.");
            return;
        }
        //clara's code: from https://github.com/claraj/Java2545Examples/blob/main/src/main/java/week4_list_data_structure/GuestList.java
        //line 72-79
        Random rng = new Random();
        int randomGuestIndex = rng.nextInt(guests.size());  // 0, 1, 2, 3

        //save the name of the guest that won a prize in a variable:
        String prizeWinner = guests.get(randomGuestIndex);

        System.out.println("Guest number " + (randomGuestIndex + 1) + " " + prizeWinner + " wins a prize!");
    }

        //Clara writes another method to print guest names:
        //void method, won't return anything, only output data
        public static void printGuestNames(List <String> guests) {

            System.out.println("Your guest list is: \n");

            if (guests.isEmpty()) {
                System.out.println("There are no guests in the list.");
            } else {
                //loop through the names so each guest is given a number: (using regular for loop)
                for (int i = 0; i < guests.size(); i++) {
                    System.out.println((i + 1) + ": " + guests.get(i));
                }
            }
        }


        //reference: my week 4: vid_5_your_turn_use_task_list_and_add_things
        //2c. Your program should reject duplicate names: (place after main method)
        public static boolean containsIgnoresCase (List < String > list, String data){
            for (String item : list) {
                if (item.equalsIgnoreCase(data)) {
                    //if, after ignoring case, the item is found in the list:
                    return true;
                }
            }
            return false;
        }
    }

//input/output: Please type the name of your next guest, or press enter to finish:
//b
//Adding b to list.
//Please type the name of your next guest, or press enter to finish:
//c
//Adding c to list.
//Please type the name of your next guest, or press enter to finish:
//d
//Adding d to list.
//Please type the name of your next guest, or press enter to finish:
//
//Your guest list is:
//
//1: b
//2: c
//3: d
//Do you want to remove any guests? Y/N?
//y
//Here are all the guests:
//Your guest list is:
//
//1: b
//2: c
//3: d
//Enter the number beside the guest you want to remove:
//1
//Removed guest b
//Do you want to remove any guests? Y/N?
//y
//Here are all the guests:
//Your guest list is:
//
//1: c
//2: d
//Enter the number beside the guest you want to remove:
//1
//Removed guest c
//Do you want to remove any guests? Y/N?
//y
//Here are all the guests:
//Your guest list is:
//
//1: d
//Enter the number beside the guest you want to remove:
//1
//Removed guest d
//Do you want to remove any guests? Y/N?
//y
//Here are all the guests:
//Your guest list is:
//
//There are no guests in the list.
//There are no more guests to remove.
//Your guest list is:
//
//There are no guests in the list.
//The number of guests in the guest list is 0
//Warning - There are no more guests to win.
//
//Process finished with exit code 0

****vid_7_claras_code_for_guest_list****
//clara's code from: https://github.com/claraj/Java2545Examples/blob/main/src/main/java/week4_list_data_structure/GuestList.java
package org.example.week4_lists;

import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import java.util.Random;

import static input.InputUtils.*;

public class vid_7_claras_code_for_guest_list {
    public static void main(String[] args) {

        List<String> guestList = new ArrayList<>();

        // Collect names and add to guest list

        while (true) {
            String name = stringInput("Enter name of guest or enter to quit");

            if (name.isEmpty()) {  // if user presses enter, name will be an empty string
                break;
            }

            if (containsIgnoresCase(guestList, name)) {    // ignore duplicates
                System.out.println("You already added " + name);
            } else {
                System.out.println("Adding " + name + " to list.");
                guestList.add(name);
            }
        }

        Collections.sort(guestList); // sort alphabetically

        printGuestNames(guestList);

        // Remove guests from list if needed

        while (yesNoInput("Do you want to remove any guests?")) {
            System.out.println("Here are all the guests");
            printGuestNames(guestList);

            // Stop the loop if there are no more guests to remove
            if (guestList.isEmpty()) {
                System.out.println("There are no more guests to remove");
                break;
            }

            int index = positiveIntInput("Enter the number of the guest to remove");
            index--;   // the guests are printed in a 1-based list, so 1, 2, 3 for three guests. Subtract 1 to get 0-based index
            if (index < guestList.size()) {   // verify index is in range to avoid crash
                String removedGuest = guestList.remove(index);
                System.out.println("Removed guest " + removedGuest);
            } else {
                System.out.println("Error - please enter a valid number of a guest");
            }
        }

        printGuestNames(guestList);

        System.out.println("The number of guests in the guest list is " + guestList.size());

        selectPrizeWinner(guestList);
    }

    public static void selectPrizeWinner(List<String> guests) {

        if (guests.isEmpty()) {
            System.out.println("Warning - no guests - no-one to win the prize");
            return;
        }

        Random rng = new Random();
        int randomGuestIndex = rng.nextInt(guests.size());  // 0, 1, 2, 3

        String prizeWinner = guests.get(randomGuestIndex);

        System.out.println("Guest number " + (randomGuestIndex + 1) + " "
                + prizeWinner + " wins a prize!");
    }


    public static void printGuestNames(List<String> guests) {

        System.out.println("Your guest list is: \n");

        if (guests.isEmpty()) {
            System.out.println("There are no guests in the list.");
        } else {
            for (int i = 0; i < guests.size(); i++) {
                System.out.println((i + 1) + ": " + guests.get(i));
            }
        }
    }

    public static boolean containsIgnoresCase(List<String> list, String data) {
        for (String item : list) {
            if (item.equalsIgnoreCase(data)) {
                return true;
            }
        }
        return false;
    }
}
