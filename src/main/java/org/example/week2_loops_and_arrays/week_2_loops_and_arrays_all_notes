vid_1-----------------------------

//all Java2545 examples can be found here: https://github.com/claraj/Java2545Examples

//Constants
    -have fixed values

//loops in Java: (how to repeat things)
   - for loops
        **for doing something a certain number of times
        1. need a loop counter (count the number of repeats
        2. Decide on what number the loop counter will start
        3. specify condition when the loop will stop
            (regularly when the counter gets to a specific value)
        4. what amount the counter changes after each iteration
        5. Doesn't have to be whole numbers or positive (could count backwards and/or use doubles or floats

   - while loops
        **repeating while something is true (or false) until something is true (or false)
        **variant: "do loop"

// arrays in Java:
    **like a list in Python
    -fixed length

// Debugger in Intellij


Check your InputUtils file from last week
    (/Users/chriskulhanek/IdeaProjects/JavaLectureCodeExamples/src/main/java/org/example/week1_If_Statements/TestInput.java)

vid_1_HelloForLoop file

for (int x = 0 ; x < 10 ; x++) {
            //print value of x:
            //when it gets to 10, the loop will stop because 10 is NOT less than 10
            System.out.println(x);
            //output:
            //0
            //1
            //2
            //3
            //4
            //5
            //6
            //7
            //8
            //9

vid_2_January_day_loop----------------------

public class vid_2_January_day_loop {
    public static void main(String[] args) {
        System.out.println("Here are all the dates in January");
        for (int day = 1 ; day <= 31 ; day ++) {
            System.out.println("January " + day);
            //output:
            //Here are all the dates in January
            //January 1
            //January 2
            //etc. to January 31

** include else if within for loops:
// question: can you add 'st' to 1, 'nd' to 2, 'rd' to 3, 'th' to 4,5,6,7,8,9
        {
            System.out.println("Here are all the dates in January");
            for (int day = 1; day <= 31; day++) {
                if (day == 1 || day == 21 || day == 31) {
                    System.out.println("January " + day + "st");
                } else if (day == 2 || day == 22) {
                    System.out.println("January " + day + "nd");
                } else if (day == 3 || day == 23) {
                    System.out.println("January " + day + "rd");
                } else {
                    System.out.println("January " + day + "th");

**Count by 2:
for (int x = 0 ; x < 10 ; x = x + 2) {
    System.out.println(x);
}

**Count by 5:
for (int x = 10 ; x < 100 ; x = x + 5) {
    System.out.println(x);
}

**Count down from 5 to 0 using x = x - 1:
for (int x = 5 ; x >= 0 ; x = x - 1) {
    System.out.println(x);
}

**Count down from 5 to 0 using x--:
for (int x = 5 ; x >= 0 ; x--) {
    System.out.println(x);
}

vid_2_your_turn_print_numbers:----------------

public class vid_2_your_turn_print_numbers {
    public static void main(String[] args) {
        //write a loop that prints the numbers 1, 2, 3, 4, 5
        for (int num = 1;  num < 6; num++) {
            System.out.println(num);
            //output:
            //1
            //2
            //3
            //4
            //5
        }
        //Write a loop that prints the NASA rocket countdown: the numbers 10, 9, 8, ...  to 0
        for (int countdown = 10; countdown > -1; countdown--) {
            System.out.println(countdown);
            //output:
            //10
            //9
            //8
            //7
            //6
            //5
            //4
            //3
            //2
            //1
            //0
        }
        //You just bought a used car that has 150,000 miles. You plan on getting an oil change
        // every 3,000 miles. Use a loop to calculate and print the mileages for the
        // next 8 oil changes (153000, 158000, 161000)

        //didn't work:
//        for (int x = 150000 ; x < 8 ; x = x + 3000){
//            System.out.println(x);

        //Clara's solution:
        int mileage = 150000;
        int interval = 3000;

        for (int oilChange = 0 ; oilChange < 8; oilChange++){
            mileage = mileage + interval;
            System.out.println("Get oil change at " + mileage + " miles");
            //output:
            //Get oil change at 153000 miles
            //Get oil change at 156000 miles
            //Get oil change at 159000 miles
            //Get oil change at 162000 miles
            //Get oil change at 165000 miles
            //Get oil change at 168000 miles
            //Get oil change at 171000 miles
            //Get oil change at 174000 miles
        }
        int mileage2 = 150000;
        int interval2 = 3000;

        for (int miles = mileage2; miles <(mileage2 + 8 * interval2); miles +=interval2) {
            System.out.println("Get oil change another way at " + miles + " miles");
            //not quite right, but this is the solution in Clara's video:
            //output:
            //Get oil change another way at 150000 miles
            //Get oil change another way at 153000 miles
            //Get oil change another way at 156000 miles
            //Get oil change another way at 159000 miles
            //Get oil change another way at 162000 miles
            //Get oil change another way at 165000 miles
            //Get oil change another way at 168000 miles
            //Get oil change another way at 171000 miles

vid_2_test_score_average_for_loop

import static input.InputUtils.doubleInput;

public class vid_2_test_score_average_for_loop {
    public static void main(String[] args) {
        //calculate the average of 5 test scores

        int numberOfTests = 5;
        double testScore;
        double testScoreSum = 0.0;
        double testScoreAverage;

        for (int test = 1; test <= numberOfTests ; test++) {
            testScore = doubleInput("Enter test score #" + test);
            testScoreSum = testScoreSum + testScore;
        }
        testScoreAverage = testScoreSum / numberOfTests;
        System.out.println("Average score = " + testScoreAverage);
        //question/output, (repeat x4):
        // Enter test score #1
        //30
        //Enter test score #2
        //24
        //Enter test score #3
        //90
        //Enter test score #4
        //45
        //Enter test score #5
        //98
        //Average score = 57.4
    }
}

vid_2_your_turn_bus_expenses_calculator

**TRICK: option + enter when import.inputUtils static shows up***

//print (without ln) will print one right after each other)
                System.out.print("*");
                output (within a loop:):
                *****

    int numberOfDays = 7;
        double total = 0;

        for (int day = 1; day <= numberOfDays; day++){
            double amountSpent = doubleInput("What did you spend " +
                    "on bus fare on day " + day+ "?");
            //add amount spent on one day onto the total:
            total = total + amountSpent; //or total +=amountSpent
        }
        System.out.println("Total spent on bus fare for the week = $" + total);
        //string formatting: System.out.printf("Total for the week = $%.2f", total);
        //questions/input/output:
        // What did you spend on bus fare on day 1?
        //1
        //What did you spend on bus fare on day 2?
        //2.3
        //What did you spend on bus fare on day 3?
        //4
        //What did you spend on bus fare on day 4?
        //
        //Error - please enter a number.
        //What did you spend on bus fare on day 4?
        //3
        //What did you spend on bus fare on day 5?
        //2
        //What did you spend on bus fare on day 6?
        //4.44
        //What did you spend on bus fare on day 7?
        //5.9
        //Total spent on bus fare for the week = $22.64

    }
}

//vid_2_square_of_stars_clara_code
    public static void main(String[] args) {

        // Display a square of *

//        //The outer loop prints one row per loop repeat
//        for (int x = 0 ; x < 5 ; x++ ) {
//
//            //Inner for loop. For each row, print a star 5 times
//            for (int y = 0 ; y < 5; y++) {
//                //Notice System.out.print - not println. This doesn't add the newline
//                //at the end of the output, so all the stars are on the same line
//
//                //print (without ln) will print one right after each other)
//                System.out.print("*");
//            }
//
//            //And then move to the next line
//            System.out.println();
//            //output:
//            //*****
//            //*****
//            //*****
//            //*****
//            //*****
        //Challenge questions:
        //Can you modify the previous program to display a square of any size?
        //  The user should be able to enter the square size
        //Hint: use a variable to represent the square size
        //Can you modify it to display a square of any character of the user's choice?
        // Display a square of *

        //The outer loop prints one row per loop repeat

        int widthOfSquare = positiveIntInput("How many stars wide would you like your shape?");
        int lengthOfSquare = positiveIntInput("How many stars long would you like your shape?");

        for (int x = 0; x < lengthOfSquare; x++) {

            //Inner for loop. For each row, print a star 5 times
            for (int y = 0; y < widthOfSquare; y++) {
                //Notice System.out.print - not println. This doesn't add the newline
                //at the end of the output, so all the stars are on the same line

                //print (without ln) will print one right after each other)
                System.out.print("*");
            }

            //And then move to the next line
            System.out.println();

            //question/input/output:
            //How many stars wide would you like your shape?
            //18
            //How many stars long would you like your shape?
            //4
            //******************
            //******************
            //******************
            //******************

vid_3_while_loops

   public static void main(String[] args) {

        // This is an infinite while loop - there's no way for the condition to become false,
        // so it will run forever.
        // This is a deliberate infinite while loop, but it's very possible to accidentally
        // write an infinite while loop.

        while (true) {
            //this is an error because the program sees this is an infinite loop

            System.out.println("This is an infinite while loop!");

        }
        //output:
        // This is an infinite while loop!
        //This is an infinite while loop!
        //
        //***needed to press stop to finish**
        //Process finished with exit code 130 (interrupted by signal 2:SIGINT)

        // If you accidentally write an infinite while loop
        // your program will run forever!
        // But no problem - press Control+C to stop it running,
        // or press the red square stop button at the left of the IntelliJ output console.
        // And then look at your code to see what happened.

        // Make sure you have a way for the condition to become false.
        // The condition usually has a variable in it, so somewhere in the loop body,
        // there should be a variable or variables that can change to make the condtion
        // false, and to stop the loop.

        // You can also use a break statement - see other examples.

    }

}

vid_3_while_loop_password_claras_code

   public static void main(String[] args) {

            String secretPassword = "kittens";

            System.out.println();
            //userPassword is created here:
            String userPassword = stringInput("Enter the password");

            //make new variable:
            int maxGuesses = 5;

            //Always use the .equals() method to check if two Strings have the exact same characters

            //Before we let the user in, we need to check that the password is correct
            //This loop will repeat while the password is NOT "kittens", our secretPassword

        //read as NOT userPassword equals secretPassword, or while the userPassword is different than the secret password
            while ( ! userPassword.equals(secretPassword) && maxGuesses > 1) {
                // The user got the password wrong. Print an error message
                System.out.println("Password incorrect, access denied!");
                // And ask user to try again.
                System.out.println("Try again");

                // UPDATED password:Replace userPassword with the user's next attempt.
                userPassword = stringInput("Enter the password");
                // If the user gets it wrong again, the loop will repeat.

                maxGuesses = maxGuesses - 1; //alternate: maxGuesses-- ;
            }
            if (maxGuesses > 1) {
                // if the loop condition is false, then the user got the password right.
                // Print 'access granted' method
                System.out.println("Correct password - access granted");
            }
            else {
                System.out.println("You have gotten the password wrong 5 times. You are locked out.");
                //the program will end with this if you get the password wrong:
                System.exit(0);
            }
            //corrent try: output:
        // Enter the password
        //kittens
        //Correct password - access granted

            //incorrect try: output:
        // Enter the password
        //
        //Password incorrect, access denied!
        //Try again
        //Enter the password
        //
        //Password incorrect, access denied!
        //Try again
        //Enter the password
        //
        //Password incorrect, access denied!
        //Try again
        //Enter the password
        //
        //Password incorrect, access denied!
        //Try again
        //Enter the password
        //
        //You have gotten the password wrong 5 times. You are locked out.
        }
        //put your top secret program that will only run if the password is correct:
        //Todo top secret program here:
    }

vid_3_while_loop_SalesTaxWhileLoop_fromClara

import static input.InputUtils.doubleInput;
import static input.InputUtils.yesNoInput;

public class vid_3_while_loop_SalesTaxWhileLoop_fromClara {
        public static void main(String[] args) {

            //want the loop to run at least once
            boolean moreCalculations = true;
            double price;
            //replicates adding on sales tax
            double salesTax = 1.07;

            //This loop repeats as long as the user wants to do more calculations

            while (moreCalculations) {

                price = doubleInput("Type in a price");
                double priceInclTax = price * salesTax;
                System.out.println("The price plus sales tax is " + priceInclTax);

                // To decide if the loop should repeat, ask the user if they want to continue.
                // Notice that the moreCalculations variable is used in the while loop condition.
                moreCalculations = yesNoInput("Do you want to continue?");
            }

            System.out.println("Thanks for using the program - goodbye!");

        }
    }
vid_3_while_loop_SalesTax_tidier_ClarasCode
d
package org.example.week2_loops_and_arrays;

import java.text.NumberFormat;

import static input.InputUtils.doubleInput;
import static input.InputUtils.yesNoInput;

public class vid_3_while_loop_SalesTax_tidier_ClarasCode {
    public static void main(String[] args) {

            boolean moreCalculations = true;
            double price;
            double salesTax = 1.07;

            while (moreCalculations) {

                price = doubleInput("Type in a price");
                double priceInclTax = price * salesTax;

                //Create a NumberFormat object - this takes numbers, and formats them to a particular format
                //in this case, as a currency value. If your computer's location is set to the US, then
                //it will display with a dollar sign, a period separating the dollars and cents, and 2 decimal places.
                //If you happen to be in Europe, you'll see a Euro sign, and a comma separating the Euros and cents.

                NumberFormat currencyFormatter = NumberFormat.getCurrencyInstance();
                //needed to import NumberFormat class
                String formattedPrice = currencyFormatter.format(priceInclTax);

                System.out.println("The price plus sales tax is " + formattedPrice);

                moreCalculations = yesNoInput("Do you want to continue? ");
            }

            System.out.println("Thanks for using the program - goodbye!");
        }
    }

vid_3_break_WhileLoopBreakExampleRandomNumber_fromClaraCode

**can be done in for or while loops
**more common in while loops

//break
    ** ends the loop, breaks out of the loop

//if a while condition is complex, it might be easier to write a while(true) loop thn use if
//statements in the loop to test the conditions and then break when you need to get out of the loop.

package org.example.week2_loops_and_arrays;

import static input.InputUtils.stringInput;

//how to get random numbers: (import random number library)
import java.util.Random;

public class vid_3_break_WhileLoopBreakExampleRandomNumber_fromClaraCode {
    public static void main(String[] args) {

        //will require the Random utility to be imported above:
        Random randomNumberGenerator = new Random();

        while (true) {

            System.out.println("Would you like a random number?");
            System.out.println("Enter any key for a random number, or Q to quit");

            String userInput = stringInput();

            if (userInput.equalsIgnoreCase("Q")) {
                break;   //immediately stops the loop, jump to next statement after the loop
            }

            // If we get to this line, the loop didn't break
            // Generate and display a random number

            int randomNumber = randomNumberGenerator.nextInt();
            // .nextInt() with no argument generate a random number from all the possible integer values

            System.out.println("Your random number is " + randomNumber);

        }

        System.out.println("Thanks for using the program - bye!");

    }

}

// continue
    **skips the rest of this iteration.
    **if a while condition is still true, or a for loop still has more times to run; the next loop
    iteration will run as usual if the while condition is true:
    **not very common

vid_3_ContinueExampleAddingNumbers_fromClarasCode

{
    public static void main(String[] args) {

        // Ask user for 5 numbers between 1 and 100, and add them up. Ignore numbers outside this range

        //count of numbers entered starts here with 0:
        int numbersEntered = 0;

        //sum the numbers starts here with 0:
        int sumOfNumbers = 0;

        while ( numbersEntered < 5 ) {

            int number = intInput("Please enter a number between 0 and 100.");

            //check to see if the number is between 1 and 100, if it's not, continue will skip the rest of the loop
                //and go back up to the "please enter a number..."
            if (number < 0 || number > 100 ) {
                System.out.println("You must enter a number between 0 and 100");
                continue;     // Skip the rest of the loop. If the while condition is still true, the loop will continue.
            }

            //if the number is valid, it will be counted here:
            numbersEntered++;

            System.out.println("You have now entered " + numbersEntered + " number(s). The last valid number you entered was " + number);

            // You'll probably process the numbers somehow - let's add them up and figure out the average
            sumOfNumbers = sumOfNumbers + number;

        }

        System.out.println("Thanks for using the program. The total of all the numbers was " + sumOfNumbers);
        System.out.println("And the average of all 5 numbers was " + sumOfNumbers/5);

    }
}

//vid_3_your_turn_while_loop

//Create a variable called secretNumber, and set the value to any number between 1 and 10
//Write a loop that asks the user to guess a number that the computer is thinking of.
// Print a success message if they guess correctly. Ask the user to try again if they get it wrong.
// The user can have as many guesses as they need
//
//Extra challenge – tell the user if they need to guess higher or lower

package org.example.week2_loops_and_arrays;

import static input.InputUtils.intInput;

public class vid_3_your_turn_while_loop {
    public static void main(String[] args) {

        int secretNumber = 8;
        int numberGuess = intInput("Guess my number");

        while (numberGuess != secretNumber) {
            System.out.println("Incorrect, try again");

            if (numberGuess < secretNumber){
                System.out.println("That's wrong, guess higher.");
            }

            if (numberGuess > secretNumber){
                System.out.println("That's wrong, guess lower.");
            }
            numberGuess = intInput("Guess my number");
        }
        System.out.println("You guessed correctly!");

    }
}

vid_3_your_turn_add_random_number_generator

//Modify the guess-the-number game
//Instead of a number stored in the program, your program should generate a random number for the user to guess
//How to create a random integer between 0 and 9:
//took code from vid_3_your_turn_while_loop

package org.example.week2_loops_and_arrays;

import java.util.Random;
import static input.InputUtils.intInput;

public class vid_3_your_turn_add_random_number_generator {
    public static void main(String[] args) {

                //int secretNumber = 8;

                Random random = new Random();

                //if you want a random number between 0 and 9:
                int secretNumber = random.nextInt(10);

                int numberGuess = intInput("Guess my number");

                while (numberGuess != secretNumber) {
                    System.out.println("Incorrect, try again");

                    if (numberGuess < secretNumber){
                        System.out.println("That's wrong, guess higher.");
                    }

                    if (numberGuess > secretNumber){
                        System.out.println("That's wrong, guess lower.");
                    }
                    numberGuess = intInput("Guess my number");
                }
                System.out.println("You guessed correctly!");

            }
        }


*****From powerpoint:***
CONSTANTS IN JAVA:

Use the keyword final to indicate a constant value

final int CENTS_IN_DOLLAR = 100;

final double PI = 3.14159;

final String APPLICATION_NAME = "Best Final Project Ever";

By convention, names of constants are uppercase
Separate words in constant name with  _ (underscore)
It's not mandatory, but it is good style

If you want the value of PI you would probably use the built-in constant PI
from the Math library class

final double PI = Math.PI;

Math library also has other useful math functions in e.g. trigonometry, powers,
logs, degrees/radians

http://docs.oracle.com/javase/8/docs/api/java/lang/Math.html

***********vid_4 arrays:****************
**a simple data structure
**could store numbers
**the elements are kept in order
**the elements are all the same type
**the elements are numbered. Positions start from zero
**you define how many items there are
**the array has a name, and the group is referred to by this name
**each element can be referred to by its name

//Syntax for an array:

Decide how many items you want to store
And, what type these items are
Use this syntax – note the square brackets

// Create an array called scores
// to store 10 int variables

data type, square brackets, name of array, = "new" (this is a new array object), type of array plus size
int[] scores = new int[10];

//Or, you can also create the array this way
//The previous version is more common
int scores[] = new int[10];

*********Creating arrays examples:**********
//arrays are faster than lists
//Create an array called data to store 3 ints
int[] data = new int[3];

//Use a variable to specify the size of array
int size = 10;
int[] moreData = new int[size];

//Create an array called names to store 100 Strings
String[] names = new String[100];

//Create an array called prices to store 70 doubles
double[] prices = new double[70];

**Putting data into an array:
//Create an array called data to store 3 ints
int[] data = new int[3];
data[0] = 10;
data[1] = 15;
data[2] = 8;

** Fetching data from an array: (slide 38)
//Create an array called data to store 3 ints
int data[] = new int[3];
data[0] = 10;
data[1] = 15;
data[2] = 8;

//Print first element
System.out.println("first element= " + data[0]);

//Store second element in another variable
int secondElement = data[1];

//Store last element in another variable
int lastElement = data[2];

*****Put data in your array**** (slide 39)

Array numbering starts at 0
The last item is (array size - 1)
Example: put some data in the scores array

int[] scores = new int[10];
scores[0] = 98;
scores[7] = 76;
scores[4] = 54;  //Can edit in any order
scores[9] = 98;  // The last element
scores[10] = 87; //ERROR
scores[-1] = 92; //ERROR

**Fetch data from an array: (slide 40)***********
Use the element number and square brackets

int myScore = scores[7];

names[6] = "Miriam";
String theName = names[6];

Works the same for an array of any type of data
Just as long as everything in the array is of the same type

*** You can also add data to an array when you create it:*********
Put your data in curly brackets, separated by commas

String[] languages = {"Java", "Python", "C#"};

int[] numbers = { 2, 4, 6, 8, 10, 12 };

***How long is an array?*****
Use arrayname.length to measure an array
The length is an int value





