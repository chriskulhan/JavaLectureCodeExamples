From Clara's powerpoint chapter 11:

vid_1:

**Why do we have tests in your labs?

-Is it just for grading?
-They are used to help calculate your grade

-But the idea of testing is important to check code quality in real-world projects
-As a software developer, you'll be expected to write code that passes tests
-AND write your own tests to check code!

**Topics

-Software testing - high level. Why write tests?
-Designing code that can be tested effectively
-Testing - unit tests (used in our projects)
-Assertions (things that make the tests pass or fail)
-Automation and CI/CD - running tests at GitHub with GitHub actions
    (how to use them in the real world as a programmer)

**Software Testing

-Testing is very important for finding bugs and errors in code
-And to verify correctness: does this application meet requirements?
    Does it do what the customer wants?

**Testing can:
-Improve reliability (does the application work correctly?)
-Improve availability (avoid being down for maintenance)
-Improve software quality (makes programmers more thoughtful about writing good code)
-Improve user experience, increase user retention
-Reduce the risk of security issues (SQL injection, DoS, other vulnerabilities)

**Humans vs. automatic testing (slide6)
-Two broad types of testing
    -Human tests (by you, or the Quality Assurance (QA) staff, or later in the process,
        select customers, alpha/beta testers)
    -Automated tests (integration tests, unit tests such as Java's unit tests, functional tests)
-Important to have both automatic tests, and human testers
-This is why I ask you to run and test your lab code, and run the lab's tests


**Software Testing by humans
-Humans will use your app, so to make sure it truly works, we need a human to try
    it and test it out (try to break it!)
-Software testing is a skilled job
-Testers need to
    -understand the code
    -understand the requirements
    -understand the users
    -know how and where the code will be deployed/used
    -be creative, possess a thorough knowledge of how to break code
-Often companies will have Quality Assurance (QA) staff or testers who work
    independently from the developers
-And have developers test their own, and other people's code

***Testing with unit tests
-Running and testing your application with many combinations of input is time consuming
-Remember you should repeat tests when anything changes, in case you broke working code
-Software tests - often called unit tests - can automate this process

**Automatic tests - unit tests - can be helpful (slide 9)

-For each part (or unit) of your program,
    -Specify example input(s) to your program, and the expected output/result
    -Tests will run code with input, check the expected output/result is produced
-That's what the tests in your labs are doing
-A "unit" is usually a method
-A simple method may have 1-2 tests
-A more complex method may have several tests, each to check different aspects of its functionality

***Automatic Testing (slide 10)
-Writing code that tests your code
-A test can call a method with some input, checks the output is as expected
-Can create set of tests, each test checks one aspect of your code
-Together, the tests will try and check as many aspects of your project as possible - test coverage
-Much faster than manual testing
-But, does not replace manual testing, we still need to do both
-The tests are part of a project

**Unit tests with JUnit (slide 11)

-JUnit is the standard unit testing framework for Java code
-You can write a unit test to test a unit (usually one method or part of a method) of
    your Java code for correct functionality
-Developers create a set of unit tests for a project as they work on it
-Run tests as needed to verify code is still working, and that you haven't broken
    anything else (if something stops working, it's called a regression)

-Other languages have their own unit test frameworks. Python and C# unit tests are
    like Java JUnit tests


**Writing code in methods enables testing

-This is an important reason for why we write code in methods

//example getNextMovie (in week 4)
-A method has defined input, through parameters, and defined output as a return value
-So, we can create tests that call the method with example input, and check the output


-Test for getNextMovie method  (start with @Test(timeout = 3000)
-Create an example list  (List<String> exampleList = List.of("Wonder Woman", "JAWS", "Star Wars IV");

-Call getNextMovie, with that list:
String nextMovie = Question_3_Movie_Watch_List.getNextMovie(exampleList);

-Check that the result is the first movie in the list
-Store the result:

//use assertions to check if the return value is what we expected:
assertEquals("Return the first movie from the list", "Wonder Woman", next movie);
assertEquals("Don't modify the movies list", 3, exampleList.size());
//is the size of the movie still 3 after the code in nextMovie has run
    (alternatively: are arguments 2 and 3 the same?)

//assertEquals has 3 arguments
1. message to print
2. expected value
3. actual value that your code returns

example for: assertEquals("Return the first movie from the list", "Wonder Woman", next movie);
1. "Return the first movie from the list"
2. "Wonder Woman"
3. next movie

if argument 2 and 3 are different, then the test will find that.

-Can check other aspects of how the method works - for example, this test checks that the example list still has 3 movies in it

vid_2:
First Unit Test:
//work in lab-11-intro-to-testing-chriskulhan

**Assertions (slide 15)
-Central to unit testing
-Assert that your code is behaving correctly
-If things are working as expected, the assertions are happy, test passes
-If things are not working as expected, assertion causes test to fail

-If your code being tested throws an exception, that also counts as a test fail

***Open the test file Question_1_Create_Welcome_Message_Test.java (slide 16)
Tests often have an Arrange - Action - Assert structure
Arrange: set up the scenario the test is checking
Action: call the method to test
Assert: check that things worked as expected

***Good practices with testing (slide 24)

-Test AS you develop, NOT at the end - or even before you write code!
    -Agile methodology stresses ongoing testing
    -Writing tests then writing code is called "test driven development"
-Test with valid input - "happy paths"
-Test with invalid, weird, missing, random, malicious input - "unhappy paths"
-Test everything every time anything is changed
-Automatic tests and human tests are both important

***Testing Concerns (slide 32)

-Remember that we wrote the test, so testing depends on writing the right test
-It's easy to write a broken test
-You should verify that the test is running and it's checking the correct thing
-Independently calculate what a method should do, and test that
-Testing often done in teams: more people develop and review each test


Why are doubles, and other floating point numbers, imprecise?
https://timothybramlett.com/floating-point-imprecision.html

For real-world apps that use currency or anything else that needs to be precise, we might use BigDecimal,
https://www.baeldung.com/java-bigdecimal-biginteger


